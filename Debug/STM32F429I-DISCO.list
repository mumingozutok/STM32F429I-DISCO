
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011650  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aac0  08011800  08011800  00021800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2c0  0801c2c0  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  0801c2c0  0801c2c0  0002c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2c8  0801c2c8  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c2c8  0801c2c8  0002c2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c2cc  0801c2cc  0002c2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0801c2d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030160  2**0
                  CONTENTS
 10 .bss          00002624  20000160  20000160  00030160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002784  20002784  00030160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003394f  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000857f  00000000  00000000  00063adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bb8  00000000  00000000  0006c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027d8  00000000  00000000  0006ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d67f  00000000  00000000  000713f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003456d  00000000  00000000  0009ea6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc6ce  00000000  00000000  000d2fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001cf6aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b8f4  00000000  00000000  001cf700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080117e8 	.word	0x080117e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	080117e8 	.word	0x080117e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initiate_input_channels>:

uint8_t uart_rx_data;
uint32_t counter_hal_dma = 0, counter_dma_callback = 0;


void initiate_input_channels(){
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOA;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <initiate_input_channels+0x1c>)
 800058e:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <initiate_input_channels+0x20>)
 8000590:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_0;
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <initiate_input_channels+0x1c>)
 8000594:	2201      	movs	r2, #1
 8000596:	605a      	str	r2, [r3, #4]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000017c 	.word	0x2000017c
 80005a8:	40020000 	.word	0x40020000

080005ac <initiate_output_channels>:

void initiate_output_channels(){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOG;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <initiate_output_channels+0x2c>)
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <initiate_output_channels+0x30>)
 80005b4:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_13;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <initiate_output_channels+0x2c>)
 80005b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005bc:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOG;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <initiate_output_channels+0x2c>)
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <initiate_output_channels+0x30>)
 80005c2:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_14;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <initiate_output_channels+0x2c>)
 80005c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ca:	60da      	str	r2, [r3, #12]
	outputChannel[2].pin = GPIO_PIN_13;

	outputChannel[3].port = GPIOC;
	outputChannel[3].pin = GPIO_PIN_5;
	 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000184 	.word	0x20000184
 80005dc:	40021800 	.word	0x40021800

080005e0 <initate_analog_channels>:

void initate_analog_channels(){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	analog_input_channel[0].ai = &adc_info;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <initate_analog_channels+0x28>)
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <initate_analog_channels+0x2c>)
 80005e8:	605a      	str	r2, [r3, #4]
	analog_input_channel[0].data = 0;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <initate_analog_channels+0x28>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	801a      	strh	r2, [r3, #0]

	analog_input_channel[1].ai = &adc_info;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <initate_analog_channels+0x28>)
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <initate_analog_channels+0x2c>)
 80005f4:	60da      	str	r2, [r3, #12]
	analog_input_channel[1].data = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <initate_analog_channels+0x28>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	811a      	strh	r2, [r3, #8]

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200001a4 	.word	0x200001a4
 800060c:	20000000 	.word	0x20000000

08000610 <hal_gpio_write_pin>:

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	80fb      	strh	r3, [r7, #6]
 800061c:	4613      	mov	r3, r2
 800061e:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <hal_gpio_write_pin+0x38>)
 8000624:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000628:	4618      	mov	r0, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <hal_gpio_write_pin+0x38>)
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	b29b      	uxth	r3, r3
 8000636:	797a      	ldrb	r2, [r7, #5]
 8000638:	4619      	mov	r1, r3
 800063a:	f005 fe7f 	bl	800633c <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000184 	.word	0x20000184

0800064c <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <hal_gpio_read_pin+0x30>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800065c:	4618      	mov	r0, r3
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <hal_gpio_read_pin+0x30>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	b29b      	uxth	r3, r3
 800066a:	4619      	mov	r1, r3
 800066c:	f005 fe4e 	bl	800630c <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000017c 	.word	0x2000017c

08000680 <hal_read_analog_ch>:

//------------------ADC readings with DMA---------------------------------------
uint32_t hal_read_analog_ch(uint32_t chNum){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch = &analog_input_channel[chNum];
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <hal_read_analog_ch+0x54>)
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
	ADC_Info* ai = ch->ai;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60bb      	str	r3, [r7, #8]
	if(ai->ready_flag == 1){ //check for the conv finish
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d111      	bne.n	80006c4 <hal_read_analog_ch+0x44>
		//Start DMA controlled ADC single convertion
		//this adc is working on two channels IN3 and IN10
		//so there will be two channel value after one conversion
		ai->ready_flag = 0; //disable the flag to notify there is an ongoing process
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2200      	movs	r2, #0
 80006a4:	711a      	strb	r2, [r3, #4]
		HAL_ADC_Start_DMA(ai->adc, (uint32_t*) &ai->data, ai->ch_count);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1d99      	adds	r1, r3, #6
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80006b4:	461a      	mov	r2, r3
 80006b6:	f003 fb89 	bl	8003dcc <HAL_ADC_Start_DMA>
		counter_hal_dma++;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <hal_read_analog_ch+0x58>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <hal_read_analog_ch+0x58>)
 80006c2:	6013      	str	r3, [r2, #0]
	}

	return analog_input_channel[chNum].data;
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <hal_read_analog_ch+0x54>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200001a4 	.word	0x200001a4
 80006d8:	200001b4 	.word	0x200001b4

080006dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch;
	ADC_Info* ai;
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006e4:	2300      	movs	r3, #0
 80006e6:	75fb      	strb	r3, [r7, #23]
 80006e8:	e01e      	b.n	8000728 <HAL_ADC_ConvCpltCallback+0x4c>
		ch = &analog_input_channel[i];
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <HAL_ADC_ConvCpltCallback+0x60>)
 80006f0:	4413      	add	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
		ai = ch->ai;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	60fb      	str	r3, [r7, #12]
		if(hadc == ai->adc){
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d10e      	bne.n	8000722 <HAL_ADC_ConvCpltCallback+0x46>
			ch->data = ai->data[i];
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	88da      	ldrh	r2, [r3, #6]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	801a      	strh	r2, [r3, #0]
			ai->ready_flag = 1;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2201      	movs	r2, #1
 8000716:	711a      	strb	r2, [r3, #4]
			counter_dma_callback++;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_ADC_ConvCpltCallback+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_ADC_ConvCpltCallback+0x64>)
 8000720:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	3301      	adds	r3, #1
 8000726:	75fb      	strb	r3, [r7, #23]
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d9dd      	bls.n	80006ea <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	200001a4 	.word	0x200001a4
 8000740:	200001b8 	.word	0x200001b8

08000744 <hal_get_tick>:
//-------------------------------------------------------------------------------

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000748:	f003 f98c 	bl	8003a64 <HAL_GetTick>
 800074c:	4603      	mov	r3, r0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}

08000752 <hal_init_tick>:

void hal_init_tick(){
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 8000756:	2000      	movs	r0, #0
 8000758:	f001 fca4 	bl	80020a4 <HAL_InitTick>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <init_comm_data_service+0x18>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	4904      	ldr	r1, [pc, #16]	; (800077c <init_comm_data_service+0x1c>)
 800076c:	4618      	mov	r0, r3
 800076e:	f00a f909 	bl	800a984 <HAL_UART_Receive_IT>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000028 	.word	0x20000028
 800077c:	20000650 	.word	0x20000650

08000780 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <init_comm_timing_service+0x1c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f009 fc37 	bl	8009ffc <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <init_comm_timing_service+0x1c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f822 	bl	80007dc <stop_comm_timer>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000028 	.word	0x20000028

080007a0 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f022 0201 	bic.w	r2, r2, #1
 80007b6:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0201 	orr.w	r2, r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 0201 	bic.w	r2, r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	4909      	ldr	r1, [pc, #36]	; (8000838 <HAL_UART_RxCpltCallback+0x30>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f00a f8b5 	bl	800a984 <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_UART_RxCpltCallback+0x34>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ffbe 	bl	80007a0 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	4904      	ldr	r1, [pc, #16]	; (8000838 <HAL_UART_RxCpltCallback+0x30>)
 8000828:	2000      	movs	r0, #0
 800082a:	f00b ff00 	bl	800c62e <Runtime_CommDataService_NewData_Received>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000650 	.word	0x20000650
 800083c:	20000028 	.word	0x20000028

08000840 <Runtime_Adaptor_TIM_PeriodElapsedCallback>:

void Runtime_Adaptor_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	if(htim == ra.comm_htim){
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <Runtime_Adaptor_TIM_PeriodElapsedCallback+0x2c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d107      	bne.n	8000862 <Runtime_Adaptor_TIM_PeriodElapsedCallback+0x22>
		stop_comm_timer(ra.comm_htim);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <Runtime_Adaptor_TIM_PeriodElapsedCallback+0x2c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffc0 	bl	80007dc <stop_comm_timer>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
 800085c:	2000      	movs	r0, #0
 800085e:	f00b ff11 	bl	800c684 <Runtime_CommDataService_Process_DataBuffer>
	}
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <hal_modbus_uart_tx+0x24>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	887a      	ldrh	r2, [r7, #2]
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4618      	mov	r0, r3
 8000886:	f00a f838 	bl	800a8fa <HAL_UART_Transmit_IT>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000028 	.word	0x20000028

08000898 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <get_uniqueid+0x38>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <get_uniqueid+0x3c>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3304      	adds	r3, #4
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <get_uniqueid+0x40>)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3308      	adds	r3, #8
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	1fff7a10 	.word	0x1fff7a10
 80008e8:	1fff7a14 	.word	0x1fff7a14
 80008ec:	1fff7a24 	.word	0x1fff7a24

080008f0 <get_flash_memory_info>:

//---------------------Flash functions---------------------------------------
void get_flash_memory_info(uint32_t* start_addr, uint32_t* size){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	*start_addr = ADDR_FLASH_SECTOR_23;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <get_flash_memory_info+0x24>)
 80008fe:	601a      	str	r2, [r3, #0]
	*size = FLASH_MEMORY_SIZE;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	081e0000 	.word	0x081e0000

08000918 <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	757b      	strb	r3, [r7, #21]
	uint16_t i;
	uint32_t data;

	HAL_FLASH_Unlock();
 800092a:	f004 ff85 	bl	8005838 <HAL_FLASH_Unlock>

	for (i = 0; i < size; i+=4) {
 800092e:	2300      	movs	r3, #0
 8000930:	82fb      	strh	r3, [r7, #22]
 8000932:	e01a      	b.n	800096a <write_to_flash+0x52>
		data = *(uint32_t*)(p+i);
 8000934:	8afb      	ldrh	r3, [r7, #22]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	613b      	str	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_addr + i, data) == HAL_OK) ret = 1;
 800093e:	8afa      	ldrh	r2, [r7, #22]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	18d1      	adds	r1, r2, r3
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	461a      	mov	r2, r3
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	2002      	movs	r0, #2
 800094e:	f004 ff1f 	bl	8005790 <HAL_FLASH_Program>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <write_to_flash+0x46>
 8000958:	2301      	movs	r3, #1
 800095a:	757b      	strb	r3, [r7, #21]
 800095c:	e002      	b.n	8000964 <write_to_flash+0x4c>
		else {
			ret = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	757b      	strb	r3, [r7, #21]
			break;
 8000962:	e006      	b.n	8000972 <write_to_flash+0x5a>
	for (i = 0; i < size; i+=4) {
 8000964:	8afb      	ldrh	r3, [r7, #22]
 8000966:	3304      	adds	r3, #4
 8000968:	82fb      	strh	r3, [r7, #22]
 800096a:	8afa      	ldrh	r2, [r7, #22]
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	429a      	cmp	r2, r3
 8000970:	d3e0      	bcc.n	8000934 <write_to_flash+0x1c>
		}
	}

	HAL_FLASH_Lock();
 8000972:	f004 ff83 	bl	800587c <HAL_FLASH_Lock>
}
 8000976:	bf00      	nop
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <erase_flash>:

uint8_t erase_flash(uint32_t start_addr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t SectorError = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
	FLASH_EraseInitTypeDef EraseInitStruct;


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000992:	f004 ff51 	bl	8005838 <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS         ;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = FLASH_SECTOR_23;
 800099e:	2317      	movs	r3, #23
 80009a0:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80009a2:	f107 0220 	add.w	r2, r7, #32
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 f8b5 	bl	8005b1c <HAL_FLASHEx_Erase>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <erase_flash+0x40>
	{
		ret = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009be:	e002      	b.n	80009c6 <erase_flash+0x46>
	}

	else ret = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 80009c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <hal_get_encoder_value>:

//---------------------Encoder Function---------------------------------------------------
int8_t hal_get_encoder_value(uint8_t ch)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	if(ch==0){
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d105      	bne.n	80009f0 <hal_get_encoder_value+0x1c>
		return (htim1.Instance->CNT>>2);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <hal_get_encoder_value+0x2c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	e000      	b.n	80009f2 <hal_get_encoder_value+0x1e>
	}
	else{
		return 0;
 80009f0:	2300      	movs	r3, #0
	}
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000ba0 	.word	0x20000ba0

08000a04 <Display_String>:
//---------------------Display FUnctions---------------------------------------------------

//Display Functions
void  Display_String(int32_t startX, int32_t startY,
		int32_t width, int32_t height,
		int32_t attr, char* str, uint16_t len){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	603b      	str	r3, [r7, #0]
	BSP_LCD_SetFont(&Font16);
 8000a12:	4809      	ldr	r0, [pc, #36]	; (8000a38 <Display_String+0x34>)
 8000a14:	f002 f9d8 	bl	8002dc8 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY); //can gather from attr
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <Display_String+0x38>)
 8000a1a:	f002 f9bd 	bl	8002d98 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(startX, startY, str, LEFT_MODE);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	b298      	uxth	r0, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	b299      	uxth	r1, r3
 8000a26:	2303      	movs	r3, #3
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	f002 fa53 	bl	8002ed4 <BSP_LCD_DisplayStringAt>
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000007c 	.word	0x2000007c
 8000a3c:	ff404040 	.word	0xff404040

08000a40 <Display_Number>:

void  Display_Number(int32_t startX, int32_t startY,
		int32_t width, int32_t height,
		int32_t attr, int32_t val){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]


	char str[16];
	itoa(val, str, 10);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	220a      	movs	r2, #10
 8000a54:	4619      	mov	r1, r3
 8000a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a58:	f00f fee0 	bl	801081c <itoa>

	BSP_LCD_SetFont(&Font16);
 8000a5c:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <Display_Number+0x60>)
 8000a5e:	f002 f9b3 	bl	8002dc8 <BSP_LCD_SetFont>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	f002 f997 	bl	8002d98 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(startX, startY, width, height);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	b298      	uxth	r0, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	b299      	uxth	r1, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	f002 fb9b 	bl	80031b4 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000a7e:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <Display_Number+0x64>)
 8000a80:	f002 f98a 	bl	8002d98 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(startX, startY, str, LEFT_MODE);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	b298      	uxth	r0, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	f107 0210 	add.w	r2, r7, #16
 8000a90:	2303      	movs	r3, #3
 8000a92:	f002 fa1f 	bl	8002ed4 <BSP_LCD_DisplayStringAt>
}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000007c 	.word	0x2000007c
 8000aa4:	ff0000ff 	.word	0xff0000ff

08000aa8 <Display_Image>:

void Display_Image(int32_t startX, int32_t startY,
		int32_t width, int32_t height,
		int32_t attr, int32_t val){
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
	//define the image table enties
	uint16_t* image_table[] = {
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <Display_Image+0x6c>)
 8000ab8:	f107 0410 	add.w	r4, r7, #16
 8000abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			image_ok,
			image_warning,
			image_error
	};

	if(val >= sizeof(image_table)) return;
 8000ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d821      	bhi.n	8000b0c <Display_Image+0x64>

	//First clear the screen part
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f002 f964 	bl	8002d98 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(startX, startY, width, height);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	b298      	uxth	r0, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f002 fb68 	bl	80031b4 <BSP_LCD_FillRect>

	//Then draw the bmp to the given coordinates
	GUI_Disbitmap(startX, startY, width, height, image_table[val]);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	b298      	uxth	r0, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	b299      	uxth	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b29c      	uxth	r4, r3
 8000af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	f107 0c20 	add.w	ip, r7, #32
 8000afc:	4463      	add	r3, ip
 8000afe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4623      	mov	r3, r4
 8000b06:	f00b fab8 	bl	800c07a <GUI_Disbitmap>
 8000b0a:	e000      	b.n	8000b0e <Display_Image+0x66>
	if(val >= sizeof(image_table)) return;
 8000b0c:	bf00      	nop
}
 8000b0e:	3724      	adds	r7, #36	; 0x24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	08011800 	.word	0x08011800

08000b18 <Display_Clear_Area>:

//-------------------------------Analog Bar-------------------
uint8_t analogbar_draw_first_call = 1;

void Display_Clear_Area(uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4623      	mov	r3, r4
 8000b28:	80fb      	strh	r3, [r7, #6]
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	807b      	strh	r3, [r7, #2]
 8000b32:	4613      	mov	r3, r2
 8000b34:	803b      	strh	r3, [r7, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b36:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b3a:	f002 f92d 	bl	8002d98 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, w, h);
 8000b3e:	883b      	ldrh	r3, [r7, #0]
 8000b40:	887a      	ldrh	r2, [r7, #2]
 8000b42:	88b9      	ldrh	r1, [r7, #4]
 8000b44:	88f8      	ldrh	r0, [r7, #6]
 8000b46:	f002 fb35 	bl	80031b4 <BSP_LCD_FillRect>
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}

08000b52 <Display_AnalogBar_BoundingRect>:

	Display_String(x, y, 11, 16, 0, "%", 1);
	Display_Number(x+13, y, 33, 16, 0, val_perc);
}

void Display_AnalogBar_BoundingRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 8000b52:	b590      	push	{r4, r7, lr}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4604      	mov	r4, r0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4623      	mov	r3, r4
 8000b62:	80fb      	strh	r3, [r7, #6]
 8000b64:	4603      	mov	r3, r0
 8000b66:	80bb      	strh	r3, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	803b      	strh	r3, [r7, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK); //can gather from attr
 8000b70:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b74:	f002 f910 	bl	8002d98 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(x, y, w, h);
 8000b78:	883b      	ldrh	r3, [r7, #0]
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	88b9      	ldrh	r1, [r7, #4]
 8000b7e:	88f8      	ldrh	r0, [r7, #6]
 8000b80:	f002 fae6 	bl	8003150 <BSP_LCD_DrawRect>
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd90      	pop	{r4, r7, pc}

08000b8c <Display_AnalogBar>:

void Display_AnalogBar(int32_t startX, int32_t startY,
		int32_t width, int32_t height,
		int32_t attr, int32_t val){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6178      	str	r0, [r7, #20]
 8000b94:	6139      	str	r1, [r7, #16]
 8000b96:	60fa      	str	r2, [r7, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
	static uint8_t old_val_perc=0;
	static uint8_t old_val_perc_div10 = 0;

	//val_max, val_min should come from the upper layers, 0->val_min, 4096->val_max
	int16_t val_max = 100, val_min=0;
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	847b      	strh	r3, [r7, #34]	; 0x22

	//boundary control
	if(val > val_max) val = val_max;
 8000ba2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dd02      	ble.n	8000bb2 <Display_AnalogBar+0x26>
 8000bac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
	if(val < val_min) val = val_min;
 8000bb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	da02      	bge.n	8000bc2 <Display_AnalogBar+0x36>
 8000bbc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
	if(width < 25) width = 25;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b18      	cmp	r3, #24
 8000bc6:	dc01      	bgt.n	8000bcc <Display_AnalogBar+0x40>
 8000bc8:	2319      	movs	r3, #25
 8000bca:	60fb      	str	r3, [r7, #12]
	if(height < 25) height = 25;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b18      	cmp	r3, #24
 8000bd0:	dc01      	bgt.n	8000bd6 <Display_AnalogBar+0x4a>
 8000bd2:	2319      	movs	r3, #25
 8000bd4:	60bb      	str	r3, [r7, #8]

	//uint16_t text_y = (height - 16) / 2 + startY;

	//calculate val to cell count
	uint8_t val_perc = (uint8_t)((float)((float)val/(float)(val_max-val_min) * 100.0)); //0-100
 8000bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000be4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000d5c <Display_AnalogBar+0x1d0>
 8000bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c02:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c06:	793b      	ldrb	r3, [r7, #4]
 8000c08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	if(analogbar_draw_first_call == 1){
 8000c0c:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <Display_AnalogBar+0x1d4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d117      	bne.n	8000c44 <Display_AnalogBar+0xb8>
		analogbar_draw_first_call = 0;
 8000c14:	4b52      	ldr	r3, [pc, #328]	; (8000d60 <Display_AnalogBar+0x1d4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
		Display_Clear_Area(startX, startY, width, height);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	b298      	uxth	r0, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	b299      	uxth	r1, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f7ff ff75 	bl	8000b18 <Display_Clear_Area>
		Display_AnalogBar_BoundingRect(startX, startY, width, height);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	b298      	uxth	r0, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	b299      	uxth	r1, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f7ff ff88 	bl	8000b52 <Display_AnalogBar_BoundingRect>

				BSP_LCD_FillRect(startX+cell_width*bar_count++, startY, draw_cell_width, height);
			}
		}
	}
}
 8000c42:	e087      	b.n	8000d54 <Display_AnalogBar+0x1c8>
		if(val_perc != old_val_perc){
 8000c44:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <Display_AnalogBar+0x1d8>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d003      	beq.n	8000c58 <Display_AnalogBar+0xcc>
			old_val_perc = val_perc;
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <Display_AnalogBar+0x1d8>)
 8000c52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c56:	7013      	strb	r3, [r2, #0]
		if(val_perc / 10 != old_val_perc_div10){
 8000c58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c5c:	4a42      	ldr	r2, [pc, #264]	; (8000d68 <Display_AnalogBar+0x1dc>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <Display_AnalogBar+0x1e0>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d072      	beq.n	8000d54 <Display_AnalogBar+0x1c8>
			old_val_perc_div10 = val_perc/10;
 8000c6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <Display_AnalogBar+0x1dc>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	08db      	lsrs	r3, r3, #3
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <Display_AnalogBar+0x1e0>)
 8000c7e:	701a      	strb	r2, [r3, #0]
			Display_Clear_Area(startX, startY, width, height);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	b298      	uxth	r0, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	b299      	uxth	r1, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	f7ff ff42 	bl	8000b18 <Display_Clear_Area>
			Display_AnalogBar_BoundingRect(startX, startY, width, height);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	b298      	uxth	r0, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	f7ff ff55 	bl	8000b52 <Display_AnalogBar_BoundingRect>
			width = width - 10; //5 left-right margin
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3b0a      	subs	r3, #10
 8000cac:	60fb      	str	r3, [r7, #12]
			height = height -10; //5 top bottom margin
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3b0a      	subs	r3, #10
 8000cb2:	60bb      	str	r3, [r7, #8]
			startX += 5;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3305      	adds	r3, #5
 8000cb8:	617b      	str	r3, [r7, #20]
			startY += 5;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	3305      	adds	r3, #5
 8000cbe:	613b      	str	r3, [r7, #16]
			uint16_t cell_width = width / 10;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4a2b      	ldr	r2, [pc, #172]	; (8000d70 <Display_AnalogBar+0x1e4>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1092      	asrs	r2, r2, #2
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	83fb      	strh	r3, [r7, #30]
			uint16_t draw_cell_width = cell_width - cell_width / 4;
 8000cd0:	8bfb      	ldrh	r3, [r7, #30]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	8bfa      	ldrh	r2, [r7, #30]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	83bb      	strh	r3, [r7, #28]
			uint8_t bar_count = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(uint8_t i = 0;i<val_perc;i+=10){
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ce8:	e02e      	b.n	8000d48 <Display_AnalogBar+0x1bc>
				if(bar_count < 3){
 8000cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d803      	bhi.n	8000cfa <Display_AnalogBar+0x16e>
					BSP_LCD_SetTextColor(LCD_COLOR_RED); //can gather from attr
 8000cf2:	4820      	ldr	r0, [pc, #128]	; (8000d74 <Display_AnalogBar+0x1e8>)
 8000cf4:	f002 f850 	bl	8002d98 <BSP_LCD_SetTextColor>
 8000cf8:	e00c      	b.n	8000d14 <Display_AnalogBar+0x188>
				else if(bar_count < 6){
 8000cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d804      	bhi.n	8000d0c <Display_AnalogBar+0x180>
					BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); //can gather from attr
 8000d02:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000d06:	f002 f847 	bl	8002d98 <BSP_LCD_SetTextColor>
 8000d0a:	e003      	b.n	8000d14 <Display_AnalogBar+0x188>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN); //can gather from attr
 8000d0c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000d10:	f002 f842 	bl	8002d98 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(startX+cell_width*bar_count++, startY, draw_cell_width, height);
 8000d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	8bfa      	ldrh	r2, [r7, #30]
 8000d22:	fb12 f303 	smulbb	r3, r2, r3
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b298      	uxth	r0, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	b299      	uxth	r1, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	8bba      	ldrh	r2, [r7, #28]
 8000d3a:	f002 fa3b 	bl	80031b4 <BSP_LCD_FillRect>
			for(uint8_t i = 0;i<val_perc;i+=10){
 8000d3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d42:	330a      	adds	r3, #10
 8000d44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d3ca      	bcc.n	8000cea <Display_AnalogBar+0x15e>
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	42c80000 	.word	0x42c80000
 8000d60:	20000030 	.word	0x20000030
 8000d64:	200001bc 	.word	0x200001bc
 8000d68:	cccccccd 	.word	0xcccccccd
 8000d6c:	200001bd 	.word	0x200001bd
 8000d70:	66666667 	.word	0x66666667
 8000d74:	ffff0000 	.word	0xffff0000

08000d78 <init_lcd_display>:

#define LCD_FRAME_BUFFER_LAYER0                  (LCD_FRAME_BUFFER+0x130000)
#define LCD_FRAME_BUFFER_LAYER1                  LCD_FRAME_BUFFER
#define CONVERTED_FRAME_BUFFER                   (LCD_FRAME_BUFFER+0x260000))

void init_lcd_display(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 8000d7c:	f001 fec4 	bl	8002b08 <BSP_LCD_Init>

   /* Layer2 Init */
   BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8000d80:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000d84:	2001      	movs	r0, #1
 8000d86:	f001 ff41 	bl	8002c0c <BSP_LCD_LayerDefaultInit>
   /* Set Foreground Layer */
   BSP_LCD_SelectLayer(1);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f001 ffa2 	bl	8002cd4 <BSP_LCD_SelectLayer>
   /* Clear the LCD */
   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f002 f832 	bl	8002dfc <BSP_LCD_Clear>
   BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f001 ffe7 	bl	8002d70 <BSP_LCD_SetColorKeying>
   BSP_LCD_SetLayerVisible(1, DISABLE);
 8000da2:	2100      	movs	r1, #0
 8000da4:	2001      	movs	r0, #1
 8000da6:	f001 ffa5 	bl	8002cf4 <BSP_LCD_SetLayerVisible>

   /* Layer1 Init */
   BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8000daa:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <init_lcd_display+0x50>)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f001 ff2d 	bl	8002c0c <BSP_LCD_LayerDefaultInit>

   /* Set Foreground Layer */
   BSP_LCD_SelectLayer(0);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f001 ff8e 	bl	8002cd4 <BSP_LCD_SelectLayer>

   /* Enable The LCD */
   BSP_LCD_DisplayOn();
 8000db8:	f002 fa56 	bl	8003268 <BSP_LCD_DisplayOn>

   /* Clear the LCD */
   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f002 f81c 	bl	8002dfc <BSP_LCD_Clear>


   //BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
   //BSP_LCD_DisplayStringAt(5, 5, "hello", LEFT_MODE);
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	d0130000 	.word	0xd0130000

08000dcc <Display_Clear>:

void Display_Clear()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	analogbar_draw_first_call = 1;
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <Display_Clear+0x18>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dda:	f002 f80f 	bl	8002dfc <BSP_LCD_Clear>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000030 	.word	0x20000030

08000de8 <hal_disable_interrupts>:

//Watch function

//interrupt management
void hal_disable_interrupts(){
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
	__disable_irq();
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <hal_enable_interrupts>:

void hal_enable_interrupts(){
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000dfe:	b662      	cpsie	i
}
 8000e00:	bf00      	nop
	__enable_irq();
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <initiate_runtime>:

void initiate_runtime()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 8000e10:	f7ff fca6 	bl	8000760 <init_comm_data_service>
	  init_comm_timing_service();
 8000e14:	f7ff fcb4 	bl	8000780 <init_comm_timing_service>
	  initiate_input_channels();
 8000e18:	f7ff fbb6 	bl	8000588 <initiate_input_channels>
	  initiate_output_channels();
 8000e1c:	f7ff fbc6 	bl	80005ac <initiate_output_channels>
	  initate_analog_channels();
 8000e20:	f7ff fbde 	bl	80005e0 <initate_analog_channels>
	  init_lcd_display();
 8000e24:	f7ff ffa8 	bl	8000d78 <init_lcd_display>
	  //init_fatfs();
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f002 fde2 	bl	80039f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_Init();
 8000e34:	f001 fe68 	bl	8002b08 <BSP_LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f820 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 fb78 	bl	8001530 <MX_GPIO_Init>
  MX_CRC_Init();
 8000e40:	f000 f8ee 	bl	8001020 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000e44:	f000 f900 	bl	8001048 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e48:	f000 fb22 	bl	8001490 <MX_FMC_Init>
  MX_I2C3_Init();
 8000e4c:	f000 f92e 	bl	80010ac <MX_I2C3_Init>
  MX_LTDC_Init();
 8000e50:	f000 f96c 	bl	800112c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000e54:	f000 f9ea 	bl	800122c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000e58:	f000 fa1e 	bl	8001298 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e5c:	f000 faa2 	bl	80013a4 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000e60:	f000 faca 	bl	80013f8 <MX_USB_OTG_HS_HCD_Init>
  MX_DMA_Init();
 8000e64:	f000 faf4 	bl	8001450 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e68:	f000 f87a 	bl	8000f60 <MX_ADC1_Init>
  MX_TIM7_Init();
 8000e6c:	f000 fa64 	bl	8001338 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  initiate_runtime();
 8000e70:	f7ff ffcc 	bl	8000e0c <initiate_runtime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mcCore_SM();
 8000e74:	f00b f9fe 	bl	800c274 <mcCore_SM>
 8000e78:	e7fc      	b.n	8000e74 <main+0x48>
	...

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2230      	movs	r2, #48	; 0x30
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f00f fcd8 	bl	8010840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <SystemClock_Config+0xdc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <SystemClock_Config+0xdc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <SystemClock_Config+0xdc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eec:	2308      	movs	r3, #8
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000ef0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efa:	2307      	movs	r3, #7
 8000efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	4618      	mov	r0, r3
 8000f04:	f007 fb68 	bl	80085d8 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f0e:	f000 fc3d 	bl	800178c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f12:	f007 fb11 	bl	8008538 <HAL_PWREx_EnableOverDrive>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f1c:	f000 fc36 	bl	800178c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f007 fdc2 	bl	8008ac8 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f4a:	f000 fc1f 	bl	800178c <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f74:	4a28      	ldr	r2, [pc, #160]	; (8001018 <MX_ADC1_Init+0xb8>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <MX_ADC1_Init+0xbc>)
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	4814      	ldr	r0, [pc, #80]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fc2:	f002 fd7f 	bl	8003ac4 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 fbde 	bl	800178c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fe2:	f003 f821 	bl	8004028 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fec:	f000 fbce 	bl	800178c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ff0:	230d      	movs	r3, #13
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000ffe:	f003 f813 	bl	8004028 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001008:	f000 fbc0 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200007b0 	.word	0x200007b0
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_CRC_Init+0x20>)
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <MX_CRC_Init+0x24>)
 8001028:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_CRC_Init+0x20>)
 800102c:	f003 fb98 	bl	8004760 <HAL_CRC_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001036:	f000 fba9 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000700 	.word	0x20000700
 8001044:	40023000 	.word	0x40023000

08001048 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_DMA2D_Init+0x60>)
 8001050:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 800105a:	2202      	movs	r2, #2
 800105c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 800106c:	2202      	movs	r2, #2
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 8001072:	2200      	movs	r2, #0
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 800107e:	f003 ffeb 	bl	8005058 <HAL_DMA2D_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001088:	f000 fb80 	bl	800178c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800108c:	2101      	movs	r1, #1
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_DMA2D_Init+0x5c>)
 8001090:	f004 fa50 	bl	8005534 <HAL_DMA2D_ConfigLayer>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800109a:	f000 fb77 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000be8 	.word	0x20000be8
 80010a8:	4002b000 	.word	0x4002b000

080010ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_I2C3_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_I2C3_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_I2C3_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <MX_I2C3_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_I2C3_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_I2C3_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_I2C3_Init+0x74>)
 80010ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_I2C3_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C3_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_I2C3_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_I2C3_Init+0x74>)
 80010ea:	f006 fc55 	bl	8007998 <HAL_I2C_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010f4:	f000 fb4a 	bl	800178c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <MX_I2C3_Init+0x74>)
 80010fc:	f006 fd90 	bl	8007c20 <HAL_I2CEx_ConfigAnalogFilter>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001106:	f000 fb41 	bl	800178c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_I2C3_Init+0x74>)
 800110e:	f006 fdc3 	bl	8007c98 <HAL_I2CEx_ConfigDigitalFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 fb38 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000654 	.word	0x20000654
 8001124:	40005c00 	.word	0x40005c00
 8001128:	000186a0 	.word	0x000186a0

0800112c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2234      	movs	r2, #52	; 0x34
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00f fb81 	bl	8010840 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001140:	4a39      	ldr	r2, [pc, #228]	; (8001228 <MX_LTDC_Init+0xfc>)
 8001142:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <MX_LTDC_Init+0xf8>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <MX_LTDC_Init+0xf8>)
 800115e:	2209      	movs	r2, #9
 8001160:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001164:	2201      	movs	r2, #1
 8001166:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_LTDC_Init+0xf8>)
 800116a:	221d      	movs	r2, #29
 800116c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001170:	2203      	movs	r2, #3
 8001172:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 349;
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001176:	f240 125d 	movw	r2, #349	; 0x15d
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 483;
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_LTDC_Init+0xf8>)
 800117e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 359;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001186:	f240 1267 	movw	r2, #359	; 0x167
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_LTDC_Init+0xf8>)
 800118e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_LTDC_Init+0xf8>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_LTDC_Init+0xf8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_LTDC_Init+0xf8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011ac:	481d      	ldr	r0, [pc, #116]	; (8001224 <MX_LTDC_Init+0xf8>)
 80011ae:	f006 fdb3 	bl	8007d18 <HAL_LTDC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80011b8:	f000 fae8 	bl	800178c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80011c0:	23f0      	movs	r3, #240	; 0xf0
 80011c2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80011c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011cc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011ce:	2302      	movs	r3, #2
 80011d0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80011da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011de:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011e0:	2307      	movs	r3, #7
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80011e4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80011ea:	23f0      	movs	r3, #240	; 0xf0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80011ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_LTDC_Init+0xf8>)
 800120e:	f006 ff15 	bl	800803c <HAL_LTDC_ConfigLayer>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001218:	f000 fab8 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3738      	adds	r7, #56	; 0x38
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000708 	.word	0x20000708
 8001228:	40016800 	.word	0x40016800

0800122c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_SPI5_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <MX_SPI5_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_SPI5_Init+0x64>)
 8001238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_SPI5_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_SPI5_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_SPI5_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_SPI5_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_SPI5_Init+0x64>)
 8001258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_SPI5_Init+0x64>)
 8001260:	2218      	movs	r2, #24
 8001262:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_SPI5_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_SPI5_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_SPI5_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_SPI5_Init+0x64>)
 8001278:	220a      	movs	r2, #10
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_SPI5_Init+0x64>)
 800127e:	f008 f88e 	bl	800939e <HAL_SPI_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001288:	f000 fa80 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200006a8 	.word	0x200006a8
 8001294:	40015000 	.word	0x40015000

08001298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM1_Init+0x98>)
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <MX_TIM1_Init+0x9c>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_TIM1_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_TIM1_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM1_Init+0x98>)
 80012c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_TIM1_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM1_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_TIM1_Init+0x98>)
 80012e2:	f008 fe3b 	bl	8009f5c <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012ec:	f000 fa4e 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM1_Init+0x98>)
 80012fe:	f008 fff5 	bl	800a2ec <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001308:	f000 fa40 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM1_Init+0x98>)
 800131a:	f009 fa11 	bl	800a740 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001324:	f000 fa32 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000ba0 	.word	0x20000ba0
 8001334:	40010000 	.word	0x40010000

08001338 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM7_Init+0x64>)
 8001348:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <MX_TIM7_Init+0x68>)
 800134a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_TIM7_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_TIM7_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_TIM7_Init+0x64>)
 800135a:	f242 7210 	movw	r2, #10000	; 0x2710
 800135e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_TIM7_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM7_Init+0x64>)
 8001368:	f008 fdf8 	bl	8009f5c <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001372:	f000 fa0b 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM7_Init+0x64>)
 8001384:	f009 f9dc 	bl	800a740 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800138e:	f000 f9fd 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000c5c 	.word	0x20000c5c
 80013a0:	40001400 	.word	0x40001400

080013a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_USART1_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013dc:	f009 fa40 	bl	800a860 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f9d1 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200007f8 	.word	0x200007f8
 80013f4:	40011000 	.word	0x40011000

080013f8 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001404:	220c      	movs	r2, #12
 8001406:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800140a:	2201      	movs	r2, #1
 800140c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001416:	2202      	movs	r2, #2
 8001418:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001434:	f004 ff9b 	bl	800636e <HAL_HCD_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 800143e:	f000 f9a5 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000083c 	.word	0x2000083c
 800144c:	40040000 	.word	0x40040000

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <MX_DMA_Init+0x3c>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2038      	movs	r0, #56	; 0x38
 8001478:	f003 f948 	bl	800470c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800147c:	2038      	movs	r0, #56	; 0x38
 800147e:	f003 f961 	bl	8004744 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_FMC_Init+0x98>)
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <MX_FMC_Init+0x9c>)
 80014ac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_FMC_Init+0x98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_FMC_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_FMC_Init+0x98>)
 80014bc:	2204      	movs	r2, #4
 80014be:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_FMC_Init+0x98>)
 80014c2:	2210      	movs	r2, #16
 80014c4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_FMC_Init+0x98>)
 80014c8:	2240      	movs	r2, #64	; 0x40
 80014ca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_FMC_Init+0x98>)
 80014ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014d2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_FMC_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_FMC_Init+0x98>)
 80014dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_FMC_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_FMC_Init+0x98>)
 80014ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80014f4:	2307      	movs	r3, #7
 80014f6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80014fc:	2307      	movs	r3, #7
 80014fe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001500:	2303      	movs	r3, #3
 8001502:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_FMC_Init+0x98>)
 8001512:	f007 fec5 	bl	80092a0 <HAL_SDRAM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800151c:	f000 f936 	bl	800178c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000c28 	.word	0x20000c28
 800152c:	a0000140 	.word	0xa0000140

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <MX_GPIO_Init+0x218>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a7e      	ldr	r2, [pc, #504]	; (8001748 <MX_GPIO_Init+0x218>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b7c      	ldr	r3, [pc, #496]	; (8001748 <MX_GPIO_Init+0x218>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	4b78      	ldr	r3, [pc, #480]	; (8001748 <MX_GPIO_Init+0x218>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a77      	ldr	r2, [pc, #476]	; (8001748 <MX_GPIO_Init+0x218>)
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b75      	ldr	r3, [pc, #468]	; (8001748 <MX_GPIO_Init+0x218>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	4b71      	ldr	r3, [pc, #452]	; (8001748 <MX_GPIO_Init+0x218>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a70      	ldr	r2, [pc, #448]	; (8001748 <MX_GPIO_Init+0x218>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b6e      	ldr	r3, [pc, #440]	; (8001748 <MX_GPIO_Init+0x218>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <MX_GPIO_Init+0x218>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a69      	ldr	r2, [pc, #420]	; (8001748 <MX_GPIO_Init+0x218>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <MX_GPIO_Init+0x218>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <MX_GPIO_Init+0x218>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a62      	ldr	r2, [pc, #392]	; (8001748 <MX_GPIO_Init+0x218>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b60      	ldr	r3, [pc, #384]	; (8001748 <MX_GPIO_Init+0x218>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <MX_GPIO_Init+0x218>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a5b      	ldr	r2, [pc, #364]	; (8001748 <MX_GPIO_Init+0x218>)
 80015dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b59      	ldr	r3, [pc, #356]	; (8001748 <MX_GPIO_Init+0x218>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b55      	ldr	r3, [pc, #340]	; (8001748 <MX_GPIO_Init+0x218>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a54      	ldr	r2, [pc, #336]	; (8001748 <MX_GPIO_Init+0x218>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b52      	ldr	r3, [pc, #328]	; (8001748 <MX_GPIO_Init+0x218>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <MX_GPIO_Init+0x218>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <MX_GPIO_Init+0x218>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <MX_GPIO_Init+0x218>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2136      	movs	r1, #54	; 0x36
 800162a:	4848      	ldr	r0, [pc, #288]	; (800174c <MX_GPIO_Init+0x21c>)
 800162c:	f004 fe86 	bl	800633c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4846      	ldr	r0, [pc, #280]	; (8001750 <MX_GPIO_Init+0x220>)
 8001636:	f004 fe81 	bl	800633c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001640:	4844      	ldr	r0, [pc, #272]	; (8001754 <MX_GPIO_Init+0x224>)
 8001642:	f004 fe7b 	bl	800633c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800164c:	4842      	ldr	r0, [pc, #264]	; (8001758 <MX_GPIO_Init+0x228>)
 800164e:	f004 fe75 	bl	800633c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001658:	4840      	ldr	r0, [pc, #256]	; (800175c <MX_GPIO_Init+0x22c>)
 800165a:	f004 fe6f 	bl	800633c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin PC5 */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|GPIO_PIN_5;
 800165e:	2336      	movs	r3, #54	; 0x36
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4835      	ldr	r0, [pc, #212]	; (800174c <MX_GPIO_Init+0x21c>)
 8001676:	f004 fb91 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800167a:	f248 0307 	movw	r3, #32775	; 0x8007
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001680:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	482f      	ldr	r0, [pc, #188]	; (8001750 <MX_GPIO_Init+0x220>)
 8001692:	f004 fb83 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4828      	ldr	r0, [pc, #160]	; (8001750 <MX_GPIO_Init+0x220>)
 80016ae:	f004 fb75 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016b2:	2304      	movs	r3, #4
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4823      	ldr	r0, [pc, #140]	; (8001754 <MX_GPIO_Init+0x224>)
 80016c6:	f004 fb69 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	481c      	ldr	r0, [pc, #112]	; (8001754 <MX_GPIO_Init+0x224>)
 80016e4:	f004 fb5a 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80016e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <MX_GPIO_Init+0x228>)
 80016fe:	f004 fb4d 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001702:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	480f      	ldr	r0, [pc, #60]	; (8001758 <MX_GPIO_Init+0x228>)
 800171c:	f004 fb3e 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001720:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <MX_GPIO_Init+0x22c>)
 800173a:	f004 fb2f 	bl	8005d9c <HAL_GPIO_Init>

}
 800173e:	bf00      	nop
 8001740:	3738      	adds	r7, #56	; 0x38
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40020800 	.word	0x40020800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021800 	.word	0x40021800

08001760 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d102      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001772:	f002 f963 	bl	8003a3c <HAL_IncTick>

  else{
	  Runtime_Adaptor_TIM_PeriodElapsedCallback(htim);
  }
  /* USER CODE END Callback 1 */
}
 8001776:	e002      	b.n	800177e <HAL_TIM_PeriodElapsedCallback+0x1e>
	  Runtime_Adaptor_TIM_PeriodElapsedCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff f861 	bl	8000840 <Runtime_Adaptor_TIM_PeriodElapsedCallback>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40001000 	.word	0x40001000

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <HAL_ADC_MspInit+0x11c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d178      	bne.n	80018fc <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_ADC_MspInit+0x120>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_ADC_MspInit+0x120>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_ADC_MspInit+0x120>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_ADC_MspInit+0x120>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a36      	ldr	r2, [pc, #216]	; (8001908 <HAL_ADC_MspInit+0x120>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_ADC_MspInit+0x120>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <HAL_ADC_MspInit+0x120>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <HAL_ADC_MspInit+0x120>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_ADC_MspInit+0x120>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800185e:	2308      	movs	r3, #8
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001862:	2303      	movs	r3, #3
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4826      	ldr	r0, [pc, #152]	; (800190c <HAL_ADC_MspInit+0x124>)
 8001872:	f004 fa93 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001876:	2320      	movs	r3, #32
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187a:	2303      	movs	r3, #3
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4821      	ldr	r0, [pc, #132]	; (8001910 <HAL_ADC_MspInit+0x128>)
 800188a:	f004 fa87 	bl	8005d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <HAL_ADC_MspInit+0x130>)
 8001892:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018d0:	4810      	ldr	r0, [pc, #64]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018d2:	f002 ff61 	bl	8004798 <HAL_DMA_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80018dc:	f7ff ff56 	bl	800178c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_ADC_MspInit+0x12c>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2012      	movs	r0, #18
 80018f2:	f002 ff0b 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018f6:	2012      	movs	r0, #18
 80018f8:	f002 ff24 	bl	8004744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020800 	.word	0x40020800
 8001910:	40020000 	.word	0x40020000
 8001914:	20000b40 	.word	0x20000b40
 8001918:	40026410 	.word	0x40026410

0800191c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_CRC_MspInit+0x3c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10d      	bne.n	800194a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_CRC_MspInit+0x40>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_CRC_MspInit+0x40>)
 8001938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_CRC_MspInit+0x40>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023000 	.word	0x40023000
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_DMA2D_MspInit+0x48>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d115      	bne.n	800199e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_DMA2D_MspInit+0x4c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_DMA2D_MspInit+0x4c>)
 800197c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_DMA2D_MspInit+0x4c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2105      	movs	r1, #5
 8001992:	205a      	movs	r0, #90	; 0x5a
 8001994:	f002 feba 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001998:	205a      	movs	r0, #90	; 0x5a
 800199a:	f002 fed3 	bl	8004744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	4002b000 	.word	0x4002b000
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_I2C_MspInit+0xc4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d14b      	bne.n	8001a6a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a10:	2312      	movs	r3, #18
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4815      	ldr	r0, [pc, #84]	; (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a28:	f004 f9b8 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <HAL_I2C_MspInit+0xd0>)
 8001a4a:	f004 f9a7 	bl	8005d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40005c00 	.word	0x40005c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020000 	.word	0x40020000

08001a84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09a      	sub	sp, #104	; 0x68
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	2230      	movs	r2, #48	; 0x30
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00e fecb 	bl	8010840 <memset>
  if(hltdc->Instance==LTDC)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a85      	ldr	r2, [pc, #532]	; (8001cc4 <HAL_LTDC_MspInit+0x240>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	f040 8103 	bne.w	8001cbc <HAL_LTDC_MspInit+0x238>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8001aba:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 fa29 	bl	8008f24 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001ad8:	f7ff fe58 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	4a78      	ldr	r2, [pc, #480]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aea:	6453      	str	r3, [r2, #68]	; 0x44
 8001aec:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af4:	623b      	str	r3, [r7, #32]
 8001af6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a71      	ldr	r2, [pc, #452]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a63      	ldr	r2, [pc, #396]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a5c      	ldr	r2, [pc, #368]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5c:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4a55      	ldr	r2, [pc, #340]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6313      	str	r3, [r2, #48]	; 0x30
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_LTDC_MspInit+0x244>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bb2:	230e      	movs	r3, #14
 8001bb4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4843      	ldr	r0, [pc, #268]	; (8001ccc <HAL_LTDC_MspInit+0x248>)
 8001bbe:	f004 f8ed 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001bc2:	f641 0358 	movw	r3, #6232	; 0x1858
 8001bc6:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bdc:	4619      	mov	r1, r3
 8001bde:	483c      	ldr	r0, [pc, #240]	; (8001cd0 <HAL_LTDC_MspInit+0x24c>)
 8001be0:	f004 f8dc 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001be4:	2303      	movs	r3, #3
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bf4:	2309      	movs	r3, #9
 8001bf6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4835      	ldr	r0, [pc, #212]	; (8001cd4 <HAL_LTDC_MspInit+0x250>)
 8001c00:	f004 f8cc 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c08:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c16:	230e      	movs	r3, #14
 8001c18:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c1e:	4619      	mov	r1, r3
 8001c20:	482c      	ldr	r0, [pc, #176]	; (8001cd4 <HAL_LTDC_MspInit+0x250>)
 8001c22:	f004 f8bb 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c26:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c2a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c38:	230e      	movs	r3, #14
 8001c3a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c40:	4619      	mov	r1, r3
 8001c42:	4825      	ldr	r0, [pc, #148]	; (8001cd8 <HAL_LTDC_MspInit+0x254>)
 8001c44:	f004 f8aa 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001c48:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c5a:	230e      	movs	r3, #14
 8001c5c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c62:	4619      	mov	r1, r3
 8001c64:	481d      	ldr	r0, [pc, #116]	; (8001cdc <HAL_LTDC_MspInit+0x258>)
 8001c66:	f004 f899 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001c6a:	2348      	movs	r3, #72	; 0x48
 8001c6c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c82:	4619      	mov	r1, r3
 8001c84:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <HAL_LTDC_MspInit+0x25c>)
 8001c86:	f004 f889 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001c8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c8e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c9c:	2309      	movs	r3, #9
 8001c9e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <HAL_LTDC_MspInit+0x254>)
 8001ca8:	f004 f878 	bl	8005d9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2105      	movs	r1, #5
 8001cb0:	2058      	movs	r0, #88	; 0x58
 8001cb2:	f002 fd2b 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cb6:	2058      	movs	r0, #88	; 0x58
 8001cb8:	f002 fd44 	bl	8004744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3768      	adds	r7, #104	; 0x68
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40016800 	.word	0x40016800
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00

08001ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_SPI_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12c      	bne.n	8001d60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_SPI_MspInit+0x88>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_SPI_MspInit+0x88>)
 8001d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_SPI_MspInit+0x88>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_SPI_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_SPI_MspInit+0x88>)
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_SPI_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001d3e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d50:	2305      	movs	r3, #5
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_SPI_MspInit+0x8c>)
 8001d5c:	f004 f81e 	bl	8005d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40015000 	.word	0x40015000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40021400 	.word	0x40021400

08001d74 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_SPI_MspDeInit+0x30>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10a      	bne.n	8001d9c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_SPI_MspDeInit+0x34>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_SPI_MspDeInit+0x34>)
 8001d8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d92:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_SPI_MspDeInit+0x38>)
 8001d98:	f004 f9ac 	bl	80060f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40015000 	.word	0x40015000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40021400 	.word	0x40021400

08001db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_TIM_Base_MspInit+0x70>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_TIM_Base_MspInit+0x74>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_TIM_Base_MspInit+0x74>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_TIM_Base_MspInit+0x74>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001dde:	e01a      	b.n	8001e16 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_TIM_Base_MspInit+0x78>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d115      	bne.n	8001e16 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_TIM_Base_MspInit+0x74>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_TIM_Base_MspInit+0x74>)
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_TIM_Base_MspInit+0x74>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2037      	movs	r0, #55	; 0x37
 8001e0c:	f002 fc7e 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e10:	2037      	movs	r0, #55	; 0x37
 8001e12:	f002 fc97 	bl	8004744 <HAL_NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40001400 	.word	0x40001400

08001e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_UART_MspInit+0x94>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d134      	bne.n	8001eb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_UART_MspInit+0x98>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_UART_MspInit+0x98>)
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_UART_MspInit+0x98>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0x98>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_UART_MspInit+0x98>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_UART_MspInit+0x98>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_UART_MspInit+0x9c>)
 8001ea4:	f003 ff7a 	bl	8005d9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2025      	movs	r0, #37	; 0x25
 8001eae:	f002 fc2d 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eb2:	2025      	movs	r0, #37	; 0x25
 8001eb4:	f002 fc46 	bl	8004744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_HCD_MspInit+0x94>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d134      	bne.n	8001f58 <HAL_HCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_HCD_MspInit+0x98>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_HCD_MspInit+0x98>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_HCD_MspInit+0x98>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB12     ------> USB_OTG_HS_ID
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f0a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <HAL_HCD_MspInit+0x9c>)
 8001f28:	f003 ff38 	bl	8005d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_HCD_MspInit+0x98>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <HAL_HCD_MspInit+0x98>)
 8001f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_HCD_MspInit+0x98>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	204d      	movs	r0, #77	; 0x4d
 8001f4e:	f002 fbdd 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001f52:	204d      	movs	r0, #77	; 0x4d
 8001f54:	f002 fbf6 	bl	8004744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40040000 	.word	0x40040000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020400 	.word	0x40020400

08001f6c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_FMC_MspInit+0x104>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d16f      	bne.n	8002068 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_FMC_MspInit+0x104>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_FMC_MspInit+0x108>)
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_FMC_MspInit+0x108>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_FMC_MspInit+0x108>)
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001faa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001fae:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	482c      	ldr	r0, [pc, #176]	; (8002078 <HAL_FMC_MspInit+0x10c>)
 8001fc6:	f003 fee9 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fda:	230c      	movs	r3, #12
 8001fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4826      	ldr	r0, [pc, #152]	; (800207c <HAL_FMC_MspInit+0x110>)
 8001fe4:	f003 feda 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001fe8:	f248 1333 	movw	r3, #33075	; 0x8133
 8001fec:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4619      	mov	r1, r3
 8002002:	481f      	ldr	r0, [pc, #124]	; (8002080 <HAL_FMC_MspInit+0x114>)
 8002004:	f003 feca 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002008:	f64f 7383 	movw	r3, #65411	; 0xff83
 800200c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800201a:	230c      	movs	r3, #12
 800201c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4818      	ldr	r0, [pc, #96]	; (8002084 <HAL_FMC_MspInit+0x118>)
 8002024:	f003 feba 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002028:	f24c 7303 	movw	r3, #50947	; 0xc703
 800202c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800203a:	230c      	movs	r3, #12
 800203c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4811      	ldr	r0, [pc, #68]	; (8002088 <HAL_FMC_MspInit+0x11c>)
 8002044:	f003 feaa 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002048:	2360      	movs	r3, #96	; 0x60
 800204a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002058:	230c      	movs	r3, #12
 800205a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <HAL_FMC_MspInit+0x120>)
 8002062:	f003 fe9b 	bl	8005d9c <HAL_GPIO_Init>
 8002066:	e000      	b.n	800206a <HAL_FMC_MspInit+0xfe>
    return;
 8002068:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200001c0 	.word	0x200001c0
 8002074:	40023800 	.word	0x40023800
 8002078:	40021400 	.word	0x40021400
 800207c:	40020800 	.word	0x40020800
 8002080:	40021800 	.word	0x40021800
 8002084:	40021000 	.word	0x40021000
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002098:	f7ff ff68 	bl	8001f6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	2036      	movs	r0, #54	; 0x36
 80020ba:	f002 fb27 	bl	800470c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020be:	2036      	movs	r0, #54	; 0x36
 80020c0:	f002 fb40 	bl	8004744 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_InitTick+0xa4>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_InitTick+0xa4>)
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_InitTick+0xa4>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e0:	f107 0210 	add.w	r2, r7, #16
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fee8 	bl	8008ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020f0:	f006 febe 	bl	8008e70 <HAL_RCC_GetPCLK1Freq>
 80020f4:	4603      	mov	r3, r0
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	4a13      	ldr	r2, [pc, #76]	; (800214c <HAL_InitTick+0xa8>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0c9b      	lsrs	r3, r3, #18
 8002104:	3b01      	subs	r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_InitTick+0xac>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_InitTick+0xb0>)
 800210c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_InitTick+0xac>)
 8002110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002114:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_InitTick+0xac>)
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_InitTick+0xac>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_InitTick+0xac>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <HAL_InitTick+0xac>)
 800212a:	f007 ff17 	bl	8009f5c <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002134:	4806      	ldr	r0, [pc, #24]	; (8002150 <HAL_InitTick+0xac>)
 8002136:	f007 ff61 	bl	8009ffc <HAL_TIM_Base_Start_IT>
 800213a:	4603      	mov	r3, r0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3730      	adds	r7, #48	; 0x30
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	431bde83 	.word	0x431bde83
 8002150:	20000ca4 	.word	0x20000ca4
 8002154:	40001000 	.word	0x40001000

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <ADC_IRQHandler+0x10>)
 80021b6:	f001 fcc8 	bl	8003b4a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200007b0 	.word	0x200007b0

080021c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <USART1_IRQHandler+0x10>)
 80021ca:	f008 fc0b 	bl	800a9e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200007f8 	.word	0x200007f8

080021d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <TIM6_DAC_IRQHandler+0x10>)
 80021de:	f007 ff7d 	bl	800a0dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000ca4 	.word	0x20000ca4

080021ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM7_IRQHandler+0x10>)
 80021f2:	f007 ff73 	bl	800a0dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000c5c 	.word	0x20000c5c

08002200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA2_Stream0_IRQHandler+0x10>)
 8002206:	f002 fcbd 	bl	8004b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000b40 	.word	0x20000b40

08002214 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <OTG_HS_IRQHandler+0x10>)
 800221a:	f004 f90a 	bl	8006432 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000083c 	.word	0x2000083c

08002228 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <LTDC_IRQHandler+0x10>)
 800222e:	f005 fe43 	bl	8007eb8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000708 	.word	0x20000708

0800223c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA2D_IRQHandler+0x10>)
 8002242:	f003 f866 	bl	8005312 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000be8 	.word	0x20000be8

08002250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_kill>:

int _kill(int pid, int sig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800226a:	f00e fa83 	bl	8010774 <__errno>
 800226e:	4603      	mov	r3, r0
 8002270:	2216      	movs	r2, #22
 8002272:	601a      	str	r2, [r3, #0]
	return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002292:	e7fe      	b.n	8002292 <_exit+0x12>

08002294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e00a      	b.n	80022bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	4601      	mov	r1, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf0      	blt.n	80022a6 <_read+0x12>
	}

return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e009      	b.n	80022f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf1      	blt.n	80022e0 <_write+0x12>
	}
	return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_close>:

int _close(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232e:	605a      	str	r2, [r3, #4]
	return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_isatty>:

int _isatty(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	return 1;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f00e f9e8 	bl	8010774 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20030000 	.word	0x20030000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	200001c4 	.word	0x200001c4
 80023d8:	20002788 	.word	0x20002788

080023dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002406:	490e      	ldr	r1, [pc, #56]	; (8002440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002408:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800241c:	4c0b      	ldr	r4, [pc, #44]	; (800244c <LoopFillZerobss+0x26>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800242a:	f7ff ffd7 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242e:	f00e f9b9 	bl	80107a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7fe fcfb 	bl	8000e2c <main>
  bx  lr    
 8002436:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002438:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002444:	0801c2d0 	.word	0x0801c2d0
  ldr r2, =_sbss
 8002448:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800244c:	20002784 	.word	0x20002784

08002450 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <CAN1_RX0_IRQHandler>

08002452 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002456:	f000 fa5d 	bl	8002914 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800245a:	20ca      	movs	r0, #202	; 0xca
 800245c:	f000 f95d 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002460:	20c3      	movs	r0, #195	; 0xc3
 8002462:	f000 f967 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002466:	2008      	movs	r0, #8
 8002468:	f000 f964 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800246c:	2050      	movs	r0, #80	; 0x50
 800246e:	f000 f961 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002472:	20cf      	movs	r0, #207	; 0xcf
 8002474:	f000 f951 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f95b 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800247e:	20c1      	movs	r0, #193	; 0xc1
 8002480:	f000 f958 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002484:	2030      	movs	r0, #48	; 0x30
 8002486:	f000 f955 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800248a:	20ed      	movs	r0, #237	; 0xed
 800248c:	f000 f945 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	f000 f94f 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002496:	2003      	movs	r0, #3
 8002498:	f000 f94c 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800249c:	2012      	movs	r0, #18
 800249e:	f000 f949 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80024a2:	2081      	movs	r0, #129	; 0x81
 80024a4:	f000 f946 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80024a8:	20e8      	movs	r0, #232	; 0xe8
 80024aa:	f000 f936 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80024ae:	2085      	movs	r0, #133	; 0x85
 80024b0:	f000 f940 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f93d 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80024ba:	2078      	movs	r0, #120	; 0x78
 80024bc:	f000 f93a 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80024c0:	20cb      	movs	r0, #203	; 0xcb
 80024c2:	f000 f92a 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80024c6:	2039      	movs	r0, #57	; 0x39
 80024c8:	f000 f934 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80024cc:	202c      	movs	r0, #44	; 0x2c
 80024ce:	f000 f931 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 f92e 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80024d8:	2034      	movs	r0, #52	; 0x34
 80024da:	f000 f92b 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80024de:	2002      	movs	r0, #2
 80024e0:	f000 f928 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80024e4:	20f7      	movs	r0, #247	; 0xf7
 80024e6:	f000 f918 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80024ea:	2020      	movs	r0, #32
 80024ec:	f000 f922 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80024f0:	20ea      	movs	r0, #234	; 0xea
 80024f2:	f000 f912 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 f91c 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f000 f919 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002502:	20b1      	movs	r0, #177	; 0xb1
 8002504:	f000 f909 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f000 f913 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800250e:	201b      	movs	r0, #27
 8002510:	f000 f910 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002514:	20b6      	movs	r0, #182	; 0xb6
 8002516:	f000 f900 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800251a:	200a      	movs	r0, #10
 800251c:	f000 f90a 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002520:	20a2      	movs	r0, #162	; 0xa2
 8002522:	f000 f907 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002526:	20c0      	movs	r0, #192	; 0xc0
 8002528:	f000 f8f7 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800252c:	2010      	movs	r0, #16
 800252e:	f000 f901 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002532:	20c1      	movs	r0, #193	; 0xc1
 8002534:	f000 f8f1 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002538:	2010      	movs	r0, #16
 800253a:	f000 f8fb 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800253e:	20c5      	movs	r0, #197	; 0xc5
 8002540:	f000 f8eb 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002544:	2045      	movs	r0, #69	; 0x45
 8002546:	f000 f8f5 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800254a:	2015      	movs	r0, #21
 800254c:	f000 f8f2 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002550:	20c7      	movs	r0, #199	; 0xc7
 8002552:	f000 f8e2 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002556:	2090      	movs	r0, #144	; 0x90
 8002558:	f000 f8ec 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800255c:	2036      	movs	r0, #54	; 0x36
 800255e:	f000 f8dc 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002562:	20c8      	movs	r0, #200	; 0xc8
 8002564:	f000 f8e6 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002568:	20f2      	movs	r0, #242	; 0xf2
 800256a:	f000 f8d6 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f000 f8e0 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002574:	20b0      	movs	r0, #176	; 0xb0
 8002576:	f000 f8d0 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800257a:	20c2      	movs	r0, #194	; 0xc2
 800257c:	f000 f8da 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002580:	20b6      	movs	r0, #182	; 0xb6
 8002582:	f000 f8ca 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002586:	200a      	movs	r0, #10
 8002588:	f000 f8d4 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800258c:	20a7      	movs	r0, #167	; 0xa7
 800258e:	f000 f8d1 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002592:	2027      	movs	r0, #39	; 0x27
 8002594:	f000 f8ce 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002598:	2004      	movs	r0, #4
 800259a:	f000 f8cb 	bl	8002734 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800259e:	202a      	movs	r0, #42	; 0x2a
 80025a0:	f000 f8bb 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f000 f8c5 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f000 f8c2 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 f8bf 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80025b6:	20ef      	movs	r0, #239	; 0xef
 80025b8:	f000 f8bc 	bl	8002734 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80025bc:	202b      	movs	r0, #43	; 0x2b
 80025be:	f000 f8ac 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f8b6 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f000 f8b3 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 f8b0 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80025d4:	203f      	movs	r0, #63	; 0x3f
 80025d6:	f000 f8ad 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80025da:	20f6      	movs	r0, #246	; 0xf6
 80025dc:	f000 f89d 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f000 f8a7 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f8a4 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80025ec:	2006      	movs	r0, #6
 80025ee:	f000 f8a1 	bl	8002734 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80025f2:	202c      	movs	r0, #44	; 0x2c
 80025f4:	f000 f891 	bl	800271a <ili9341_WriteReg>
  LCD_Delay(200);
 80025f8:	20c8      	movs	r0, #200	; 0xc8
 80025fa:	f000 fa79 	bl	8002af0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80025fe:	2026      	movs	r0, #38	; 0x26
 8002600:	f000 f88b 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002604:	2001      	movs	r0, #1
 8002606:	f000 f895 	bl	8002734 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800260a:	20e0      	movs	r0, #224	; 0xe0
 800260c:	f000 f885 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002610:	200f      	movs	r0, #15
 8002612:	f000 f88f 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002616:	2029      	movs	r0, #41	; 0x29
 8002618:	f000 f88c 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800261c:	2024      	movs	r0, #36	; 0x24
 800261e:	f000 f889 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002622:	200c      	movs	r0, #12
 8002624:	f000 f886 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002628:	200e      	movs	r0, #14
 800262a:	f000 f883 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800262e:	2009      	movs	r0, #9
 8002630:	f000 f880 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002634:	204e      	movs	r0, #78	; 0x4e
 8002636:	f000 f87d 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800263a:	2078      	movs	r0, #120	; 0x78
 800263c:	f000 f87a 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002640:	203c      	movs	r0, #60	; 0x3c
 8002642:	f000 f877 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002646:	2009      	movs	r0, #9
 8002648:	f000 f874 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800264c:	2013      	movs	r0, #19
 800264e:	f000 f871 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002652:	2005      	movs	r0, #5
 8002654:	f000 f86e 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002658:	2017      	movs	r0, #23
 800265a:	f000 f86b 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800265e:	2011      	movs	r0, #17
 8002660:	f000 f868 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f000 f865 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800266a:	20e1      	movs	r0, #225	; 0xe1
 800266c:	f000 f855 	bl	800271a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f000 f85f 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002676:	2016      	movs	r0, #22
 8002678:	f000 f85c 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800267c:	201b      	movs	r0, #27
 800267e:	f000 f859 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002682:	2004      	movs	r0, #4
 8002684:	f000 f856 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002688:	2011      	movs	r0, #17
 800268a:	f000 f853 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800268e:	2007      	movs	r0, #7
 8002690:	f000 f850 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002694:	2031      	movs	r0, #49	; 0x31
 8002696:	f000 f84d 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800269a:	2033      	movs	r0, #51	; 0x33
 800269c:	f000 f84a 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80026a0:	2042      	movs	r0, #66	; 0x42
 80026a2:	f000 f847 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80026a6:	2005      	movs	r0, #5
 80026a8:	f000 f844 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80026ac:	200c      	movs	r0, #12
 80026ae:	f000 f841 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80026b2:	200a      	movs	r0, #10
 80026b4:	f000 f83e 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80026b8:	2028      	movs	r0, #40	; 0x28
 80026ba:	f000 f83b 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80026be:	202f      	movs	r0, #47	; 0x2f
 80026c0:	f000 f838 	bl	8002734 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80026c4:	200f      	movs	r0, #15
 80026c6:	f000 f835 	bl	8002734 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80026ca:	2011      	movs	r0, #17
 80026cc:	f000 f825 	bl	800271a <ili9341_WriteReg>
  LCD_Delay(200);
 80026d0:	20c8      	movs	r0, #200	; 0xc8
 80026d2:	f000 fa0d 	bl	8002af0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80026d6:	2029      	movs	r0, #41	; 0x29
 80026d8:	f000 f81f 	bl	800271a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80026dc:	202c      	movs	r0, #44	; 0x2c
 80026de:	f000 f81c 	bl	800271a <ili9341_WriteReg>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80026ea:	f000 f913 	bl	8002914 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80026ee:	2103      	movs	r1, #3
 80026f0:	20d3      	movs	r0, #211	; 0xd3
 80026f2:	f000 f82c 	bl	800274e <ili9341_ReadData>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b29b      	uxth	r3, r3
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}

080026fe <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002702:	2029      	movs	r0, #41	; 0x29
 8002704:	f000 f809 	bl	800271a <ili9341_WriteReg>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002710:	2028      	movs	r0, #40	; 0x28
 8002712:	f000 f802 	bl	800271a <ili9341_WriteReg>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}

0800271a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f98e 	bl	8002a48 <LCD_IO_WriteReg>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f95f 	bl	8002a04 <LCD_IO_WriteData>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	460a      	mov	r2, r1
 8002758:	80fb      	strh	r3, [r7, #6]
 800275a:	4613      	mov	r3, r2
 800275c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800275e:	797a      	ldrb	r2, [r7, #5]
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f991 	bl	8002a8c <LCD_IO_ReadData>
 800276a:	4603      	mov	r3, r0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002778:	23f0      	movs	r3, #240	; 0xf0
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002788:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800279c:	4819      	ldr	r0, [pc, #100]	; (8002804 <SPIx_Init+0x6c>)
 800279e:	f007 fa9e 	bl	8009cde <HAL_SPI_GetState>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d12b      	bne.n	8002800 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <SPIx_Init+0x6c>)
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <SPIx_Init+0x70>)
 80027ac:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <SPIx_Init+0x6c>)
 80027b0:	2218      	movs	r2, #24
 80027b2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <SPIx_Init+0x6c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <SPIx_Init+0x6c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <SPIx_Init+0x6c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <SPIx_Init+0x6c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <SPIx_Init+0x6c>)
 80027ce:	2207      	movs	r2, #7
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <SPIx_Init+0x6c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <SPIx_Init+0x6c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <SPIx_Init+0x6c>)
 80027e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <SPIx_Init+0x6c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SPIx_Init+0x6c>)
 80027ee:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027f2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80027f4:	4803      	ldr	r0, [pc, #12]	; (8002804 <SPIx_Init+0x6c>)
 80027f6:	f000 f853 	bl	80028a0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <SPIx_Init+0x6c>)
 80027fc:	f006 fdcf 	bl	800939e <HAL_SPI_Init>
  } 
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200001c8 	.word	0x200001c8
 8002808:	40015000 	.word	0x40015000

0800280c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <SPIx_Read+0x38>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f107 0108 	add.w	r1, r7, #8
 8002826:	4808      	ldr	r0, [pc, #32]	; (8002848 <SPIx_Read+0x3c>)
 8002828:	f006 ffa6 	bl	8009778 <HAL_SPI_Receive>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002836:	f000 f827 	bl	8002888 <SPIx_Error>
  }
  
  return readvalue;
 800283a:	68bb      	ldr	r3, [r7, #8]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000070 	.word	0x20000070
 8002848:	200001c8 	.word	0x200001c8

0800284c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <SPIx_Write+0x34>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	1db9      	adds	r1, r7, #6
 8002860:	2201      	movs	r2, #1
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <SPIx_Write+0x38>)
 8002864:	f006 fe4c 	bl	8009500 <HAL_SPI_Transmit>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002872:	f000 f809 	bl	8002888 <SPIx_Error>
  }
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000070 	.word	0x20000070
 8002884:	200001c8 	.word	0x200001c8

08002888 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800288c:	4803      	ldr	r0, [pc, #12]	; (800289c <SPIx_Error+0x14>)
 800288e:	f006 fe0f 	bl	80094b0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002892:	f7ff ff81 	bl	8002798 <SPIx_Init>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200001c8 	.word	0x200001c8

080028a0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <SPIx_MspInit+0x6c>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <SPIx_MspInit+0x6c>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	6453      	str	r3, [r2, #68]	; 0x44
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <SPIx_MspInit+0x6c>)
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <SPIx_MspInit+0x6c>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <SPIx_MspInit+0x6c>)
 80028ce:	f043 0320 	orr.w	r3, r3, #32
 80028d2:	6313      	str	r3, [r2, #48]	; 0x30
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <SPIx_MspInit+0x6c>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80028e0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80028ee:	2301      	movs	r3, #1
 80028f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80028f2:	2305      	movs	r3, #5
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <SPIx_MspInit+0x70>)
 80028fe:	f003 fa4d 	bl	8005d9c <HAL_GPIO_Init>
}
 8002902:	bf00      	nop
 8002904:	3728      	adds	r7, #40	; 0x28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40021400 	.word	0x40021400

08002914 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800291a:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <LCD_IO_Init+0xe0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d164      	bne.n	80029ec <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <LCD_IO_Init+0xe0>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <LCD_IO_Init+0xe4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <LCD_IO_Init+0xe4>)
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <LCD_IO_Init+0xe4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002948:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002952:	2302      	movs	r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	4619      	mov	r1, r3
 800295c:	4827      	ldr	r0, [pc, #156]	; (80029fc <LCD_IO_Init+0xe8>)
 800295e:	f003 fa1d 	bl	8005d9c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <LCD_IO_Init+0xe4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <LCD_IO_Init+0xe4>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <LCD_IO_Init+0xe4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	4619      	mov	r1, r3
 8002996:	4819      	ldr	r0, [pc, #100]	; (80029fc <LCD_IO_Init+0xe8>)
 8002998:	f003 fa00 	bl	8005d9c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <LCD_IO_Init+0xe4>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <LCD_IO_Init+0xe4>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <LCD_IO_Init+0xe4>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80029b8:	2304      	movs	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	4619      	mov	r1, r3
 80029ce:	480c      	ldr	r0, [pc, #48]	; (8002a00 <LCD_IO_Init+0xec>)
 80029d0:	f003 f9e4 	bl	8005d9c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80029d4:	2200      	movs	r2, #0
 80029d6:	2104      	movs	r1, #4
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <LCD_IO_Init+0xec>)
 80029da:	f003 fcaf 	bl	800633c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80029de:	2201      	movs	r2, #1
 80029e0:	2104      	movs	r1, #4
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <LCD_IO_Init+0xec>)
 80029e4:	f003 fcaa 	bl	800633c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80029e8:	f7ff fed6 	bl	8002798 <SPIx_Init>
  }
}
 80029ec:	bf00      	nop
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000220 	.word	0x20000220
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40020800 	.word	0x40020800

08002a04 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a14:	480a      	ldr	r0, [pc, #40]	; (8002a40 <LCD_IO_WriteData+0x3c>)
 8002a16:	f003 fc91 	bl	800633c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4809      	ldr	r0, [pc, #36]	; (8002a44 <LCD_IO_WriteData+0x40>)
 8002a20:	f003 fc8c 	bl	800633c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff10 	bl	800284c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2104      	movs	r1, #4
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <LCD_IO_WriteData+0x40>)
 8002a32:	f003 fc83 	bl	800633c <HAL_GPIO_WritePin>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40020800 	.word	0x40020800

08002a48 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a52:	2200      	movs	r2, #0
 8002a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <LCD_IO_WriteReg+0x3c>)
 8002a5a:	f003 fc6f 	bl	800633c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2104      	movs	r1, #4
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <LCD_IO_WriteReg+0x40>)
 8002a64:	f003 fc6a 	bl	800633c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff feed 	bl	800284c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a72:	2201      	movs	r2, #1
 8002a74:	2104      	movs	r1, #4
 8002a76:	4804      	ldr	r0, [pc, #16]	; (8002a88 <LCD_IO_WriteReg+0x40>)
 8002a78:	f003 fc60 	bl	800633c <HAL_GPIO_WritePin>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40020800 	.word	0x40020800

08002a8c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	460a      	mov	r2, r1
 8002a96:	80fb      	strh	r3, [r7, #6]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <LCD_IO_ReadData+0x5c>)
 8002aa6:	f003 fc49 	bl	800633c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <LCD_IO_ReadData+0x60>)
 8002ab2:	f003 fc43 	bl	800633c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fec7 	bl	800284c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002abe:	797b      	ldrb	r3, [r7, #5]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fea3 	bl	800280c <SPIx_Read>
 8002ac6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <LCD_IO_ReadData+0x60>)
 8002ad0:	f003 fc34 	bl	800633c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <LCD_IO_ReadData+0x5c>)
 8002ada:	f003 fc2f 	bl	800633c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020c00 	.word	0x40020c00

08002af0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 ffbf 	bl	8003a7c <HAL_Delay>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b0e:	4a2e      	ldr	r2, [pc, #184]	; (8002bc8 <BSP_LCD_Init+0xc0>)
 8002b10:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b14:	2209      	movs	r2, #9
 8002b16:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002b18:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002b1e:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b20:	221d      	movs	r2, #29
 8002b22:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b26:	2203      	movs	r2, #3
 8002b28:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b2c:	f240 120d 	movw	r2, #269	; 0x10d
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b34:	f240 1243 	movw	r2, #323	; 0x143
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b3c:	f240 1217 	movw	r2, #279	; 0x117
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b44:	f240 1247 	movw	r2, #327	; 0x147
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <BSP_LCD_Init+0xc4>)
 8002b64:	2208      	movs	r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <BSP_LCD_Init+0xc4>)
 8002b6a:	22c0      	movs	r2, #192	; 0xc0
 8002b6c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <BSP_LCD_Init+0xc4>)
 8002b70:	2204      	movs	r2, #4
 8002b72:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <BSP_LCD_Init+0xc4>)
 8002b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <BSP_LCD_Init+0xc4>)
 8002b7e:	f006 f9d1 	bl	8008f24 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002b9a:	f000 fb75 	bl	8003288 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002b9e:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <BSP_LCD_Init+0xbc>)
 8002ba0:	f005 f8ba 	bl	8007d18 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <BSP_LCD_Init+0xc8>)
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <BSP_LCD_Init+0xcc>)
 8002ba8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <BSP_LCD_Init+0xc8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002bb2:	f000 fd57 	bl	8003664 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002bb6:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <BSP_LCD_Init+0xd0>)
 8002bb8:	f000 f906 	bl	8002dc8 <BSP_LCD_SetFont>

  return LCD_OK;
 8002bbc:	2300      	movs	r3, #0
}  
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000cec 	.word	0x20000cec
 8002bc8:	40016800 	.word	0x40016800
 8002bcc:	20000264 	.word	0x20000264
 8002bd0:	20000d94 	.word	0x20000d94
 8002bd4:	20000038 	.word	0x20000038
 8002bd8:	20000074 	.word	0x20000074

08002bdc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <BSP_LCD_GetXSize+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	4798      	blx	r3
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000d94 	.word	0x20000d94

08002bf4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <BSP_LCD_GetYSize+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	4798      	blx	r3
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000d94 	.word	0x20000d94

08002c0c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b090      	sub	sp, #64	; 0x40
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002c1c:	f7ff ffde 	bl	8002bdc <BSP_LCD_GetXSize>
 8002c20:	4603      	mov	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002c28:	f7ff ffe4 	bl	8002bf4 <BSP_LCD_GetYSize>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002c38:	23ff      	movs	r3, #255	; 0xff
 8002c3a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c58:	2307      	movs	r3, #7
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002c5c:	f7ff ffbe 	bl	8002bdc <BSP_LCD_GetXSize>
 8002c60:	4603      	mov	r3, r0
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002c64:	f7ff ffc6 	bl	8002bf4 <BSP_LCD_GetYSize>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4619      	mov	r1, r3
 8002c74:	4814      	ldr	r0, [pc, #80]	; (8002cc8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c76:	f005 f9e1 	bl	800803c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	4913      	ldr	r1, [pc, #76]	; (8002ccc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3304      	adds	r3, #4
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	490e      	ldr	r1, [pc, #56]	; (8002ccc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002ca2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	4909      	ldr	r1, [pc, #36]	; (8002ccc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002cba:	f005 fa7b 	bl	80081b4 <HAL_LTDC_EnableDither>
}
 8002cbe:	bf00      	nop
 8002cc0:	3740      	adds	r7, #64	; 0x40
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000cec 	.word	0x20000cec
 8002ccc:	20000298 	.word	0x20000298
 8002cd0:	20000074 	.word	0x20000074

08002cd4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <BSP_LCD_SelectLayer+0x1c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000294 	.word	0x20000294

08002cf4 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d112      	bne.n	8002d2c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <BSP_LCD_SetLayerVisible+0x78>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	01db      	lsls	r3, r3, #7
 8002d10:	4413      	add	r3, r2
 8002d12:	3384      	adds	r3, #132	; 0x84
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <BSP_LCD_SetLayerVisible+0x78>)
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	01d2      	lsls	r2, r2, #7
 8002d20:	440a      	add	r2, r1
 8002d22:	3284      	adds	r2, #132	; 0x84
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e011      	b.n	8002d50 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <BSP_LCD_SetLayerVisible+0x78>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	01db      	lsls	r3, r3, #7
 8002d36:	4413      	add	r3, r2
 8002d38:	3384      	adds	r3, #132	; 0x84
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <BSP_LCD_SetLayerVisible+0x78>)
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	4611      	mov	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	01d2      	lsls	r2, r2, #7
 8002d46:	440a      	add	r2, r1
 8002d48:	3284      	adds	r2, #132	; 0x84
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <BSP_LCD_SetLayerVisible+0x78>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <BSP_LCD_SetLayerVisible+0x78>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20000cec 	.word	0x20000cec

08002d70 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	4805      	ldr	r0, [pc, #20]	; (8002d94 <BSP_LCD_SetColorKeying+0x24>)
 8002d80:	f005 f99a 	bl	80080b8 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4803      	ldr	r0, [pc, #12]	; (8002d94 <BSP_LCD_SetColorKeying+0x24>)
 8002d88:	f005 f9da 	bl	8008140 <HAL_LTDC_EnableColorKeying>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000cec 	.word	0x20000cec

08002d98 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <BSP_LCD_SetTextColor+0x28>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <BSP_LCD_SetTextColor+0x2c>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	20000294 	.word	0x20000294
 8002dc4:	20000298 	.word	0x20000298

08002dc8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <BSP_LCD_SetFont+0x2c>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4908      	ldr	r1, [pc, #32]	; (8002df8 <BSP_LCD_SetFont+0x30>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3308      	adds	r3, #8
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000294 	.word	0x20000294
 8002df8:	20000298 	.word	0x20000298

08002dfc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <BSP_LCD_Clear+0x48>)
 8002e06:	681c      	ldr	r4, [r3, #0]
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <BSP_LCD_Clear+0x48>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <BSP_LCD_Clear+0x4c>)
 8002e0e:	2134      	movs	r1, #52	; 0x34
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461e      	mov	r6, r3
 8002e1c:	f7ff fede 	bl	8002bdc <BSP_LCD_GetXSize>
 8002e20:	4605      	mov	r5, r0
 8002e22:	f7ff fee7 	bl	8002bf4 <BSP_LCD_GetYSize>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	462a      	mov	r2, r5
 8002e34:	4631      	mov	r1, r6
 8002e36:	4620      	mov	r0, r4
 8002e38:	f000 fbdc 	bl	80035f4 <FillBuffer>
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e44:	20000294 	.word	0x20000294
 8002e48:	20000cec 	.word	0x20000cec

08002e4c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	80fb      	strh	r3, [r7, #6]
 8002e56:	460b      	mov	r3, r1
 8002e58:	80bb      	strh	r3, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <BSP_LCD_DisplayChar+0x80>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	491b      	ldr	r1, [pc, #108]	; (8002ed0 <BSP_LCD_DisplayChar+0x84>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3308      	adds	r3, #8
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <BSP_LCD_DisplayChar+0x80>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4c14      	ldr	r4, [pc, #80]	; (8002ed0 <BSP_LCD_DisplayChar+0x84>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4423      	add	r3, r4
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e90:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <BSP_LCD_DisplayChar+0x80>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <BSP_LCD_DisplayChar+0x84>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4423      	add	r3, r4
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	889b      	ldrh	r3, [r3, #4]
 8002eaa:	3307      	adds	r3, #7
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	da00      	bge.n	8002eb2 <BSP_LCD_DisplayChar+0x66>
 8002eb0:	3307      	adds	r3, #7
 8002eb2:	10db      	asrs	r3, r3, #3
 8002eb4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002eb8:	18ca      	adds	r2, r1, r3
 8002eba:	88b9      	ldrh	r1, [r7, #4]
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fade 	bl	8003480 <DrawChar>
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	20000294 	.word	0x20000294
 8002ed0:	20000298 	.word	0x20000298

08002ed4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60ba      	str	r2, [r7, #8]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	81fb      	strh	r3, [r7, #14]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	81bb      	strh	r3, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002eea:	2301      	movs	r3, #1
 8002eec:	83fb      	strh	r3, [r7, #30]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002efe:	e002      	b.n	8002f06 <BSP_LCD_DisplayStringAt+0x32>
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	617a      	str	r2, [r7, #20]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f6      	bne.n	8002f00 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f12:	f7ff fe63 	bl	8002bdc <BSP_LCD_GetXSize>
 8002f16:	4601      	mov	r1, r0
 8002f18:	4b4b      	ldr	r3, [pc, #300]	; (8003048 <BSP_LCD_DisplayStringAt+0x174>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	484b      	ldr	r0, [pc, #300]	; (800304c <BSP_LCD_DisplayStringAt+0x178>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4403      	add	r3, r0
 8002f28:	3308      	adds	r3, #8
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	889b      	ldrh	r3, [r3, #4]
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d01c      	beq.n	8002f74 <BSP_LCD_DisplayStringAt+0xa0>
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	dc33      	bgt.n	8002fa6 <BSP_LCD_DisplayStringAt+0xd2>
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <BSP_LCD_DisplayStringAt+0x74>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d019      	beq.n	8002f7a <BSP_LCD_DisplayStringAt+0xa6>
 8002f46:	e02e      	b.n	8002fa6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	1ad1      	subs	r1, r2, r3
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <BSP_LCD_DisplayStringAt+0x174>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	483e      	ldr	r0, [pc, #248]	; (800304c <BSP_LCD_DisplayStringAt+0x178>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4403      	add	r3, r0
 8002f5e:	3308      	adds	r3, #8
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	889b      	ldrh	r3, [r3, #4]
 8002f64:	fb03 f301 	mul.w	r3, r3, r1
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	89fb      	ldrh	r3, [r7, #14]
 8002f6e:	4413      	add	r3, r2
 8002f70:	83fb      	strh	r3, [r7, #30]
      break;
 8002f72:	e01b      	b.n	8002fac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002f74:	89fb      	ldrh	r3, [r7, #14]
 8002f76:	83fb      	strh	r3, [r7, #30]
      break;
 8002f78:	e018      	b.n	8002fac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	b299      	uxth	r1, r3
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <BSP_LCD_DisplayStringAt+0x174>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4831      	ldr	r0, [pc, #196]	; (800304c <BSP_LCD_DisplayStringAt+0x178>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	3308      	adds	r3, #8
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	889b      	ldrh	r3, [r3, #4]
 8002f98:	fb11 f303 	smulbb	r3, r1, r3
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	83fb      	strh	r3, [r7, #30]
      break;
 8002fa4:	e002      	b.n	8002fac <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	83fb      	strh	r3, [r7, #30]
      break;
 8002faa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fac:	e01a      	b.n	8002fe4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	89b9      	ldrh	r1, [r7, #12]
 8002fb4:	8bfb      	ldrh	r3, [r7, #30]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff48 	bl	8002e4c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <BSP_LCD_DisplayStringAt+0x174>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4922      	ldr	r1, [pc, #136]	; (800304c <BSP_LCD_DisplayStringAt+0x178>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3308      	adds	r3, #8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	889a      	ldrh	r2, [r3, #4]
 8002fd2:	8bfb      	ldrh	r3, [r7, #30]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
    i++;
 8002fde:	8bbb      	ldrh	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2dc      	uxtb	r4, r3
 8002ff2:	f7ff fdf3 	bl	8002bdc <BSP_LCD_GetXSize>
 8002ff6:	8bb9      	ldrh	r1, [r7, #28]
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <BSP_LCD_DisplayStringAt+0x174>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4d13      	ldr	r5, [pc, #76]	; (800304c <BSP_LCD_DisplayStringAt+0x178>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	442b      	add	r3, r5
 8003008:	3308      	adds	r3, #8
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	889b      	ldrh	r3, [r3, #4]
 800300e:	fb03 f301 	mul.w	r3, r3, r1
 8003012:	1ac3      	subs	r3, r0, r3
 8003014:	b299      	uxth	r1, r3
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <BSP_LCD_DisplayStringAt+0x174>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	480c      	ldr	r0, [pc, #48]	; (800304c <BSP_LCD_DisplayStringAt+0x178>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4403      	add	r3, r0
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	889b      	ldrh	r3, [r3, #4]
 800302c:	4299      	cmp	r1, r3
 800302e:	bf2c      	ite	cs
 8003030:	2301      	movcs	r3, #1
 8003032:	2300      	movcc	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4023      	ands	r3, r4
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1b7      	bne.n	8002fae <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bdb0      	pop	{r4, r5, r7, pc}
 8003048:	20000294 	.word	0x20000294
 800304c:	20000298 	.word	0x20000298

08003050 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
 800305a:	460b      	mov	r3, r1
 800305c:	80bb      	strh	r3, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <BSP_LCD_DrawHLine+0x70>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <BSP_LCD_DrawHLine+0x74>)
 800306c:	2134      	movs	r1, #52	; 0x34
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	335c      	adds	r3, #92	; 0x5c
 8003076:	681c      	ldr	r4, [r3, #0]
 8003078:	f7ff fdb0 	bl	8002bdc <BSP_LCD_GetXSize>
 800307c:	4602      	mov	r2, r0
 800307e:	88bb      	ldrh	r3, [r7, #4]
 8003080:	fb03 f202 	mul.w	r2, r3, r2
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4423      	add	r3, r4
 800308c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <BSP_LCD_DrawHLine+0x70>)
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	68f9      	ldr	r1, [r7, #12]
 8003094:	887c      	ldrh	r4, [r7, #2]
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <BSP_LCD_DrawHLine+0x70>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4d0b      	ldr	r5, [pc, #44]	; (80030c8 <BSP_LCD_DrawHLine+0x78>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	442b      	add	r3, r5
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2300      	movs	r3, #0
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2301      	movs	r3, #1
 80030b0:	4622      	mov	r2, r4
 80030b2:	f000 fa9f 	bl	80035f4 <FillBuffer>
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bdb0      	pop	{r4, r5, r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000294 	.word	0x20000294
 80030c4:	20000cec 	.word	0x20000cec
 80030c8:	20000298 	.word	0x20000298

080030cc <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	460b      	mov	r3, r1
 80030d8:	80bb      	strh	r3, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <BSP_LCD_DrawVLine+0x78>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a18      	ldr	r2, [pc, #96]	; (8003148 <BSP_LCD_DrawVLine+0x7c>)
 80030e8:	2134      	movs	r1, #52	; 0x34
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	335c      	adds	r3, #92	; 0x5c
 80030f2:	681c      	ldr	r4, [r3, #0]
 80030f4:	f7ff fd72 	bl	8002bdc <BSP_LCD_GetXSize>
 80030f8:	4602      	mov	r2, r0
 80030fa:	88bb      	ldrh	r3, [r7, #4]
 80030fc:	fb03 f202 	mul.w	r2, r3, r2
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4423      	add	r3, r4
 8003108:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <BSP_LCD_DrawVLine+0x78>)
 800310c:	681c      	ldr	r4, [r3, #0]
 800310e:	68fd      	ldr	r5, [r7, #12]
 8003110:	887e      	ldrh	r6, [r7, #2]
 8003112:	f7ff fd63 	bl	8002bdc <BSP_LCD_GetXSize>
 8003116:	4603      	mov	r3, r0
 8003118:	1e59      	subs	r1, r3, #1
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <BSP_LCD_DrawVLine+0x78>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	480b      	ldr	r0, [pc, #44]	; (800314c <BSP_LCD_DrawVLine+0x80>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4403      	add	r3, r0
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	9100      	str	r1, [sp, #0]
 8003130:	4633      	mov	r3, r6
 8003132:	2201      	movs	r2, #1
 8003134:	4629      	mov	r1, r5
 8003136:	4620      	mov	r0, r4
 8003138:	f000 fa5c 	bl	80035f4 <FillBuffer>
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003144:	20000294 	.word	0x20000294
 8003148:	20000cec 	.word	0x20000cec
 800314c:	20000298 	.word	0x20000298

08003150 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4623      	mov	r3, r4
 8003160:	80fb      	strh	r3, [r7, #6]
 8003162:	4603      	mov	r3, r0
 8003164:	80bb      	strh	r3, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	807b      	strh	r3, [r7, #2]
 800316a:	4613      	mov	r3, r2
 800316c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	88b9      	ldrh	r1, [r7, #4]
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff6b 	bl	8003050 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800317a:	88ba      	ldrh	r2, [r7, #4]
 800317c:	883b      	ldrh	r3, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	b299      	uxth	r1, r3
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff62 	bl	8003050 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800318c:	883a      	ldrh	r2, [r7, #0]
 800318e:	88b9      	ldrh	r1, [r7, #4]
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff9a 	bl	80030cc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003198:	88fa      	ldrh	r2, [r7, #6]
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	4413      	add	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	883a      	ldrh	r2, [r7, #0]
 80031a2:	88b9      	ldrh	r1, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff91 	bl	80030cc <BSP_LCD_DrawVLine>
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
	...

080031b4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	4604      	mov	r4, r0
 80031be:	4608      	mov	r0, r1
 80031c0:	4611      	mov	r1, r2
 80031c2:	461a      	mov	r2, r3
 80031c4:	4623      	mov	r3, r4
 80031c6:	80fb      	strh	r3, [r7, #6]
 80031c8:	4603      	mov	r3, r0
 80031ca:	80bb      	strh	r3, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <BSP_LCD_FillRect+0xa8>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4920      	ldr	r1, [pc, #128]	; (8003260 <BSP_LCD_FillRect+0xac>)
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fdd4 	bl	8002d98 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <BSP_LCD_FillRect+0xa8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <BSP_LCD_FillRect+0xb0>)
 80031f6:	2134      	movs	r1, #52	; 0x34
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	335c      	adds	r3, #92	; 0x5c
 8003200:	681c      	ldr	r4, [r3, #0]
 8003202:	f7ff fceb 	bl	8002bdc <BSP_LCD_GetXSize>
 8003206:	4602      	mov	r2, r0
 8003208:	88bb      	ldrh	r3, [r7, #4]
 800320a:	fb03 f202 	mul.w	r2, r3, r2
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4423      	add	r3, r4
 8003216:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <BSP_LCD_FillRect+0xa8>)
 800321a:	681c      	ldr	r4, [r3, #0]
 800321c:	68fd      	ldr	r5, [r7, #12]
 800321e:	887e      	ldrh	r6, [r7, #2]
 8003220:	f8b7 8000 	ldrh.w	r8, [r7]
 8003224:	f7ff fcda 	bl	8002bdc <BSP_LCD_GetXSize>
 8003228:	4602      	mov	r2, r0
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	1ad1      	subs	r1, r2, r3
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <BSP_LCD_FillRect+0xa8>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	480b      	ldr	r0, [pc, #44]	; (8003260 <BSP_LCD_FillRect+0xac>)
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4403      	add	r3, r0
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	9100      	str	r1, [sp, #0]
 8003244:	4643      	mov	r3, r8
 8003246:	4632      	mov	r2, r6
 8003248:	4629      	mov	r1, r5
 800324a:	4620      	mov	r0, r4
 800324c:	f000 f9d2 	bl	80035f4 <FillBuffer>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800325a:	bf00      	nop
 800325c:	20000294 	.word	0x20000294
 8003260:	20000298 	.word	0x20000298
 8003264:	20000cec 	.word	0x20000cec

08003268 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <BSP_LCD_DisplayOn+0x1c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003276:	4b03      	ldr	r3, [pc, #12]	; (8003284 <BSP_LCD_DisplayOn+0x1c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4798      	blx	r3
  }
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000d94 	.word	0x20000d94

08003288 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	4b61      	ldr	r3, [pc, #388]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a60      	ldr	r2, [pc, #384]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a59      	ldr	r2, [pc, #356]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	4b53      	ldr	r3, [pc, #332]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a52      	ldr	r2, [pc, #328]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b50      	ldr	r3, [pc, #320]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a4b      	ldr	r2, [pc, #300]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b49      	ldr	r3, [pc, #292]	; (8003418 <BSP_LCD_MspInit+0x190>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	4b45      	ldr	r3, [pc, #276]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a44      	ldr	r2, [pc, #272]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a3d      	ldr	r2, [pc, #244]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003324:	f043 0308 	orr.w	r3, r3, #8
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <BSP_LCD_MspInit+0x190>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <BSP_LCD_MspInit+0x190>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a36      	ldr	r2, [pc, #216]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003340:	f043 0320 	orr.w	r3, r3, #32
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <BSP_LCD_MspInit+0x190>)
 800335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <BSP_LCD_MspInit+0x190>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800336e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800337c:	2302      	movs	r3, #2
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003380:	230e      	movs	r3, #14
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003388:	4619      	mov	r1, r3
 800338a:	4824      	ldr	r0, [pc, #144]	; (800341c <BSP_LCD_MspInit+0x194>)
 800338c:	f002 fd06 	bl	8005d9c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003390:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339a:	4619      	mov	r1, r3
 800339c:	4820      	ldr	r0, [pc, #128]	; (8003420 <BSP_LCD_MspInit+0x198>)
 800339e:	f002 fcfd 	bl	8005d9c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80033a2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	4619      	mov	r1, r3
 80033ae:	481d      	ldr	r0, [pc, #116]	; (8003424 <BSP_LCD_MspInit+0x19c>)
 80033b0:	f002 fcf4 	bl	8005d9c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80033b4:	2348      	movs	r3, #72	; 0x48
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80033b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033bc:	4619      	mov	r1, r3
 80033be:	481a      	ldr	r0, [pc, #104]	; (8003428 <BSP_LCD_MspInit+0x1a0>)
 80033c0:	f002 fcec 	bl	8005d9c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80033c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80033ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ce:	4619      	mov	r1, r3
 80033d0:	4816      	ldr	r0, [pc, #88]	; (800342c <BSP_LCD_MspInit+0x1a4>)
 80033d2:	f002 fce3 	bl	8005d9c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80033d6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e0:	4619      	mov	r1, r3
 80033e2:	4813      	ldr	r0, [pc, #76]	; (8003430 <BSP_LCD_MspInit+0x1a8>)
 80033e4:	f002 fcda 	bl	8005d9c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80033e8:	2303      	movs	r3, #3
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80033ec:	2309      	movs	r3, #9
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80033f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f4:	4619      	mov	r1, r3
 80033f6:	480a      	ldr	r0, [pc, #40]	; (8003420 <BSP_LCD_MspInit+0x198>)
 80033f8:	f002 fcd0 	bl	8005d9c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80033fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003406:	4619      	mov	r1, r3
 8003408:	4809      	ldr	r0, [pc, #36]	; (8003430 <BSP_LCD_MspInit+0x1a8>)
 800340a:	f002 fcc7 	bl	8005d9c <HAL_GPIO_Init>
}
 800340e:	bf00      	nop
 8003410:	3738      	adds	r7, #56	; 0x38
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800

08003434 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	603a      	str	r2, [r7, #0]
 800343e:	80fb      	strh	r3, [r7, #6]
 8003440:	460b      	mov	r3, r1
 8003442:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <BSP_LCD_DrawPixel+0x44>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <BSP_LCD_DrawPixel+0x48>)
 800344a:	2134      	movs	r1, #52	; 0x34
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	335c      	adds	r3, #92	; 0x5c
 8003454:	681c      	ldr	r4, [r3, #0]
 8003456:	88bd      	ldrh	r5, [r7, #4]
 8003458:	f7ff fbc0 	bl	8002bdc <BSP_LCD_GetXSize>
 800345c:	4603      	mov	r3, r0
 800345e:	fb03 f205 	mul.w	r2, r3, r5
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4423      	add	r3, r4
 800346a:	461a      	mov	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}
 8003478:	20000294 	.word	0x20000294
 800347c:	20000cec 	.word	0x20000cec

08003480 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	603a      	str	r2, [r7, #0]
 800348a:	80fb      	strh	r3, [r7, #6]
 800348c:	460b      	mov	r3, r1
 800348e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <DrawChar+0x16c>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4953      	ldr	r1, [pc, #332]	; (80035f0 <DrawChar+0x170>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3308      	adds	r3, #8
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	88db      	ldrh	r3, [r3, #6]
 80034b2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <DrawChar+0x16c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	494d      	ldr	r1, [pc, #308]	; (80035f0 <DrawChar+0x170>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3308      	adds	r3, #8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80034cc:	8a3b      	ldrh	r3, [r7, #16]
 80034ce:	3307      	adds	r3, #7
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da00      	bge.n	80034d6 <DrawChar+0x56>
 80034d4:	3307      	adds	r3, #7
 80034d6:	10db      	asrs	r3, r3, #3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	8a3b      	ldrh	r3, [r7, #16]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e076      	b.n	80035da <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80034ec:	8a3b      	ldrh	r3, [r7, #16]
 80034ee:	3307      	adds	r3, #7
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da00      	bge.n	80034f6 <DrawChar+0x76>
 80034f4:	3307      	adds	r3, #7
 80034f6:	10db      	asrs	r3, r3, #3
 80034f8:	461a      	mov	r2, r3
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fb03 f302 	mul.w	r3, r3, r2
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	4413      	add	r3, r2
 8003504:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003506:	8a3b      	ldrh	r3, [r7, #16]
 8003508:	3307      	adds	r3, #7
 800350a:	2b00      	cmp	r3, #0
 800350c:	da00      	bge.n	8003510 <DrawChar+0x90>
 800350e:	3307      	adds	r3, #7
 8003510:	10db      	asrs	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <DrawChar+0x9c>
 8003516:	2b02      	cmp	r3, #2
 8003518:	d004      	beq.n	8003524 <DrawChar+0xa4>
 800351a:	e00c      	b.n	8003536 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
      break;
 8003522:	e016      	b.n	8003552 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	3201      	adds	r2, #1
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
      break;
 8003534:	e00d      	b.n	8003552 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	041a      	lsls	r2, r3, #16
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3301      	adds	r3, #1
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	4313      	orrs	r3, r2
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	3202      	adds	r2, #2
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
      break;
 8003550:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e036      	b.n	80035c6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003558:	8a3a      	ldrh	r2, [r7, #16]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	1ad2      	subs	r2, r2, r3
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	4413      	add	r3, r2
 8003562:	3b01      	subs	r3, #1
 8003564:	2201      	movs	r2, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	461a      	mov	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	b29a      	uxth	r2, r3
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	4413      	add	r3, r2
 800357c:	b298      	uxth	r0, r3
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <DrawChar+0x16c>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <DrawChar+0x170>)
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	88bb      	ldrh	r3, [r7, #4]
 8003592:	4619      	mov	r1, r3
 8003594:	f7ff ff4e 	bl	8003434 <BSP_LCD_DrawPixel>
 8003598:	e012      	b.n	80035c0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	b29a      	uxth	r2, r3
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4413      	add	r3, r2
 80035a2:	b298      	uxth	r0, r3
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <DrawChar+0x16c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <DrawChar+0x170>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	88bb      	ldrh	r3, [r7, #4]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff ff3a 	bl	8003434 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	8a3b      	ldrh	r3, [r7, #16]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3c4      	bcc.n	8003558 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80035ce:	88bb      	ldrh	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	8a7b      	ldrh	r3, [r7, #18]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d384      	bcc.n	80034ec <DrawChar+0x6c>
  }
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000294 	.word	0x20000294
 80035f0:	20000298 	.word	0x20000298

080035f4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <FillBuffer+0x68>)
 8003604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003608:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <FillBuffer+0x68>)
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003610:	4a12      	ldr	r2, [pc, #72]	; (800365c <FillBuffer+0x68>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <FillBuffer+0x68>)
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <FillBuffer+0x6c>)
 800361a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800361c:	480f      	ldr	r0, [pc, #60]	; (800365c <FillBuffer+0x68>)
 800361e:	f001 fd1b 	bl	8005058 <HAL_DMA2D_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d115      	bne.n	8003654 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <FillBuffer+0x68>)
 800362c:	f001 ff82 	bl	8005534 <HAL_DMA2D_ConfigLayer>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10e      	bne.n	8003654 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69f9      	ldr	r1, [r7, #28]
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <FillBuffer+0x68>)
 8003642:	f001 fd52 	bl	80050ea <HAL_DMA2D_Start>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800364c:	210a      	movs	r1, #10
 800364e:	4803      	ldr	r0, [pc, #12]	; (800365c <FillBuffer+0x68>)
 8003650:	f001 fd76 	bl	8005140 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000224 	.word	0x20000224
 8003660:	4002b000 	.word	0x4002b000

08003664 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <BSP_SDRAM_Init+0xac>)
 800366a:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <BSP_SDRAM_Init+0xb0>)
 800366c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800366e:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 8003670:	2202      	movs	r2, #2
 8003672:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 8003676:	2207      	movs	r2, #7
 8003678:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 800367c:	2204      	movs	r2, #4
 800367e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 8003682:	2207      	movs	r2, #7
 8003684:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 8003688:	2202      	movs	r2, #2
 800368a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 800368e:	2202      	movs	r2, #2
 8003690:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003692:	4b21      	ldr	r3, [pc, #132]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 8003694:	2202      	movs	r2, #2
 8003696:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <BSP_SDRAM_Init+0xac>)
 800369a:	2201      	movs	r2, #1
 800369c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036a6:	2204      	movs	r2, #4
 80036a8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036ac:	2210      	movs	r2, #16
 80036ae:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80036bc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ca:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80036da:	2100      	movs	r1, #0
 80036dc:	480c      	ldr	r0, [pc, #48]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036de:	f000 f87f 	bl	80037e0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80036e2:	490d      	ldr	r1, [pc, #52]	; (8003718 <BSP_SDRAM_Init+0xb4>)
 80036e4:	480a      	ldr	r0, [pc, #40]	; (8003710 <BSP_SDRAM_Init+0xac>)
 80036e6:	f005 fddb 	bl	80092a0 <HAL_SDRAM_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <BSP_SDRAM_Init+0xb8>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	e002      	b.n	80036fe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <BSP_SDRAM_Init+0xb8>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036fe:	f240 506a 	movw	r0, #1386	; 0x56a
 8003702:	f000 f80d 	bl	8003720 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <BSP_SDRAM_Init+0xb8>)
 8003708:	781b      	ldrb	r3, [r3, #0]
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200002b0 	.word	0x200002b0
 8003714:	a0000140 	.word	0xa0000140
 8003718:	200002e4 	.word	0x200002e4
 800371c:	20000084 	.word	0x20000084

08003720 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003734:	2208      	movs	r2, #8
 8003736:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373a:	2201      	movs	r2, #1
 800373c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003748:	4923      	ldr	r1, [pc, #140]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374a:	4824      	ldr	r0, [pc, #144]	; (80037dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800374c:	f005 fddc 	bl	8009308 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003750:	2001      	movs	r0, #1
 8003752:	f000 f993 	bl	8003a7c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003758:	2202      	movs	r2, #2
 800375a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375e:	2208      	movs	r2, #8
 8003760:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003764:	2201      	movs	r2, #1
 8003766:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800376e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003772:	4919      	ldr	r1, [pc, #100]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003774:	4819      	ldr	r0, [pc, #100]	; (80037dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003776:	f005 fdc7 	bl	8009308 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377c:	2203      	movs	r2, #3
 800377e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003782:	2208      	movs	r2, #8
 8003784:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003788:	2204      	movs	r2, #4
 800378a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003796:	4910      	ldr	r1, [pc, #64]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003798:	4810      	ldr	r0, [pc, #64]	; (80037dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800379a:	f005 fdb5 	bl	8009308 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800379e:	f44f 730c 	mov.w	r3, #560	; 0x230
 80037a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a6:	2204      	movs	r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ac:	2208      	movs	r2, #8
 80037ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c0:	4905      	ldr	r1, [pc, #20]	; (80037d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c2:	4806      	ldr	r0, [pc, #24]	; (80037dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037c4:	f005 fda0 	bl	8009308 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4804      	ldr	r0, [pc, #16]	; (80037dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037cc:	f005 fdc7 	bl	800935e <HAL_SDRAM_ProgramRefreshRate>
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000300 	.word	0x20000300
 80037dc:	200002b0 	.word	0x200002b0

080037e0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b090      	sub	sp, #64	; 0x40
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ec 	beq.w	80039ca <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f6:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6393      	str	r3, [r2, #56]	; 0x38
 8003802:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a61      	ldr	r2, [pc, #388]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a5a      	ldr	r2, [pc, #360]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b58      	ldr	r3, [pc, #352]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a53      	ldr	r2, [pc, #332]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003888:	f043 0310 	orr.w	r3, r3, #16
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80038c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <BSP_SDRAM_MspInit+0x1f4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80038d6:	2302      	movs	r3, #2
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80038de:	230c      	movs	r3, #12
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80038e2:	2360      	movs	r3, #96	; 0x60
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80038e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ea:	4619      	mov	r1, r3
 80038ec:	483a      	ldr	r0, [pc, #232]	; (80039d8 <BSP_SDRAM_MspInit+0x1f8>)
 80038ee:	f002 fa55 	bl	8005d9c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80038f2:	2301      	movs	r3, #1
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80038f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	4837      	ldr	r0, [pc, #220]	; (80039dc <BSP_SDRAM_MspInit+0x1fc>)
 80038fe:	f002 fa4d 	bl	8005d9c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003902:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390c:	4619      	mov	r1, r3
 800390e:	4834      	ldr	r0, [pc, #208]	; (80039e0 <BSP_SDRAM_MspInit+0x200>)
 8003910:	f002 fa44 	bl	8005d9c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003914:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800391a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391e:	4619      	mov	r1, r3
 8003920:	4830      	ldr	r0, [pc, #192]	; (80039e4 <BSP_SDRAM_MspInit+0x204>)
 8003922:	f002 fa3b 	bl	8005d9c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003926:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800392c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003930:	4619      	mov	r1, r3
 8003932:	482d      	ldr	r0, [pc, #180]	; (80039e8 <BSP_SDRAM_MspInit+0x208>)
 8003934:	f002 fa32 	bl	8005d9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003938:	f248 1333 	movw	r3, #33075	; 0x8133
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800393e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003942:	4619      	mov	r1, r3
 8003944:	4829      	ldr	r0, [pc, #164]	; (80039ec <BSP_SDRAM_MspInit+0x20c>)
 8003946:	f002 fa29 	bl	8005d9c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 800394c:	2200      	movs	r2, #0
 800394e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003950:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003956:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003964:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800396c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003970:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003974:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800397c:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 800397e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003982:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003986:	2200      	movs	r2, #0
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 800398c:	2203      	movs	r2, #3
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003992:	2200      	movs	r2, #0
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <BSP_SDRAM_MspInit+0x214>)
 80039a0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
 80039a8:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80039ae:	4810      	ldr	r0, [pc, #64]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 80039b0:	f000 ffa0 	bl	80048f4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80039b4:	480e      	ldr	r0, [pc, #56]	; (80039f0 <BSP_SDRAM_MspInit+0x210>)
 80039b6:	f000 feef 	bl	8004798 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	210f      	movs	r1, #15
 80039be:	2038      	movs	r0, #56	; 0x38
 80039c0:	f000 fea4 	bl	800470c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80039c4:	2038      	movs	r0, #56	; 0x38
 80039c6:	f000 febd 	bl	8004744 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80039ca:	bf00      	nop
 80039cc:	3740      	adds	r7, #64	; 0x40
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40021400 	.word	0x40021400
 80039ec:	40021800 	.word	0x40021800
 80039f0:	20000310 	.word	0x20000310
 80039f4:	40026410 	.word	0x40026410

080039f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_Init+0x40>)
 8003a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <HAL_Init+0x40>)
 8003a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_Init+0x40>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_Init+0x40>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a20:	2003      	movs	r0, #3
 8003a22:	f000 fe68 	bl	80046f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a26:	200f      	movs	r0, #15
 8003a28:	f7fe fb3c 	bl	80020a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a2c:	f7fd feb4 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023c00 	.word	0x40023c00

08003a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_IncTick+0x20>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x24>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <HAL_IncTick+0x24>)
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	2000008c 	.word	0x2000008c
 8003a60:	20000d98 	.word	0x20000d98

08003a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return uwTick;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_GetTick+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000d98 	.word	0x20000d98

08003a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7ff ffee 	bl	8003a64 <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d005      	beq.n	8003aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_Delay+0x44>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aa2:	bf00      	nop
 8003aa4:	f7ff ffde 	bl	8003a64 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d8f7      	bhi.n	8003aa4 <HAL_Delay+0x28>
  {
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000008c 	.word	0x2000008c

08003ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e033      	b.n	8003b42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd fe80 	bl	80017e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b0a:	f023 0302 	bic.w	r3, r3, #2
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fbb8 	bl	800428c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
 8003b32:	e001      	b.n	8003b38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d049      	beq.n	8003c20 <HAL_ADC_IRQHandler+0xd6>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d046      	beq.n	8003c20 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d105      	bne.n	8003baa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d12b      	bne.n	8003c10 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d127      	bne.n	8003c10 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d119      	bne.n	8003c10 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0220 	bic.w	r2, r2, #32
 8003bea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fc fd63 	bl	80006dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0212 	mvn.w	r2, #18
 8003c1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d057      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x1b8>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d054      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d139      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d12b      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d124      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d11d      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d119      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ccc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fc48 	bl	8004588 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 020c 	mvn.w	r2, #12
 8003d00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d017      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x21a>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10d      	bne.n	8003d64 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f953 	bl	8004000 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0201 	mvn.w	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	bf0c      	ite	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	2300      	movne	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x27a>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d012      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0220 	mvn.w	r2, #32
 8003db2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f92d 	bl	8004014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f06f 0220 	mvn.w	r2, #32
 8003dc2:	601a      	str	r2, [r3, #0]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_Start_DMA+0x1e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0e9      	b.n	8003fbe <HAL_ADC_Start_DMA+0x1f2>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d018      	beq.n	8003e32 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e10:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <HAL_ADC_Start_DMA+0x1fc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6d      	ldr	r2, [pc, #436]	; (8003fcc <HAL_ADC_Start_DMA+0x200>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0c9a      	lsrs	r2, r3, #18
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e24:	e002      	b.n	8003e2c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f9      	bne.n	8003e26 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e40:	d107      	bne.n	8003e52 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e50:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 80a1 	bne.w	8003fa4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d106      	bne.n	8003eb0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f023 0206 	bic.w	r2, r3, #6
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
 8003eae:	e002      	b.n	8003eb6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ebe:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <HAL_ADC_Start_DMA+0x204>)
 8003ec0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	4a43      	ldr	r2, [pc, #268]	; (8003fd4 <HAL_ADC_Start_DMA+0x208>)
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4a42      	ldr	r2, [pc, #264]	; (8003fd8 <HAL_ADC_Start_DMA+0x20c>)
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	4a41      	ldr	r2, [pc, #260]	; (8003fdc <HAL_ADC_Start_DMA+0x210>)
 8003ed8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ef2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	334c      	adds	r3, #76	; 0x4c
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f000 fd4c 	bl	80049b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d12a      	bne.n	8003f7a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <HAL_ADC_Start_DMA+0x214>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d015      	beq.n	8003f5a <HAL_ADC_Start_DMA+0x18e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <HAL_ADC_Start_DMA+0x218>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d105      	bne.n	8003f44 <HAL_ADC_Start_DMA+0x178>
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <HAL_ADC_Start_DMA+0x204>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <HAL_ADC_Start_DMA+0x21c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d136      	bne.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_ADC_Start_DMA+0x204>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d130      	bne.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d129      	bne.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e020      	b.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_ADC_Start_DMA+0x214>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d11b      	bne.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d114      	bne.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	e00b      	b.n	8003fbc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0210 	orr.w	r2, r3, #16
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000034 	.word	0x20000034
 8003fcc:	431bde83 	.word	0x431bde83
 8003fd0:	40012300 	.word	0x40012300
 8003fd4:	08004485 	.word	0x08004485
 8003fd8:	0800453f 	.word	0x0800453f
 8003fdc:	0800455b 	.word	0x0800455b
 8003fe0:	40012000 	.word	0x40012000
 8003fe4:	40012100 	.word	0x40012100
 8003fe8:	40012200 	.word	0x40012200

08003fec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e113      	b.n	800426c <HAL_ADC_ConfigChannel+0x244>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b09      	cmp	r3, #9
 8004052:	d925      	bls.n	80040a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	3b1e      	subs	r3, #30
 800406a:	2207      	movs	r2, #7
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43da      	mvns	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	400a      	ands	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68d9      	ldr	r1, [r3, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	4618      	mov	r0, r3
 800408c:	4603      	mov	r3, r0
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4403      	add	r3, r0
 8004092:	3b1e      	subs	r3, #30
 8004094:	409a      	lsls	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e022      	b.n	80040e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	2207      	movs	r2, #7
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	400a      	ands	r2, r1
 80040c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4618      	mov	r0, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4403      	add	r3, r0
 80040dc:	409a      	lsls	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d824      	bhi.n	8004138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	3b05      	subs	r3, #5
 8004100:	221f      	movs	r2, #31
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	400a      	ands	r2, r1
 800410e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	4618      	mov	r0, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	3b05      	subs	r3, #5
 800412a:	fa00 f203 	lsl.w	r2, r0, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	635a      	str	r2, [r3, #52]	; 0x34
 8004136:	e04c      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d824      	bhi.n	800418a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	3b23      	subs	r3, #35	; 0x23
 8004152:	221f      	movs	r2, #31
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43da      	mvns	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	400a      	ands	r2, r1
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b23      	subs	r3, #35	; 0x23
 800417c:	fa00 f203 	lsl.w	r2, r0, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
 8004188:	e023      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	3b41      	subs	r3, #65	; 0x41
 800419c:	221f      	movs	r2, #31
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	400a      	ands	r2, r1
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	4618      	mov	r0, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3b41      	subs	r3, #65	; 0x41
 80041c6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_ADC_ConfigChannel+0x250>)
 80041d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a28      	ldr	r2, [pc, #160]	; (800427c <HAL_ADC_ConfigChannel+0x254>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10f      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x1d8>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b12      	cmp	r3, #18
 80041e6:	d10b      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <HAL_ADC_ConfigChannel+0x254>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d12b      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x23a>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_ADC_ConfigChannel+0x258>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <HAL_ADC_ConfigChannel+0x1f4>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b11      	cmp	r3, #17
 800421a:	d122      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a11      	ldr	r2, [pc, #68]	; (8004280 <HAL_ADC_ConfigChannel+0x258>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d111      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_ADC_ConfigChannel+0x25c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <HAL_ADC_ConfigChannel+0x260>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	0c9a      	lsrs	r2, r3, #18
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004254:	e002      	b.n	800425c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3b01      	subs	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f9      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40012300 	.word	0x40012300
 800427c:	40012000 	.word	0x40012000
 8004280:	10000012 	.word	0x10000012
 8004284:	20000034 	.word	0x20000034
 8004288:	431bde83 	.word	0x431bde83

0800428c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004294:	4b79      	ldr	r3, [pc, #484]	; (800447c <ADC_Init+0x1f0>)
 8004296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	4a58      	ldr	r2, [pc, #352]	; (8004480 <ADC_Init+0x1f4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	e00f      	b.n	800438a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0202 	bic.w	r2, r2, #2
 8004398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7e1b      	ldrb	r3, [r3, #24]
 80043a4:	005a      	lsls	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	3b01      	subs	r3, #1
 80043e4:	035a      	lsls	r2, r3, #13
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	e007      	b.n	8004400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	3b01      	subs	r3, #1
 800441c:	051a      	lsls	r2, r3, #20
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004442:	025a      	lsls	r2, r3, #9
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6899      	ldr	r1, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	029a      	lsls	r2, r3, #10
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40012300 	.word	0x40012300
 8004480:	0f000001 	.word	0x0f000001

08004484 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d13c      	bne.n	8004518 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d12b      	bne.n	8004510 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d127      	bne.n	8004510 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d119      	bne.n	8004510 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0220 	bic.w	r2, r2, #32
 80044ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7fc f8e3 	bl	80006dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004516:	e00e      	b.n	8004536 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fd75 	bl	8004014 <HAL_ADC_ErrorCallback>
}
 800452a:	e004      	b.n	8004536 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fd4d 	bl	8003fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fd4a 	bl	8004014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	60d3      	str	r3, [r2, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <__NVIC_GetPriorityGrouping+0x18>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f003 0307 	and.w	r3, r3, #7
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	db0b      	blt.n	800462a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	4907      	ldr	r1, [pc, #28]	; (8004638 <__NVIC_EnableIRQ+0x38>)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2001      	movs	r0, #1
 8004622:	fa00 f202 	lsl.w	r2, r0, r2
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000e100 	.word	0xe000e100

0800463c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db0a      	blt.n	8004666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	490c      	ldr	r1, [pc, #48]	; (8004688 <__NVIC_SetPriority+0x4c>)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	440b      	add	r3, r1
 8004660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004664:	e00a      	b.n	800467c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4908      	ldr	r1, [pc, #32]	; (800468c <__NVIC_SetPriority+0x50>)
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	3b04      	subs	r3, #4
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	440b      	add	r3, r1
 800467a:	761a      	strb	r2, [r3, #24]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000e100 	.word	0xe000e100
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f1c3 0307 	rsb	r3, r3, #7
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	bf28      	it	cs
 80046ae:	2304      	movcs	r3, #4
 80046b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d902      	bls.n	80046c0 <NVIC_EncodePriority+0x30>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3b03      	subs	r3, #3
 80046be:	e000      	b.n	80046c2 <NVIC_EncodePriority+0x32>
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43da      	mvns	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	401a      	ands	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d8:	f04f 31ff 	mov.w	r1, #4294967295
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	43d9      	mvns	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	4313      	orrs	r3, r2
         );
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff4c 	bl	800459c <__NVIC_SetPriorityGrouping>
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800471e:	f7ff ff61 	bl	80045e4 <__NVIC_GetPriorityGrouping>
 8004722:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	6978      	ldr	r0, [r7, #20]
 800472a:	f7ff ffb1 	bl	8004690 <NVIC_EncodePriority>
 800472e:	4602      	mov	r2, r0
 8004730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff ff80 	bl	800463c <__NVIC_SetPriority>
}
 800473c:	bf00      	nop
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff54 	bl	8004600 <__NVIC_EnableIRQ>
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e00e      	b.n	8004790 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	795b      	ldrb	r3, [r3, #5]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd f8ca 	bl	800191c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff f95e 	bl	8003a64 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e099      	b.n	80048e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d4:	e00f      	b.n	80047f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d6:	f7ff f945 	bl	8003a64 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d908      	bls.n	80047f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e078      	b.n	80048e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e8      	bne.n	80047d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <HAL_DMA_Init+0x158>)
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b04      	cmp	r3, #4
 800484e:	d107      	bne.n	8004860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4313      	orrs	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0307 	bic.w	r3, r3, #7
 8004876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b04      	cmp	r3, #4
 8004888:	d117      	bne.n	80048ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fb5f 	bl	8004f60 <DMA_CheckFifoParam>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048b6:	2301      	movs	r3, #1
 80048b8:	e016      	b.n	80048e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb16 	bl	8004ef4 <DMA_CalcBaseAndBitshift>
 80048c8:	4603      	mov	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	223f      	movs	r2, #63	; 0x3f
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	f010803f 	.word	0xf010803f

080048f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e050      	b.n	80049a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d101      	bne.n	8004916 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	e048      	b.n	80049a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2221      	movs	r2, #33	; 0x21
 8004954:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 facc 	bl	8004ef4 <DMA_CalcBaseAndBitshift>
 800495c:	4603      	mov	r3, r0
 800495e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	223f      	movs	r2, #63	; 0x3f
 800498a:	409a      	lsls	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA_Start_IT+0x26>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e040      	b.n	8004a58 <HAL_DMA_Start_IT+0xa8>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d12f      	bne.n	8004a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fa4a 	bl	8004e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	223f      	movs	r2, #63	; 0x3f
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0216 	orr.w	r2, r2, #22
 8004a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e005      	b.n	8004a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a6e:	f7fe fff9 	bl	8003a64 <HAL_GetTick>
 8004a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d008      	beq.n	8004a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2280      	movs	r2, #128	; 0x80
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e052      	b.n	8004b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0216 	bic.w	r2, r2, #22
 8004aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <HAL_DMA_Abort+0x62>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0208 	bic.w	r2, r2, #8
 8004ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae2:	e013      	b.n	8004b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ae4:	f7fe ffbe 	bl	8003a64 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d90c      	bls.n	8004b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2203      	movs	r2, #3
 8004afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e015      	b.n	8004b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e4      	bne.n	8004ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	223f      	movs	r2, #63	; 0x3f
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00c      	b.n	8004b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2205      	movs	r2, #5
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b90:	4b92      	ldr	r3, [pc, #584]	; (8004ddc <HAL_DMA_IRQHandler+0x258>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a92      	ldr	r2, [pc, #584]	; (8004de0 <HAL_DMA_IRQHandler+0x25c>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	2208      	movs	r2, #8
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	2208      	movs	r2, #8
 8004bde:	409a      	lsls	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f043 0202 	orr.w	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c48:	2204      	movs	r2, #4
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0204 	orr.w	r2, r3, #4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	2210      	movs	r2, #16
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d043      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d03c      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2210      	movs	r2, #16
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d024      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	e01f      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e016      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0208 	bic.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 808e 	beq.w	8004e22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d136      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0216 	bic.w	r2, r2, #22
 8004d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_DMA_IRQHandler+0x1da>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0208 	bic.w	r2, r2, #8
 8004d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	223f      	movs	r2, #63	; 0x3f
 8004d74:	409a      	lsls	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d07d      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
        }
        return;
 8004d9a:	e078      	b.n	8004e8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01c      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d030      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
 8004dc8:	e02b      	b.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d027      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
 8004dda:	e022      	b.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
 8004ddc:	20000034 	.word	0x20000034
 8004de0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0210 	bic.w	r2, r2, #16
 8004e00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d032      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d022      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d307      	bcc.n	8004e6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f2      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x2ca>
 8004e68:	e000      	b.n	8004e6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	e000      	b.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e8e:	bf00      	nop
    }
  }
}
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop

08004e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d108      	bne.n	8004ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ed6:	e007      	b.n	8004ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	3b10      	subs	r3, #16
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <DMA_CalcBaseAndBitshift+0x64>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f0e:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <DMA_CalcBaseAndBitshift+0x68>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d909      	bls.n	8004f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	1d1a      	adds	r2, r3, #4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	659a      	str	r2, [r3, #88]	; 0x58
 8004f34:	e007      	b.n	8004f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f3e:	f023 0303 	bic.w	r3, r3, #3
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	aaaaaaab 	.word	0xaaaaaaab
 8004f5c:	0801bf48 	.word	0x0801bf48

08004f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11f      	bne.n	8004fba <DMA_CheckFifoParam+0x5a>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d856      	bhi.n	800502e <DMA_CheckFifoParam+0xce>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <DMA_CheckFifoParam+0x28>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004fab 	.word	0x08004fab
 8004f90:	08004f99 	.word	0x08004f99
 8004f94:	0800502f 	.word	0x0800502f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d046      	beq.n	8005032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa8:	e043      	b.n	8005032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb2:	d140      	bne.n	8005036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb8:	e03d      	b.n	8005036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc2:	d121      	bne.n	8005008 <DMA_CheckFifoParam+0xa8>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d837      	bhi.n	800503a <DMA_CheckFifoParam+0xda>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <DMA_CheckFifoParam+0x70>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004fe7 	.word	0x08004fe7
 8004fd8:	08004fe1 	.word	0x08004fe1
 8004fdc:	08004ff9 	.word	0x08004ff9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe4:	e030      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d025      	beq.n	800503e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff6:	e022      	b.n	800503e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005000:	d11f      	bne.n	8005042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005006:	e01c      	b.n	8005042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d903      	bls.n	8005016 <DMA_CheckFifoParam+0xb6>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d003      	beq.n	800501c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005014:	e018      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
      break;
 800501a:	e015      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      break;
 800502c:	e00b      	b.n	8005046 <DMA_CheckFifoParam+0xe6>
      break;
 800502e:	bf00      	nop
 8005030:	e00a      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      break;
 8005032:	bf00      	nop
 8005034:	e008      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      break;
 8005036:	bf00      	nop
 8005038:	e006      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      break;
 800503a:	bf00      	nop
 800503c:	e004      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      break;   
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
      break;
 8005046:	bf00      	nop
    }
  } 
  
  return status; 
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop

08005058 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e03b      	b.n	80050e2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc fc6e 	bl	8001960 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a8:	f023 0107 	bic.w	r1, r3, #7
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80050c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68d1      	ldr	r1, [r2, #12]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_DMA2D_Start+0x1c>
 8005102:	2302      	movs	r3, #2
 8005104:	e018      	b.n	8005138 <HAL_DMA2D_Start+0x4e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fa99 	bl	8005658 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d056      	beq.n	800520a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800515c:	f7fe fc82 	bl	8003a64 <HAL_GetTick>
 8005160:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005162:	e04b      	b.n	80051fc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005172:	2b00      	cmp	r3, #0
 8005174:	d023      	beq.n	80051be <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	f043 0202 	orr.w	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	f043 0201 	orr.w	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2221      	movs	r2, #33	; 0x21
 80051a8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0a5      	b.n	800530a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d01a      	beq.n	80051fc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fe fc4d 	bl	8003a64 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <HAL_DMA2D_PollForTransfer+0x9c>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10f      	bne.n	80051fc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2203      	movs	r2, #3
 80051ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e086      	b.n	800530a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0ac      	beq.n	8005164 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d061      	beq.n	80052f0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800522c:	f7fe fc1a 	bl	8003a64 <HAL_GetTick>
 8005230:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005232:	e056      	b.n	80052e2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02e      	beq.n	80052a4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	f043 0202 	orr.w	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	f043 0201 	orr.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2229      	movs	r2, #41	; 0x29
 800528e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e032      	b.n	800530a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d01a      	beq.n	80052e2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe fbda 	bl	8003a64 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <HAL_DMA2D_PollForTransfer+0x182>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2203      	movs	r2, #3
 80052d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e013      	b.n	800530a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0a1      	beq.n	8005234 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2212      	movs	r2, #18
 80052f6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d026      	beq.n	8005382 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d021      	beq.n	8005382 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800534c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2201      	movs	r2, #1
 8005360:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d026      	beq.n	80053da <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2220      	movs	r2, #32
 80053ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	f043 0202 	orr.w	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d026      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d021      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2208      	movs	r2, #8
 8005404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	f043 0204 	orr.w	r2, r3, #4
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d013      	beq.n	8005464 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00e      	beq.n	8005464 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005454:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2204      	movs	r2, #4
 800545c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f853 	bl	800550a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d024      	beq.n	80054b8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01f      	beq.n	80054b8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005486:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2202      	movs	r2, #2
 800548e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01f      	beq.n	8005502 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01a      	beq.n	8005502 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054da:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2210      	movs	r2, #16
 80054e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f80e 	bl	800551e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_DMA2D_ConfigLayer+0x20>
 8005550:	2302      	movs	r3, #2
 8005552:	e079      	b.n	8005648 <HAL_DMA2D_ConfigLayer+0x114>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	3318      	adds	r3, #24
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800557e:	4b35      	ldr	r3, [pc, #212]	; (8005654 <HAL_DMA2D_ConfigLayer+0x120>)
 8005580:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b0a      	cmp	r3, #10
 8005588:	d003      	beq.n	8005592 <HAL_DMA2D_ConfigLayer+0x5e>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d107      	bne.n	80055a2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e005      	b.n	80055ae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d120      	bne.n	80055f6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	43db      	mvns	r3, r3
 80055be:	ea02 0103 	and.w	r1, r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b0a      	cmp	r3, #10
 80055dc:	d003      	beq.n	80055e6 <HAL_DMA2D_ConfigLayer+0xb2>
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d127      	bne.n	8005636 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
 80055f4:	e01f      	b.n	8005636 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	43db      	mvns	r3, r3
 8005600:	ea02 0103 	and.w	r1, r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b0a      	cmp	r3, #10
 800561e:	d003      	beq.n	8005628 <HAL_DMA2D_ConfigLayer+0xf4>
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b09      	cmp	r3, #9
 8005626:	d106      	bne.n	8005636 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005634:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	ff03000f 	.word	0xff03000f

08005658 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005658:	b480      	push	{r7}
 800565a:	b08b      	sub	sp, #44	; 0x2c
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	041a      	lsls	r2, r3, #16
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	431a      	orrs	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005690:	d174      	bne.n	800577c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005698:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056a8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	431a      	orrs	r2, r3
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
 80056c8:	e053      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d106      	bne.n	80056e0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	e048      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d111      	bne.n	800570c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	0cdb      	lsrs	r3, r3, #19
 80056ec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	0a9b      	lsrs	r3, r3, #10
 80056f2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	08db      	lsrs	r3, r3, #3
 80056f8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	02db      	lsls	r3, r3, #11
 8005702:	4313      	orrs	r3, r2
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	e032      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d117      	bne.n	8005744 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	0fdb      	lsrs	r3, r3, #31
 8005718:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	0cdb      	lsrs	r3, r3, #19
 800571e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	0adb      	lsrs	r3, r3, #11
 8005724:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	431a      	orrs	r2, r3
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	03db      	lsls	r3, r3, #15
 800573a:	4313      	orrs	r3, r2
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	e016      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	0f1b      	lsrs	r3, r3, #28
 8005748:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	0d1b      	lsrs	r3, r3, #20
 800574e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	0b1b      	lsrs	r3, r3, #12
 8005754:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	011a      	lsls	r2, r3, #4
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	431a      	orrs	r2, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	031b      	lsls	r3, r3, #12
 800576a:	4313      	orrs	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800577a:	e003      	b.n	8005784 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	60da      	str	r2, [r3, #12]
}
 8005784:	bf00      	nop
 8005786:	372c      	adds	r7, #44	; 0x2c
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057a2:	4b23      	ldr	r3, [pc, #140]	; (8005830 <HAL_FLASH_Program+0xa0>)
 80057a4:	7e1b      	ldrb	r3, [r3, #24]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_FLASH_Program+0x1e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e03b      	b.n	8005826 <HAL_FLASH_Program+0x96>
 80057ae:	4b20      	ldr	r3, [pc, #128]	; (8005830 <HAL_FLASH_Program+0xa0>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057b8:	f000 f870 	bl	800589c <FLASH_WaitForLastOperation>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d12b      	bne.n	800581e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d105      	bne.n	80057d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80057cc:	783b      	ldrb	r3, [r7, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	68b8      	ldr	r0, [r7, #8]
 80057d2:	f000 f91b 	bl	8005a0c <FLASH_Program_Byte>
 80057d6:	e016      	b.n	8005806 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80057de:	883b      	ldrh	r3, [r7, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	f000 f8ee 	bl	80059c4 <FLASH_Program_HalfWord>
 80057e8:	e00d      	b.n	8005806 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d105      	bne.n	80057fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	4619      	mov	r1, r3
 80057f4:	68b8      	ldr	r0, [r7, #8]
 80057f6:	f000 f8c3 	bl	8005980 <FLASH_Program_Word>
 80057fa:	e004      	b.n	8005806 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80057fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005800:	68b8      	ldr	r0, [r7, #8]
 8005802:	f000 f88b 	bl	800591c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005806:	f24c 3050 	movw	r0, #50000	; 0xc350
 800580a:	f000 f847 	bl	800589c <FLASH_WaitForLastOperation>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005812:	4b08      	ldr	r3, [pc, #32]	; (8005834 <HAL_FLASH_Program+0xa4>)
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <HAL_FLASH_Program+0xa4>)
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <HAL_FLASH_Program+0xa0>)
 8005820:	2200      	movs	r2, #0
 8005822:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000d9c 	.word	0x20000d9c
 8005834:	40023c00 	.word	0x40023c00

08005838 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <HAL_FLASH_Unlock+0x38>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	da0b      	bge.n	8005862 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <HAL_FLASH_Unlock+0x38>)
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <HAL_FLASH_Unlock+0x3c>)
 800584e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <HAL_FLASH_Unlock+0x38>)
 8005852:	4a09      	ldr	r2, [pc, #36]	; (8005878 <HAL_FLASH_Unlock+0x40>)
 8005854:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_FLASH_Unlock+0x38>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	da01      	bge.n	8005862 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005862:	79fb      	ldrb	r3, [r7, #7]
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40023c00 	.word	0x40023c00
 8005874:	45670123 	.word	0x45670123
 8005878:	cdef89ab 	.word	0xcdef89ab

0800587c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_FLASH_Lock+0x1c>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <HAL_FLASH_Lock+0x1c>)
 8005886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800588a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40023c00 	.word	0x40023c00

0800589c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058a8:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <FLASH_WaitForLastOperation+0x78>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80058ae:	f7fe f8d9 	bl	8003a64 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80058b4:	e010      	b.n	80058d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d00c      	beq.n	80058d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <FLASH_WaitForLastOperation+0x38>
 80058c4:	f7fe f8ce 	bl	8003a64 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d201      	bcs.n	80058d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e019      	b.n	800590c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <FLASH_WaitForLastOperation+0x7c>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e8      	bne.n	80058b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <FLASH_WaitForLastOperation+0x7c>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <FLASH_WaitForLastOperation+0x7c>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80058f6:	4b08      	ldr	r3, [pc, #32]	; (8005918 <FLASH_WaitForLastOperation+0x7c>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005902:	f000 f8a5 	bl	8005a50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
  
}  
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000d9c 	.word	0x20000d9c
 8005918:	40023c00 	.word	0x40023c00

0800591c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <FLASH_Program_DoubleWord+0x60>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <FLASH_Program_DoubleWord+0x60>)
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <FLASH_Program_DoubleWord+0x60>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	4a10      	ldr	r2, [pc, #64]	; (800597c <FLASH_Program_DoubleWord+0x60>)
 800593a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800593e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <FLASH_Program_DoubleWord+0x60>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	4a0d      	ldr	r2, [pc, #52]	; (800597c <FLASH_Program_DoubleWord+0x60>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005952:	f3bf 8f6f 	isb	sy
}
 8005956:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	000a      	movs	r2, r1
 8005966:	2300      	movs	r3, #0
 8005968:	68f9      	ldr	r1, [r7, #12]
 800596a:	3104      	adds	r1, #4
 800596c:	4613      	mov	r3, r2
 800596e:	600b      	str	r3, [r1, #0]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	40023c00 	.word	0x40023c00

08005980 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <FLASH_Program_Word+0x40>)
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <FLASH_Program_Word+0x40>)
 8005990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005994:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <FLASH_Program_Word+0x40>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <FLASH_Program_Word+0x40>)
 800599c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <FLASH_Program_Word+0x40>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4a06      	ldr	r2, [pc, #24]	; (80059c0 <FLASH_Program_Word+0x40>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	601a      	str	r2, [r3, #0]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40023c00 	.word	0x40023c00

080059c4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <FLASH_Program_HalfWord+0x44>)
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	4a0c      	ldr	r2, [pc, #48]	; (8005a08 <FLASH_Program_HalfWord+0x44>)
 80059d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <FLASH_Program_HalfWord+0x44>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <FLASH_Program_HalfWord+0x44>)
 80059e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <FLASH_Program_HalfWord+0x44>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	4a06      	ldr	r2, [pc, #24]	; (8005a08 <FLASH_Program_HalfWord+0x44>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	887a      	ldrh	r2, [r7, #2]
 80059f8:	801a      	strh	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40023c00 	.word	0x40023c00

08005a0c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <FLASH_Program_Byte+0x40>)
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <FLASH_Program_Byte+0x40>)
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <FLASH_Program_Byte+0x40>)
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <FLASH_Program_Byte+0x40>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005a2c:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <FLASH_Program_Byte+0x40>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	4a06      	ldr	r2, [pc, #24]	; (8005a4c <FLASH_Program_Byte+0x40>)
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	701a      	strb	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023c00 	.word	0x40023c00

08005a50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005a54:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005a60:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f043 0310 	orr.w	r3, r3, #16
 8005a68:	4a2b      	ldr	r2, [pc, #172]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005a6a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005a6c:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005a6e:	2210      	movs	r2, #16
 8005a70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005a72:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f043 0308 	orr.w	r3, r3, #8
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005a88:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005a90:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f043 0304 	orr.w	r3, r3, #4
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005aa6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f043 0302 	orr.w	r3, r3, #2
 8005ac2:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005ac4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005ac6:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005ae2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f043 0320 	orr.w	r3, r3, #32
 8005b00:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <FLASH_SetErrorCode+0xc8>)
 8005b02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <FLASH_SetErrorCode+0xc4>)
 8005b06:	2202      	movs	r2, #2
 8005b08:	60da      	str	r2, [r3, #12]
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40023c00 	.word	0x40023c00
 8005b18:	20000d9c 	.word	0x20000d9c

08005b1c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b2e:	4b32      	ldr	r3, [pc, #200]	; (8005bf8 <HAL_FLASHEx_Erase+0xdc>)
 8005b30:	7e1b      	ldrb	r3, [r3, #24]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_FLASHEx_Erase+0x1e>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e05a      	b.n	8005bf0 <HAL_FLASHEx_Erase+0xd4>
 8005b3a:	4b2f      	ldr	r3, [pc, #188]	; (8005bf8 <HAL_FLASHEx_Erase+0xdc>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b44:	f7ff feaa 	bl	800589c <FLASH_WaitForLastOperation>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d14a      	bne.n	8005be8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d117      	bne.n	8005b92 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 f846 	bl	8005c00 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b78:	f7ff fe90 	bl	800589c <FLASH_WaitForLastOperation>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005b80:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <HAL_FLASHEx_Erase+0xe0>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <HAL_FLASHEx_Erase+0xe0>)
 8005b86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6113      	str	r3, [r2, #16]
 8005b90:	e028      	b.n	8005be4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	e01c      	b.n	8005bd4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	68b8      	ldr	r0, [r7, #8]
 8005ba4:	f000 f866 	bl	8005c74 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ba8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bac:	f7ff fe76 	bl	800589c <FLASH_WaitForLastOperation>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <HAL_FLASHEx_Erase+0xe0>)
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	4a10      	ldr	r2, [pc, #64]	; (8005bfc <HAL_FLASHEx_Erase+0xe0>)
 8005bba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005bbe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	601a      	str	r2, [r3, #0]
          break;
 8005bcc:	e00a      	b.n	8005be4 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3da      	bcc.n	8005b9a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005be4:	f000 f894 	bl	8005d10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <HAL_FLASHEx_Erase+0xdc>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	761a      	strb	r2, [r3, #24]

  return status;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000d9c 	.word	0x20000d9c
 8005bfc:	40023c00 	.word	0x40023c00

08005c00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c0c:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d108      	bne.n	8005c30 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	6113      	str	r3, [r2, #16]
 8005c2e:	e00f      	b.n	8005c50 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d106      	bne.n	8005c44 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	4a0d      	ldr	r2, [pc, #52]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c3c:	f043 0304 	orr.w	r3, r3, #4
 8005c40:	6113      	str	r3, [r2, #16]
 8005c42:	e005      	b.n	8005c50 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005c50:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	4a05      	ldr	r2, [pc, #20]	; (8005c70 <FLASH_MassErase+0x70>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c60:	6113      	str	r3, [r2, #16]
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40023c00 	.word	0x40023c00

08005c74 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e010      	b.n	8005cb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d103      	bne.n	8005c9e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e009      	b.n	8005cb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d103      	bne.n	8005cac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e002      	b.n	8005cb2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b0b      	cmp	r3, #11
 8005cb6:	d902      	bls.n	8005cbe <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	490f      	ldr	r1, [pc, #60]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ce0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cee:	f043 0302 	orr.w	r3, r3, #2
 8005cf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <FLASH_Erase_Sector+0x98>)
 8005cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cfe:	6113      	str	r3, [r2, #16]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40023c00 	.word	0x40023c00

08005d10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d017      	beq.n	8005d50 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d20:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d44:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d66:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <FLASH_FlushCaches+0x88>)
 8005d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d8a:	6013      	str	r3, [r2, #0]
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40023c00 	.word	0x40023c00

08005d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e177      	b.n	80060a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005db8:	2201      	movs	r2, #1
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	f040 8166 	bne.w	80060a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d005      	beq.n	8005dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d130      	bne.n	8005e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e24:	2201      	movs	r2, #1
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 0201 	and.w	r2, r3, #1
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d017      	beq.n	8005e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	2203      	movs	r2, #3
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d123      	bne.n	8005ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	08da      	lsrs	r2, r3, #3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3208      	adds	r2, #8
 8005ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	220f      	movs	r2, #15
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	08da      	lsrs	r2, r3, #3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3208      	adds	r2, #8
 8005eda:	69b9      	ldr	r1, [r7, #24]
 8005edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	2203      	movs	r2, #3
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 0203 	and.w	r2, r3, #3
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80c0 	beq.w	80060a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	4b66      	ldr	r3, [pc, #408]	; (80060c0 <HAL_GPIO_Init+0x324>)
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	4a65      	ldr	r2, [pc, #404]	; (80060c0 <HAL_GPIO_Init+0x324>)
 8005f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f30:	6453      	str	r3, [r2, #68]	; 0x44
 8005f32:	4b63      	ldr	r3, [pc, #396]	; (80060c0 <HAL_GPIO_Init+0x324>)
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f3e:	4a61      	ldr	r2, [pc, #388]	; (80060c4 <HAL_GPIO_Init+0x328>)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	3302      	adds	r3, #2
 8005f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	220f      	movs	r2, #15
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <HAL_GPIO_Init+0x32c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d037      	beq.n	8005fda <HAL_GPIO_Init+0x23e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a57      	ldr	r2, [pc, #348]	; (80060cc <HAL_GPIO_Init+0x330>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <HAL_GPIO_Init+0x23a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a56      	ldr	r2, [pc, #344]	; (80060d0 <HAL_GPIO_Init+0x334>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d02b      	beq.n	8005fd2 <HAL_GPIO_Init+0x236>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a55      	ldr	r2, [pc, #340]	; (80060d4 <HAL_GPIO_Init+0x338>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d025      	beq.n	8005fce <HAL_GPIO_Init+0x232>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a54      	ldr	r2, [pc, #336]	; (80060d8 <HAL_GPIO_Init+0x33c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01f      	beq.n	8005fca <HAL_GPIO_Init+0x22e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a53      	ldr	r2, [pc, #332]	; (80060dc <HAL_GPIO_Init+0x340>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d019      	beq.n	8005fc6 <HAL_GPIO_Init+0x22a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a52      	ldr	r2, [pc, #328]	; (80060e0 <HAL_GPIO_Init+0x344>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_GPIO_Init+0x226>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a51      	ldr	r2, [pc, #324]	; (80060e4 <HAL_GPIO_Init+0x348>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00d      	beq.n	8005fbe <HAL_GPIO_Init+0x222>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a50      	ldr	r2, [pc, #320]	; (80060e8 <HAL_GPIO_Init+0x34c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d007      	beq.n	8005fba <HAL_GPIO_Init+0x21e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a4f      	ldr	r2, [pc, #316]	; (80060ec <HAL_GPIO_Init+0x350>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d101      	bne.n	8005fb6 <HAL_GPIO_Init+0x21a>
 8005fb2:	2309      	movs	r3, #9
 8005fb4:	e012      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	e010      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	e00e      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fbe:	2307      	movs	r3, #7
 8005fc0:	e00c      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fc2:	2306      	movs	r3, #6
 8005fc4:	e00a      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fc6:	2305      	movs	r3, #5
 8005fc8:	e008      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fca:	2304      	movs	r3, #4
 8005fcc:	e006      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e004      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e002      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	f002 0203 	and.w	r2, r2, #3
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	4093      	lsls	r3, r2
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fec:	4935      	ldr	r1, [pc, #212]	; (80060c4 <HAL_GPIO_Init+0x328>)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ffa:	4b3d      	ldr	r3, [pc, #244]	; (80060f0 <HAL_GPIO_Init+0x354>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800601e:	4a34      	ldr	r2, [pc, #208]	; (80060f0 <HAL_GPIO_Init+0x354>)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006024:	4b32      	ldr	r3, [pc, #200]	; (80060f0 <HAL_GPIO_Init+0x354>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <HAL_GPIO_Init+0x354>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <HAL_GPIO_Init+0x354>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006072:	4a1f      	ldr	r2, [pc, #124]	; (80060f0 <HAL_GPIO_Init+0x354>)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <HAL_GPIO_Init+0x354>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	43db      	mvns	r3, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4013      	ands	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <HAL_GPIO_Init+0x354>)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	f67f ae84 	bls.w	8005db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40020000 	.word	0x40020000
 80060cc:	40020400 	.word	0x40020400
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020c00 	.word	0x40020c00
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40021400 	.word	0x40021400
 80060e0:	40021800 	.word	0x40021800
 80060e4:	40021c00 	.word	0x40021c00
 80060e8:	40022000 	.word	0x40022000
 80060ec:	40022400 	.word	0x40022400
 80060f0:	40013c00 	.word	0x40013c00

080060f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e0d9      	b.n	80062c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006110:	2201      	movs	r2, #1
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4013      	ands	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	f040 80c9 	bne.w	80062be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800612c:	4a6b      	ldr	r2, [pc, #428]	; (80062dc <HAL_GPIO_DeInit+0x1e8>)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	3302      	adds	r3, #2
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	220f      	movs	r2, #15
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a63      	ldr	r2, [pc, #396]	; (80062e0 <HAL_GPIO_DeInit+0x1ec>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d037      	beq.n	80061c6 <HAL_GPIO_DeInit+0xd2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a62      	ldr	r2, [pc, #392]	; (80062e4 <HAL_GPIO_DeInit+0x1f0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d031      	beq.n	80061c2 <HAL_GPIO_DeInit+0xce>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a61      	ldr	r2, [pc, #388]	; (80062e8 <HAL_GPIO_DeInit+0x1f4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d02b      	beq.n	80061be <HAL_GPIO_DeInit+0xca>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a60      	ldr	r2, [pc, #384]	; (80062ec <HAL_GPIO_DeInit+0x1f8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d025      	beq.n	80061ba <HAL_GPIO_DeInit+0xc6>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a5f      	ldr	r2, [pc, #380]	; (80062f0 <HAL_GPIO_DeInit+0x1fc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d01f      	beq.n	80061b6 <HAL_GPIO_DeInit+0xc2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a5e      	ldr	r2, [pc, #376]	; (80062f4 <HAL_GPIO_DeInit+0x200>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d019      	beq.n	80061b2 <HAL_GPIO_DeInit+0xbe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a5d      	ldr	r2, [pc, #372]	; (80062f8 <HAL_GPIO_DeInit+0x204>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_GPIO_DeInit+0xba>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a5c      	ldr	r2, [pc, #368]	; (80062fc <HAL_GPIO_DeInit+0x208>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00d      	beq.n	80061aa <HAL_GPIO_DeInit+0xb6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a5b      	ldr	r2, [pc, #364]	; (8006300 <HAL_GPIO_DeInit+0x20c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <HAL_GPIO_DeInit+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a5a      	ldr	r2, [pc, #360]	; (8006304 <HAL_GPIO_DeInit+0x210>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d101      	bne.n	80061a2 <HAL_GPIO_DeInit+0xae>
 800619e:	2309      	movs	r3, #9
 80061a0:	e012      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061a2:	230a      	movs	r3, #10
 80061a4:	e010      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061a6:	2308      	movs	r3, #8
 80061a8:	e00e      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061aa:	2307      	movs	r3, #7
 80061ac:	e00c      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061ae:	2306      	movs	r3, #6
 80061b0:	e00a      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061b2:	2305      	movs	r3, #5
 80061b4:	e008      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061b6:	2304      	movs	r3, #4
 80061b8:	e006      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061ba:	2303      	movs	r3, #3
 80061bc:	e004      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061be:	2302      	movs	r3, #2
 80061c0:	e002      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <HAL_GPIO_DeInit+0xd4>
 80061c6:	2300      	movs	r3, #0
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	f002 0203 	and.w	r2, r2, #3
 80061ce:	0092      	lsls	r2, r2, #2
 80061d0:	4093      	lsls	r3, r2
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d132      	bne.n	800623e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061d8:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	43db      	mvns	r3, r3
 80061e0:	4949      	ldr	r1, [pc, #292]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80061e6:	4b48      	ldr	r3, [pc, #288]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	43db      	mvns	r3, r3
 80061ee:	4946      	ldr	r1, [pc, #280]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80061f4:	4b44      	ldr	r3, [pc, #272]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	43db      	mvns	r3, r3
 80061fc:	4942      	ldr	r1, [pc, #264]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 80061fe:	4013      	ands	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006202:	4b41      	ldr	r3, [pc, #260]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	43db      	mvns	r3, r3
 800620a:	493f      	ldr	r1, [pc, #252]	; (8006308 <HAL_GPIO_DeInit+0x214>)
 800620c:	4013      	ands	r3, r2
 800620e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	220f      	movs	r2, #15
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006220:	4a2e      	ldr	r2, [pc, #184]	; (80062dc <HAL_GPIO_DeInit+0x1e8>)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	3302      	adds	r3, #2
 8006228:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	43da      	mvns	r2, r3
 8006230:	482a      	ldr	r0, [pc, #168]	; (80062dc <HAL_GPIO_DeInit+0x1e8>)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	400a      	ands	r2, r1
 8006238:	3302      	adds	r3, #2
 800623a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	2103      	movs	r1, #3
 8006248:	fa01 f303 	lsl.w	r3, r1, r3
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	08da      	lsrs	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3208      	adds	r2, #8
 800625c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	220f      	movs	r2, #15
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	43db      	mvns	r3, r3
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	08d2      	lsrs	r2, r2, #3
 8006274:	4019      	ands	r1, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3208      	adds	r2, #8
 800627a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	2103      	movs	r1, #3
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	2101      	movs	r1, #1
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	401a      	ands	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	2103      	movs	r1, #3
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	401a      	ands	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	3301      	adds	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	f67f af22 	bls.w	8006110 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40020000 	.word	0x40020000
 80062e4:	40020400 	.word	0x40020400
 80062e8:	40020800 	.word	0x40020800
 80062ec:	40020c00 	.word	0x40020c00
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40021400 	.word	0x40021400
 80062f8:	40021800 	.word	0x40021800
 80062fc:	40021c00 	.word	0x40021c00
 8006300:	40022000 	.word	0x40022000
 8006304:	40022400 	.word	0x40022400
 8006308:	40013c00 	.word	0x40013c00

0800630c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]
 8006328:	e001      	b.n	800632e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
 8006348:	4613      	mov	r3, r2
 800634a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800634c:	787b      	ldrb	r3, [r7, #1]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006352:	887a      	ldrh	r2, [r7, #2]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006358:	e003      	b.n	8006362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	041a      	lsls	r2, r3, #16
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	619a      	str	r2, [r3, #24]
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800636e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006370:	b08f      	sub	sp, #60	; 0x3c
 8006372:	af0a      	add	r7, sp, #40	; 0x28
 8006374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e054      	b.n	800642a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fb fd96 	bl	8001ecc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2203      	movs	r2, #3
 80063a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f005 faf2 	bl	800b9a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	687e      	ldr	r6, [r7, #4]
 80063cc:	466d      	mov	r5, sp
 80063ce:	f106 0410 	add.w	r4, r6, #16
 80063d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063de:	e885 0003 	stmia.w	r5, {r0, r1}
 80063e2:	1d33      	adds	r3, r6, #4
 80063e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063e6:	6838      	ldr	r0, [r7, #0]
 80063e8:	f005 fa7d 	bl	800b8e6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2101      	movs	r1, #1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f005 fae9 	bl	800b9ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	687e      	ldr	r6, [r7, #4]
 8006400:	466d      	mov	r5, sp
 8006402:	f106 0410 	add.w	r4, r6, #16
 8006406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800640a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800640c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800640e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006412:	e885 0003 	stmia.w	r5, {r0, r1}
 8006416:	1d33      	adds	r3, r6, #4
 8006418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800641a:	6838      	ldr	r0, [r7, #0]
 800641c:	f005 fc12 	bl	800bc44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006432 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f005 fbba 	bl	800bbc2 <USB_GetMode>
 800644e:	4603      	mov	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 80f6 	bne.w	8006642 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f005 fb9e 	bl	800bb9c <USB_ReadInterrupts>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80ec 	beq.w	8006640 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f005 fb95 	bl	800bb9c <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800647c:	d104      	bne.n	8006488 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006486:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4618      	mov	r0, r3
 800648e:	f005 fb85 	bl	800bb9c <USB_ReadInterrupts>
 8006492:	4603      	mov	r3, r0
 8006494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800649c:	d104      	bne.n	80064a8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064a6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f005 fb75 	bl	800bb9c <USB_ReadInterrupts>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064bc:	d104      	bne.n	80064c8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80064c6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f005 fb65 	bl	800bb9c <USB_ReadInterrupts>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d103      	bne.n	80064e4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2202      	movs	r2, #2
 80064e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f005 fb57 	bl	800bb9c <USB_ReadInterrupts>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f8:	d11c      	bne.n	8006534 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006502:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10f      	bne.n	8006534 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006514:	2110      	movs	r1, #16
 8006516:	6938      	ldr	r0, [r7, #16]
 8006518:	f005 faa4 	bl	800ba64 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f005 fac5 	bl	800baac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2101      	movs	r1, #1
 8006528:	4618      	mov	r0, r3
 800652a:	f005 fc3f 	bl	800bdac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f89e 	bl	8006670 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f005 fb2f 	bl	800bb9c <USB_ReadInterrupts>
 800653e:	4603      	mov	r3, r0
 8006540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006548:	d102      	bne.n	8006550 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 f9b1 	bl	80078b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f005 fb21 	bl	800bb9c <USB_ReadInterrupts>
 800655a:	4603      	mov	r3, r0
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b08      	cmp	r3, #8
 8006562:	d106      	bne.n	8006572 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f86f 	bl	8006648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2208      	movs	r2, #8
 8006570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f005 fb10 	bl	800bb9c <USB_ReadInterrupts>
 800657c:	4603      	mov	r3, r0
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b10      	cmp	r3, #16
 8006584:	d101      	bne.n	800658a <HAL_HCD_IRQHandler+0x158>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <HAL_HCD_IRQHandler+0x15a>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d012      	beq.n	80065b6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0210 	bic.w	r2, r2, #16
 800659e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 f8b4 	bl	800770e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0210 	orr.w	r2, r2, #16
 80065b4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f005 faee 	bl	800bb9c <USB_ReadInterrupts>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ca:	d13a      	bne.n	8006642 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f005 fc25 	bl	800be20 <USB_HC_ReadInterrupt>
 80065d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e025      	b.n	800662a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d018      	beq.n	8006624 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006608:	d106      	bne.n	8006618 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f859 	bl	80066c8 <HCD_HC_IN_IRQHandler>
 8006616:	e005      	b.n	8006624 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fc74 	bl	8006f0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3301      	adds	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3d4      	bcc.n	80065de <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800663c:	615a      	str	r2, [r3, #20]
 800663e:	e000      	b.n	8006642 <HAL_HCD_IRQHandler+0x210>
      return;
 8006640:	bf00      	nop
    }
  }
}
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
 80066b8:	4613      	mov	r3, r2
 80066ba:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d119      	bne.n	800672c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	461a      	mov	r2, r3
 8006706:	2304      	movs	r3, #4
 8006708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	440a      	add	r2, r1
 8006720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006724:	f043 0302 	orr.w	r3, r3, #2
 8006728:	60d3      	str	r3, [r2, #12]
 800672a:	e101      	b.n	8006930 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006742:	d12b      	bne.n	800679c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006750:	461a      	mov	r2, r3
 8006752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	212c      	movs	r1, #44	; 0x2c
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	3361      	adds	r3, #97	; 0x61
 8006766:	2207      	movs	r2, #7
 8006768:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	440a      	add	r2, r1
 8006780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006784:	f043 0302 	orr.w	r3, r3, #2
 8006788:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f005 fb54 	bl	800be42 <USB_HC_Halt>
 800679a:	e0c9      	b.n	8006930 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d109      	bne.n	80067c6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067be:	461a      	mov	r2, r3
 80067c0:	2320      	movs	r3, #32
 80067c2:	6093      	str	r3, [r2, #8]
 80067c4:	e0b4      	b.n	8006930 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d133      	bne.n	8006844 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f6:	f043 0302 	orr.w	r3, r3, #2
 80067fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	212c      	movs	r1, #44	; 0x2c
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	3361      	adds	r3, #97	; 0x61
 800680a:	2205      	movs	r2, #5
 800680c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	461a      	mov	r2, r3
 800681c:	2310      	movs	r3, #16
 800681e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	2308      	movs	r3, #8
 8006830:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f005 fb00 	bl	800be42 <USB_HC_Halt>
 8006842:	e075      	b.n	8006930 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685a:	d134      	bne.n	80068c6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4413      	add	r3, r2
 8006864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	440a      	add	r2, r1
 8006872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006876:	f043 0302 	orr.w	r3, r3, #2
 800687a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	212c      	movs	r1, #44	; 0x2c
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	3361      	adds	r3, #97	; 0x61
 800688a:	2208      	movs	r2, #8
 800688c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	461a      	mov	r2, r3
 800689c:	2310      	movs	r3, #16
 800689e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	461a      	mov	r2, r3
 80068ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f005 fabf 	bl	800be42 <USB_HC_Halt>
 80068c4:	e034      	b.n	8006930 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d8:	2b80      	cmp	r3, #128	; 0x80
 80068da:	d129      	bne.n	8006930 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f6:	f043 0302 	orr.w	r3, r3, #2
 80068fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	212c      	movs	r1, #44	; 0x2c
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	3361      	adds	r3, #97	; 0x61
 800690a:	2206      	movs	r2, #6
 800690c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f005 fa92 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	461a      	mov	r2, r3
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006946:	d122      	bne.n	800698e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	440a      	add	r2, r1
 800695e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006962:	f043 0302 	orr.w	r3, r3, #2
 8006966:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f005 fa65 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800698c:	e2ba      	b.n	8006f04 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 811b 	bne.w	8006bdc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d019      	beq.n	80069e2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	212c      	movs	r1, #44	; 0x2c
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	4413      	add	r3, r2
 80069ba:	3348      	adds	r3, #72	; 0x48
 80069bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	0159      	lsls	r1, r3, #5
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	440b      	add	r3, r1
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	202c      	movs	r0, #44	; 0x2c
 80069d8:	fb00 f303 	mul.w	r3, r0, r3
 80069dc:	440b      	add	r3, r1
 80069de:	3350      	adds	r3, #80	; 0x50
 80069e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	212c      	movs	r1, #44	; 0x2c
 80069e8:	fb01 f303 	mul.w	r3, r1, r3
 80069ec:	4413      	add	r3, r2
 80069ee:	3361      	adds	r3, #97	; 0x61
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	212c      	movs	r1, #44	; 0x2c
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	335c      	adds	r3, #92	; 0x5c
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a12:	461a      	mov	r2, r3
 8006a14:	2301      	movs	r3, #1
 8006a16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	212c      	movs	r1, #44	; 0x2c
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	4413      	add	r3, r2
 8006a24:	333f      	adds	r3, #63	; 0x3f
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	212c      	movs	r1, #44	; 0x2c
 8006a32:	fb01 f303 	mul.w	r3, r1, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	333f      	adds	r3, #63	; 0x3f
 8006a3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d121      	bne.n	8006a84 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5a:	f043 0302 	orr.w	r3, r3, #2
 8006a5e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f005 f9e9 	bl	800be42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	2310      	movs	r3, #16
 8006a80:	6093      	str	r3, [r2, #8]
 8006a82:	e066      	b.n	8006b52 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	212c      	movs	r1, #44	; 0x2c
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	333f      	adds	r3, #63	; 0x3f
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d127      	bne.n	8006ae8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	212c      	movs	r1, #44	; 0x2c
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3360      	adds	r3, #96	; 0x60
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	b2d9      	uxtb	r1, r3
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	202c      	movs	r0, #44	; 0x2c
 8006ad4:	fb00 f303 	mul.w	r3, r0, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	3360      	adds	r3, #96	; 0x60
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff fde3 	bl	80066ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ae6:	e034      	b.n	8006b52 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	212c      	movs	r1, #44	; 0x2c
 8006aee:	fb01 f303 	mul.w	r3, r1, r3
 8006af2:	4413      	add	r3, r2
 8006af4:	333f      	adds	r3, #63	; 0x3f
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d12a      	bne.n	8006b52 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	212c      	movs	r1, #44	; 0x2c
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	3360      	adds	r3, #96	; 0x60
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	212c      	movs	r1, #44	; 0x2c
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	3354      	adds	r3, #84	; 0x54
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f083 0301 	eor.w	r3, r3, #1
 8006b22:	b2d8      	uxtb	r0, r3
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	212c      	movs	r1, #44	; 0x2c
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	3354      	adds	r3, #84	; 0x54
 8006b32:	4602      	mov	r2, r0
 8006b34:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	b2d9      	uxtb	r1, r3
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	202c      	movs	r0, #44	; 0x2c
 8006b40:	fb00 f303 	mul.w	r3, r0, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	3360      	adds	r3, #96	; 0x60
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fdad 	bl	80066ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d12b      	bne.n	8006bb2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	212c      	movs	r1, #44	; 0x2c
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	3348      	adds	r3, #72	; 0x48
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	202c      	movs	r0, #44	; 0x2c
 8006b70:	fb00 f202 	mul.w	r2, r0, r2
 8006b74:	440a      	add	r2, r1
 8006b76:	3240      	adds	r2, #64	; 0x40
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 81be 	beq.w	8006f04 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	3354      	adds	r3, #84	; 0x54
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2d8      	uxtb	r0, r3
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	212c      	movs	r1, #44	; 0x2c
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	3354      	adds	r3, #84	; 0x54
 8006bac:	4602      	mov	r2, r0
 8006bae:	701a      	strb	r2, [r3, #0]
}
 8006bb0:	e1a8      	b.n	8006f04 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	212c      	movs	r1, #44	; 0x2c
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3354      	adds	r3, #84	; 0x54
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f083 0301 	eor.w	r3, r3, #1
 8006bc6:	b2d8      	uxtb	r0, r3
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	212c      	movs	r1, #44	; 0x2c
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3354      	adds	r3, #84	; 0x54
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	701a      	strb	r2, [r3, #0]
}
 8006bda:	e193      	b.n	8006f04 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	f040 8106 	bne.w	8006e00 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0e:	f023 0302 	bic.w	r3, r3, #2
 8006c12:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	212c      	movs	r1, #44	; 0x2c
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	3361      	adds	r3, #97	; 0x61
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d109      	bne.n	8006c3c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	212c      	movs	r1, #44	; 0x2c
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	3360      	adds	r3, #96	; 0x60
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e0c9      	b.n	8006dd0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	212c      	movs	r1, #44	; 0x2c
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	3361      	adds	r3, #97	; 0x61
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b05      	cmp	r3, #5
 8006c4e:	d109      	bne.n	8006c64 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	212c      	movs	r1, #44	; 0x2c
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3360      	adds	r3, #96	; 0x60
 8006c5e:	2205      	movs	r2, #5
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e0b5      	b.n	8006dd0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	3361      	adds	r3, #97	; 0x61
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b06      	cmp	r3, #6
 8006c76:	d009      	beq.n	8006c8c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	212c      	movs	r1, #44	; 0x2c
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	3361      	adds	r3, #97	; 0x61
 8006c86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d150      	bne.n	8006d2e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	212c      	movs	r1, #44	; 0x2c
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	335c      	adds	r3, #92	; 0x5c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	202c      	movs	r0, #44	; 0x2c
 8006ca4:	fb00 f303 	mul.w	r3, r0, r3
 8006ca8:	440b      	add	r3, r1
 8006caa:	335c      	adds	r3, #92	; 0x5c
 8006cac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	212c      	movs	r1, #44	; 0x2c
 8006cb4:	fb01 f303 	mul.w	r3, r1, r3
 8006cb8:	4413      	add	r3, r2
 8006cba:	335c      	adds	r3, #92	; 0x5c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d912      	bls.n	8006ce8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	212c      	movs	r1, #44	; 0x2c
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	335c      	adds	r3, #92	; 0x5c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	212c      	movs	r1, #44	; 0x2c
 8006cda:	fb01 f303 	mul.w	r3, r1, r3
 8006cde:	4413      	add	r3, r2
 8006ce0:	3360      	adds	r3, #96	; 0x60
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006ce6:	e073      	b.n	8006dd0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	212c      	movs	r1, #44	; 0x2c
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3360      	adds	r3, #96	; 0x60
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d10:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d18:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d26:	461a      	mov	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d2c:	e050      	b.n	8006dd0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	212c      	movs	r1, #44	; 0x2c
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	4413      	add	r3, r2
 8006d3a:	3361      	adds	r3, #97	; 0x61
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d122      	bne.n	8006d88 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	212c      	movs	r1, #44	; 0x2c
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3360      	adds	r3, #96	; 0x60
 8006d50:	2202      	movs	r2, #2
 8006d52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	461a      	mov	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	e023      	b.n	8006dd0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	212c      	movs	r1, #44	; 0x2c
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	3361      	adds	r3, #97	; 0x61
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b07      	cmp	r3, #7
 8006d9a:	d119      	bne.n	8006dd0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	212c      	movs	r1, #44	; 0x2c
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	335c      	adds	r3, #92	; 0x5c
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	202c      	movs	r0, #44	; 0x2c
 8006db4:	fb00 f303 	mul.w	r3, r0, r3
 8006db8:	440b      	add	r3, r1
 8006dba:	335c      	adds	r3, #92	; 0x5c
 8006dbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	212c      	movs	r1, #44	; 0x2c
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	3360      	adds	r3, #96	; 0x60
 8006dcc:	2204      	movs	r2, #4
 8006dce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2302      	movs	r3, #2
 8006de0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	b2d9      	uxtb	r1, r3
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	202c      	movs	r0, #44	; 0x2c
 8006dec:	fb00 f303 	mul.w	r3, r0, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	3360      	adds	r3, #96	; 0x60
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fc57 	bl	80066ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006dfe:	e081      	b.n	8006f04 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d176      	bne.n	8006f04 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	212c      	movs	r1, #44	; 0x2c
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	4413      	add	r3, r2
 8006e22:	333f      	adds	r3, #63	; 0x3f
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d121      	bne.n	8006e6e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	212c      	movs	r1, #44	; 0x2c
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	335c      	adds	r3, #92	; 0x5c
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e56:	f043 0302 	orr.w	r3, r3, #2
 8006e5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	4611      	mov	r1, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f004 ffeb 	bl	800be42 <USB_HC_Halt>
 8006e6c:	e041      	b.n	8006ef2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	212c      	movs	r1, #44	; 0x2c
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	4413      	add	r3, r2
 8006e7a:	333f      	adds	r3, #63	; 0x3f
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	212c      	movs	r1, #44	; 0x2c
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	333f      	adds	r3, #63	; 0x3f
 8006e90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d12d      	bne.n	8006ef2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	212c      	movs	r1, #44	; 0x2c
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	335c      	adds	r3, #92	; 0x5c
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d120      	bne.n	8006ef2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	212c      	movs	r1, #44	; 0x2c
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	4413      	add	r3, r2
 8006ebc:	3361      	adds	r3, #97	; 0x61
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006edc:	f043 0302 	orr.w	r3, r3, #2
 8006ee0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f004 ffa8 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efe:	461a      	mov	r2, r3
 8006f00:	2310      	movs	r3, #16
 8006f02:	6093      	str	r3, [r2, #8]
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d119      	bne.n	8006f70 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f68:	f043 0302 	orr.w	r3, r3, #2
 8006f6c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006f6e:	e3ca      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d13e      	bne.n	8007004 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f92:	461a      	mov	r2, r3
 8006f94:	2320      	movs	r3, #32
 8006f96:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	212c      	movs	r1, #44	; 0x2c
 8006f9e:	fb01 f303 	mul.w	r3, r1, r3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	333d      	adds	r3, #61	; 0x3d
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	f040 83ac 	bne.w	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	212c      	movs	r1, #44	; 0x2c
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	4413      	add	r3, r2
 8006fba:	333d      	adds	r3, #61	; 0x3d
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	212c      	movs	r1, #44	; 0x2c
 8006fc6:	fb01 f303 	mul.w	r3, r1, r3
 8006fca:	4413      	add	r3, r2
 8006fcc:	3360      	adds	r3, #96	; 0x60
 8006fce:	2202      	movs	r2, #2
 8006fd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fec:	f043 0302 	orr.w	r3, r3, #2
 8006ff0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f004 ff20 	bl	800be42 <USB_HC_Halt>
}
 8007002:	e380      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701a:	d122      	bne.n	8007062 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007036:	f043 0302 	orr.w	r3, r3, #2
 800703a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	4611      	mov	r1, r2
 8007046:	4618      	mov	r0, r3
 8007048:	f004 fefb 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	4413      	add	r3, r2
 8007054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007058:	461a      	mov	r2, r3
 800705a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800705e:	6093      	str	r3, [r2, #8]
}
 8007060:	e351      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d150      	bne.n	800711a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	212c      	movs	r1, #44	; 0x2c
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	4413      	add	r3, r2
 8007084:	335c      	adds	r3, #92	; 0x5c
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d111      	bne.n	80070c4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	212c      	movs	r1, #44	; 0x2c
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	4413      	add	r3, r2
 80070ac:	333d      	adds	r3, #61	; 0x3d
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070be:	461a      	mov	r2, r3
 80070c0:	2340      	movs	r3, #64	; 0x40
 80070c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070de:	f043 0302 	orr.w	r3, r3, #2
 80070e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f004 fea7 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007100:	461a      	mov	r2, r3
 8007102:	2301      	movs	r3, #1
 8007104:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	212c      	movs	r1, #44	; 0x2c
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	4413      	add	r3, r2
 8007112:	3361      	adds	r3, #97	; 0x61
 8007114:	2201      	movs	r2, #1
 8007116:	701a      	strb	r2, [r3, #0]
}
 8007118:	e2f5      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d13c      	bne.n	80071aa <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	212c      	movs	r1, #44	; 0x2c
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	3361      	adds	r3, #97	; 0x61
 800713e:	2204      	movs	r2, #4
 8007140:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	212c      	movs	r1, #44	; 0x2c
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	4413      	add	r3, r2
 800714e:	333d      	adds	r3, #61	; 0x3d
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	212c      	movs	r1, #44	; 0x2c
 800715a:	fb01 f303 	mul.w	r3, r1, r3
 800715e:	4413      	add	r3, r2
 8007160:	335c      	adds	r3, #92	; 0x5c
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	440a      	add	r2, r1
 800717c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007180:	f043 0302 	orr.w	r3, r3, #2
 8007184:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f004 fe56 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a2:	461a      	mov	r2, r3
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	6093      	str	r3, [r2, #8]
}
 80071a8:	e2ad      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d12a      	bne.n	8007216 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	461a      	mov	r2, r3
 80071ce:	2308      	movs	r3, #8
 80071d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ec:	f043 0302 	orr.w	r3, r3, #2
 80071f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f004 fe20 	bl	800be42 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	212c      	movs	r1, #44	; 0x2c
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	4413      	add	r3, r2
 800720e:	3361      	adds	r3, #97	; 0x61
 8007210:	2205      	movs	r2, #5
 8007212:	701a      	strb	r2, [r3, #0]
}
 8007214:	e277      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d150      	bne.n	80072ce <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	212c      	movs	r1, #44	; 0x2c
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	335c      	adds	r3, #92	; 0x5c
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	212c      	movs	r1, #44	; 0x2c
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	4413      	add	r3, r2
 800724a:	3361      	adds	r3, #97	; 0x61
 800724c:	2203      	movs	r2, #3
 800724e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	212c      	movs	r1, #44	; 0x2c
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	4413      	add	r3, r2
 800725c:	333d      	adds	r3, #61	; 0x3d
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d112      	bne.n	800728a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	212c      	movs	r1, #44	; 0x2c
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	4413      	add	r3, r2
 8007270:	333c      	adds	r3, #60	; 0x3c
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d108      	bne.n	800728a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	212c      	movs	r1, #44	; 0x2c
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	4413      	add	r3, r2
 8007284:	333d      	adds	r3, #61	; 0x3d
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a4:	f043 0302 	orr.w	r3, r3, #2
 80072a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	4611      	mov	r1, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f004 fdc4 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c6:	461a      	mov	r2, r3
 80072c8:	2310      	movs	r3, #16
 80072ca:	6093      	str	r3, [r2, #8]
}
 80072cc:	e21b      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e0:	2b80      	cmp	r3, #128	; 0x80
 80072e2:	d174      	bne.n	80073ce <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d121      	bne.n	8007330 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	212c      	movs	r1, #44	; 0x2c
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	4413      	add	r3, r2
 80072f8:	3361      	adds	r3, #97	; 0x61
 80072fa:	2206      	movs	r2, #6
 80072fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	440a      	add	r2, r1
 8007314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007318:	f043 0302 	orr.w	r3, r3, #2
 800731c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	4611      	mov	r1, r2
 8007328:	4618      	mov	r0, r3
 800732a:	f004 fd8a 	bl	800be42 <USB_HC_Halt>
 800732e:	e044      	b.n	80073ba <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	212c      	movs	r1, #44	; 0x2c
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	4413      	add	r3, r2
 800733c:	335c      	adds	r3, #92	; 0x5c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	202c      	movs	r0, #44	; 0x2c
 8007348:	fb00 f303 	mul.w	r3, r0, r3
 800734c:	440b      	add	r3, r1
 800734e:	335c      	adds	r3, #92	; 0x5c
 8007350:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	212c      	movs	r1, #44	; 0x2c
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	335c      	adds	r3, #92	; 0x5c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d920      	bls.n	80073a8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	212c      	movs	r1, #44	; 0x2c
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	335c      	adds	r3, #92	; 0x5c
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	212c      	movs	r1, #44	; 0x2c
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	3360      	adds	r3, #96	; 0x60
 8007386:	2204      	movs	r2, #4
 8007388:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	b2d9      	uxtb	r1, r3
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	202c      	movs	r0, #44	; 0x2c
 8007394:	fb00 f303 	mul.w	r3, r0, r3
 8007398:	4413      	add	r3, r2
 800739a:	3360      	adds	r3, #96	; 0x60
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff f983 	bl	80066ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80073a6:	e008      	b.n	80073ba <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	212c      	movs	r1, #44	; 0x2c
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	3360      	adds	r3, #96	; 0x60
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c6:	461a      	mov	r2, r3
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	6093      	str	r3, [r2, #8]
}
 80073cc:	e19b      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e4:	d134      	bne.n	8007450 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007400:	f043 0302 	orr.w	r3, r3, #2
 8007404:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f004 fd16 	bl	800be42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	461a      	mov	r2, r3
 8007424:	2310      	movs	r3, #16
 8007426:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007434:	461a      	mov	r2, r3
 8007436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800743a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	212c      	movs	r1, #44	; 0x2c
 8007442:	fb01 f303 	mul.w	r3, r1, r3
 8007446:	4413      	add	r3, r2
 8007448:	3361      	adds	r3, #97	; 0x61
 800744a:	2208      	movs	r2, #8
 800744c:	701a      	strb	r2, [r3, #0]
}
 800744e:	e15a      	b.n	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b02      	cmp	r3, #2
 8007464:	f040 814f 	bne.w	8007706 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4413      	add	r3, r2
 8007470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	440a      	add	r2, r1
 800747e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007482:	f023 0302 	bic.w	r3, r3, #2
 8007486:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	212c      	movs	r1, #44	; 0x2c
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	3361      	adds	r3, #97	; 0x61
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d17d      	bne.n	8007598 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	212c      	movs	r1, #44	; 0x2c
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	3360      	adds	r3, #96	; 0x60
 80074aa:	2201      	movs	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	212c      	movs	r1, #44	; 0x2c
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	333f      	adds	r3, #63	; 0x3f
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d00a      	beq.n	80074d8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	212c      	movs	r1, #44	; 0x2c
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	333f      	adds	r3, #63	; 0x3f
 80074d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	f040 8100 	bne.w	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d113      	bne.n	8007508 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	212c      	movs	r1, #44	; 0x2c
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	3355      	adds	r3, #85	; 0x55
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f083 0301 	eor.w	r3, r3, #1
 80074f4:	b2d8      	uxtb	r0, r3
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	212c      	movs	r1, #44	; 0x2c
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	4413      	add	r3, r2
 8007502:	3355      	adds	r3, #85	; 0x55
 8007504:	4602      	mov	r2, r0
 8007506:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 80e3 	bne.w	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	212c      	movs	r1, #44	; 0x2c
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	334c      	adds	r3, #76	; 0x4c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80d8 	beq.w	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	212c      	movs	r1, #44	; 0x2c
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	4413      	add	r3, r2
 8007534:	334c      	adds	r3, #76	; 0x4c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	202c      	movs	r0, #44	; 0x2c
 800753e:	fb00 f202 	mul.w	r2, r0, r2
 8007542:	440a      	add	r2, r1
 8007544:	3240      	adds	r2, #64	; 0x40
 8007546:	8812      	ldrh	r2, [r2, #0]
 8007548:	4413      	add	r3, r2
 800754a:	3b01      	subs	r3, #1
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	202c      	movs	r0, #44	; 0x2c
 8007552:	fb00 f202 	mul.w	r2, r0, r2
 8007556:	440a      	add	r2, r1
 8007558:	3240      	adds	r2, #64	; 0x40
 800755a:	8812      	ldrh	r2, [r2, #0]
 800755c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 80b5 	beq.w	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	212c      	movs	r1, #44	; 0x2c
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	3355      	adds	r3, #85	; 0x55
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f083 0301 	eor.w	r3, r3, #1
 8007582:	b2d8      	uxtb	r0, r3
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	212c      	movs	r1, #44	; 0x2c
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	3355      	adds	r3, #85	; 0x55
 8007592:	4602      	mov	r2, r0
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e09f      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	212c      	movs	r1, #44	; 0x2c
 800759e:	fb01 f303 	mul.w	r3, r1, r3
 80075a2:	4413      	add	r3, r2
 80075a4:	3361      	adds	r3, #97	; 0x61
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d109      	bne.n	80075c0 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	212c      	movs	r1, #44	; 0x2c
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	3360      	adds	r3, #96	; 0x60
 80075ba:	2202      	movs	r2, #2
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e08b      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	212c      	movs	r1, #44	; 0x2c
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	3361      	adds	r3, #97	; 0x61
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d109      	bne.n	80075e8 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	212c      	movs	r1, #44	; 0x2c
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	4413      	add	r3, r2
 80075e0:	3360      	adds	r3, #96	; 0x60
 80075e2:	2202      	movs	r2, #2
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e077      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	212c      	movs	r1, #44	; 0x2c
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	3361      	adds	r3, #97	; 0x61
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b05      	cmp	r3, #5
 80075fa:	d109      	bne.n	8007610 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	212c      	movs	r1, #44	; 0x2c
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	3360      	adds	r3, #96	; 0x60
 800760a:	2205      	movs	r2, #5
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e063      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	212c      	movs	r1, #44	; 0x2c
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3361      	adds	r3, #97	; 0x61
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b06      	cmp	r3, #6
 8007622:	d009      	beq.n	8007638 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	212c      	movs	r1, #44	; 0x2c
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	4413      	add	r3, r2
 8007630:	3361      	adds	r3, #97	; 0x61
 8007632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007634:	2b08      	cmp	r3, #8
 8007636:	d14f      	bne.n	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	212c      	movs	r1, #44	; 0x2c
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	4413      	add	r3, r2
 8007644:	335c      	adds	r3, #92	; 0x5c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	202c      	movs	r0, #44	; 0x2c
 8007650:	fb00 f303 	mul.w	r3, r0, r3
 8007654:	440b      	add	r3, r1
 8007656:	335c      	adds	r3, #92	; 0x5c
 8007658:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	212c      	movs	r1, #44	; 0x2c
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	335c      	adds	r3, #92	; 0x5c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d912      	bls.n	8007694 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	212c      	movs	r1, #44	; 0x2c
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	4413      	add	r3, r2
 800767a:	335c      	adds	r3, #92	; 0x5c
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	212c      	movs	r1, #44	; 0x2c
 8007686:	fb01 f303 	mul.w	r3, r1, r3
 800768a:	4413      	add	r3, r2
 800768c:	3360      	adds	r3, #96	; 0x60
 800768e:	2204      	movs	r2, #4
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e021      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	212c      	movs	r1, #44	; 0x2c
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	3360      	adds	r3, #96	; 0x60
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d2:	461a      	mov	r2, r3
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e4:	461a      	mov	r2, r3
 80076e6:	2302      	movs	r3, #2
 80076e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	b2d9      	uxtb	r1, r3
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	202c      	movs	r0, #44	; 0x2c
 80076f4:	fb00 f303 	mul.w	r3, r0, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	3360      	adds	r3, #96	; 0x60
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fe ffd3 	bl	80066ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007706:	bf00      	nop
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b08a      	sub	sp, #40	; 0x28
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	0c5b      	lsrs	r3, r3, #17
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007742:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d004      	beq.n	8007754 <HCD_RXQLVL_IRQHandler+0x46>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b05      	cmp	r3, #5
 800774e:	f000 80a9 	beq.w	80078a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007752:	e0aa      	b.n	80078aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 80a6 	beq.w	80078a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	212c      	movs	r1, #44	; 0x2c
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	4413      	add	r3, r2
 8007768:	3344      	adds	r3, #68	; 0x44
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 809b 	beq.w	80078a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	212c      	movs	r1, #44	; 0x2c
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	4413      	add	r3, r2
 800777e:	3350      	adds	r3, #80	; 0x50
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	441a      	add	r2, r3
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	202c      	movs	r0, #44	; 0x2c
 800778c:	fb00 f303 	mul.w	r3, r0, r3
 8007790:	440b      	add	r3, r1
 8007792:	334c      	adds	r3, #76	; 0x4c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d87a      	bhi.n	8007890 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	212c      	movs	r1, #44	; 0x2c
 80077a4:	fb01 f303 	mul.w	r3, r1, r3
 80077a8:	4413      	add	r3, r2
 80077aa:	3344      	adds	r3, #68	; 0x44
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	b292      	uxth	r2, r2
 80077b2:	4619      	mov	r1, r3
 80077b4:	f004 f99a 	bl	800baec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	212c      	movs	r1, #44	; 0x2c
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	4413      	add	r3, r2
 80077c4:	3344      	adds	r3, #68	; 0x44
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	441a      	add	r2, r3
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	202c      	movs	r0, #44	; 0x2c
 80077d2:	fb00 f303 	mul.w	r3, r0, r3
 80077d6:	440b      	add	r3, r1
 80077d8:	3344      	adds	r3, #68	; 0x44
 80077da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	212c      	movs	r1, #44	; 0x2c
 80077e2:	fb01 f303 	mul.w	r3, r1, r3
 80077e6:	4413      	add	r3, r2
 80077e8:	3350      	adds	r3, #80	; 0x50
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	441a      	add	r2, r3
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	202c      	movs	r0, #44	; 0x2c
 80077f6:	fb00 f303 	mul.w	r3, r0, r3
 80077fa:	440b      	add	r3, r1
 80077fc:	3350      	adds	r3, #80	; 0x50
 80077fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	0cdb      	lsrs	r3, r3, #19
 8007810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007814:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	212c      	movs	r1, #44	; 0x2c
 800781c:	fb01 f303 	mul.w	r3, r1, r3
 8007820:	4413      	add	r3, r2
 8007822:	3340      	adds	r3, #64	; 0x40
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4293      	cmp	r3, r2
 800782c:	d13c      	bne.n	80078a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d039      	beq.n	80078a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800784a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007852:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007860:	461a      	mov	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	212c      	movs	r1, #44	; 0x2c
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	3354      	adds	r3, #84	; 0x54
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f083 0301 	eor.w	r3, r3, #1
 800787a:	b2d8      	uxtb	r0, r3
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	212c      	movs	r1, #44	; 0x2c
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	4413      	add	r3, r2
 8007888:	3354      	adds	r3, #84	; 0x54
 800788a:	4602      	mov	r2, r0
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e00b      	b.n	80078a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	212c      	movs	r1, #44	; 0x2c
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	4413      	add	r3, r2
 800789c:	3360      	adds	r3, #96	; 0x60
 800789e:	2204      	movs	r2, #4
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e001      	b.n	80078a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80078a4:	bf00      	nop
 80078a6:	e000      	b.n	80078aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80078a8:	bf00      	nop
  }
}
 80078aa:	bf00      	nop
 80078ac:	3728      	adds	r7, #40	; 0x28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d10b      	bne.n	8007902 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d102      	bne.n	80078fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fe feb1 	bl	800665c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b08      	cmp	r3, #8
 800790a:	d132      	bne.n	8007972 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f043 0308 	orr.w	r3, r3, #8
 8007912:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b04      	cmp	r3, #4
 800791c:	d126      	bne.n	800796c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d113      	bne.n	800794e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800792c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007930:	d106      	bne.n	8007940 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2102      	movs	r1, #2
 8007938:	4618      	mov	r0, r3
 800793a:	f004 fa37 	bl	800bdac <USB_InitFSLSPClkSel>
 800793e:	e011      	b.n	8007964 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f004 fa30 	bl	800bdac <USB_InitFSLSPClkSel>
 800794c:	e00a      	b.n	8007964 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d106      	bne.n	8007964 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800795c:	461a      	mov	r2, r3
 800795e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007962:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fe fe8d 	bl	8006684 <HAL_HCD_PortEnabled_Callback>
 800796a:	e002      	b.n	8007972 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe fe93 	bl	8006698 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b20      	cmp	r3, #32
 800797a:	d103      	bne.n	8007984 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f043 0320 	orr.w	r3, r3, #32
 8007982:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800798a:	461a      	mov	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6013      	str	r3, [r2, #0]
}
 8007990:	bf00      	nop
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e12b      	b.n	8007c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7f9 fff6 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2224      	movs	r2, #36	; 0x24
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0201 	bic.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80079fc:	f001 fa38 	bl	8008e70 <HAL_RCC_GetPCLK1Freq>
 8007a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4a81      	ldr	r2, [pc, #516]	; (8007c0c <HAL_I2C_Init+0x274>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d807      	bhi.n	8007a1c <HAL_I2C_Init+0x84>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4a80      	ldr	r2, [pc, #512]	; (8007c10 <HAL_I2C_Init+0x278>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bf94      	ite	ls
 8007a14:	2301      	movls	r3, #1
 8007a16:	2300      	movhi	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e006      	b.n	8007a2a <HAL_I2C_Init+0x92>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a7d      	ldr	r2, [pc, #500]	; (8007c14 <HAL_I2C_Init+0x27c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	bf94      	ite	ls
 8007a24:	2301      	movls	r3, #1
 8007a26:	2300      	movhi	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0e7      	b.n	8007c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a78      	ldr	r2, [pc, #480]	; (8007c18 <HAL_I2C_Init+0x280>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	0c9b      	lsrs	r3, r3, #18
 8007a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4a6a      	ldr	r2, [pc, #424]	; (8007c0c <HAL_I2C_Init+0x274>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d802      	bhi.n	8007a6c <HAL_I2C_Init+0xd4>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	e009      	b.n	8007a80 <HAL_I2C_Init+0xe8>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	4a69      	ldr	r2, [pc, #420]	; (8007c1c <HAL_I2C_Init+0x284>)
 8007a78:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7c:	099b      	lsrs	r3, r3, #6
 8007a7e:	3301      	adds	r3, #1
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	430b      	orrs	r3, r1
 8007a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	495c      	ldr	r1, [pc, #368]	; (8007c0c <HAL_I2C_Init+0x274>)
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	d819      	bhi.n	8007ad4 <HAL_I2C_Init+0x13c>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	1e59      	subs	r1, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aae:	1c59      	adds	r1, r3, #1
 8007ab0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ab4:	400b      	ands	r3, r1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_I2C_Init+0x138>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1e59      	subs	r1, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ace:	e051      	b.n	8007b74 <HAL_I2C_Init+0x1dc>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	e04f      	b.n	8007b74 <HAL_I2C_Init+0x1dc>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d111      	bne.n	8007b00 <HAL_I2C_Init+0x168>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	1e58      	subs	r0, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6859      	ldr	r1, [r3, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	440b      	add	r3, r1
 8007aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8007aee:	3301      	adds	r3, #1
 8007af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e012      	b.n	8007b26 <HAL_I2C_Init+0x18e>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1e58      	subs	r0, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6859      	ldr	r1, [r3, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	0099      	lsls	r1, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b16:	3301      	adds	r3, #1
 8007b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <HAL_I2C_Init+0x196>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e022      	b.n	8007b74 <HAL_I2C_Init+0x1dc>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10e      	bne.n	8007b54 <HAL_I2C_Init+0x1bc>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1e58      	subs	r0, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	440b      	add	r3, r1
 8007b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	e00f      	b.n	8007b74 <HAL_I2C_Init+0x1dc>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1e58      	subs	r0, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6859      	ldr	r1, [r3, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	0099      	lsls	r1, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	6809      	ldr	r1, [r1, #0]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69da      	ldr	r2, [r3, #28]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6911      	ldr	r1, [r2, #16]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	68d2      	ldr	r2, [r2, #12]
 8007bae:	4311      	orrs	r1, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0201 	orr.w	r2, r2, #1
 8007be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	000186a0 	.word	0x000186a0
 8007c10:	001e847f 	.word	0x001e847f
 8007c14:	003d08ff 	.word	0x003d08ff
 8007c18:	431bde83 	.word	0x431bde83
 8007c1c:	10624dd3 	.word	0x10624dd3

08007c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d129      	bne.n	8007c8a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2224      	movs	r2, #36	; 0x24
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0210 	bic.w	r2, r2, #16
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0201 	orr.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d12a      	bne.n	8007d08 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2224      	movs	r2, #36	; 0x24
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0201 	bic.w	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007cd2:	89fb      	ldrh	r3, [r7, #14]
 8007cd4:	f023 030f 	bic.w	r3, r3, #15
 8007cd8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	89fb      	ldrh	r3, [r7, #14]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	89fa      	ldrh	r2, [r7, #14]
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e000      	b.n	8007d0a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
  }
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e0bf      	b.n	8007eaa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7f9 fea0 	bl	8001a84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007d5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6999      	ldr	r1, [r3, #24]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6899      	ldr	r1, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b4a      	ldr	r3, [pc, #296]	; (8007eb4 <HAL_LTDC_Init+0x19c>)
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6899      	ldr	r1, [r3, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68d9      	ldr	r1, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b3e      	ldr	r3, [pc, #248]	; (8007eb4 <HAL_LTDC_Init+0x19c>)
 8007dba:	400b      	ands	r3, r1
 8007dbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	041b      	lsls	r3, r3, #16
 8007dc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68d9      	ldr	r1, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6919      	ldr	r1, [r3, #16]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	4b33      	ldr	r3, [pc, #204]	; (8007eb4 <HAL_LTDC_Init+0x19c>)
 8007de8:	400b      	ands	r3, r1
 8007dea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6919      	ldr	r1, [r3, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6959      	ldr	r1, [r3, #20]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	4b27      	ldr	r3, [pc, #156]	; (8007eb4 <HAL_LTDC_Init+0x19c>)
 8007e16:	400b      	ands	r3, r1
 8007e18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6959      	ldr	r1, [r3, #20]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0206 	orr.w	r2, r2, #6
 8007e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	f000f800 	.word	0xf000f800

08007eb8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d023      	beq.n	8007f22 <HAL_LTDC_IRQHandler+0x6a>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01e      	beq.n	8007f22 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0204 	bic.w	r2, r2, #4
 8007ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f02:	f043 0201 	orr.w	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f86f 	bl	8008000 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d023      	beq.n	8007f74 <HAL_LTDC_IRQHandler+0xbc>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01e      	beq.n	8007f74 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0202 	bic.w	r2, r2, #2
 8007f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f54:	f043 0202 	orr.w	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2204      	movs	r2, #4
 8007f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f846 	bl	8008000 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01b      	beq.n	8007fb6 <HAL_LTDC_IRQHandler+0xfe>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d016      	beq.n	8007fb6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f82f 	bl	8008014 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01b      	beq.n	8007ff8 <HAL_LTDC_IRQHandler+0x140>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0208 	bic.w	r2, r2, #8
 8007fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2208      	movs	r2, #8
 8007fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f818 	bl	8008028 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800803c:	b5b0      	push	{r4, r5, r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800804e:	2b01      	cmp	r3, #1
 8008050:	d101      	bne.n	8008056 <HAL_LTDC_ConfigLayer+0x1a>
 8008052:	2302      	movs	r3, #2
 8008054:	e02c      	b.n	80080b0 <HAL_LTDC_ConfigLayer+0x74>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2202      	movs	r2, #2
 8008062:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2134      	movs	r1, #52	; 0x34
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	4413      	add	r3, r2
 8008072:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	4614      	mov	r4, r2
 800807a:	461d      	mov	r5, r3
 800807c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800807e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f8b9 	bl	8008208 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2201      	movs	r2, #1
 800809c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bdb0      	pop	{r4, r5, r7, pc}

080080b8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_LTDC_ConfigColorKeying+0x1a>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e030      	b.n	8008134 <HAL_LTDC_ConfigColorKeying+0x7c>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	4413      	add	r3, r2
 80080ee:	3384      	adds	r3, #132	; 0x84
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	6812      	ldr	r2, [r2, #0]
 80080f6:	4611      	mov	r1, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	01d2      	lsls	r2, r2, #7
 80080fc:	440a      	add	r2, r1
 80080fe:	3284      	adds	r2, #132	; 0x84
 8008100:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008104:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	4413      	add	r3, r2
 8008112:	3384      	adds	r3, #132	; 0x84
 8008114:	461a      	mov	r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2201      	movs	r2, #1
 8008120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_LTDC_EnableColorKeying+0x18>
 8008154:	2302      	movs	r3, #2
 8008156:	e026      	b.n	80081a6 <HAL_LTDC_EnableColorKeying+0x66>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	01db      	lsls	r3, r3, #7
 8008172:	4413      	add	r3, r2
 8008174:	3384      	adds	r3, #132	; 0x84
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	4611      	mov	r1, r2
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	01d2      	lsls	r2, r2, #7
 8008182:	440a      	add	r2, r1
 8008184:	3284      	adds	r2, #132	; 0x84
 8008186:	f043 0302 	orr.w	r3, r3, #2
 800818a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2201      	movs	r2, #1
 8008192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
	...

080081b4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_LTDC_EnableDither+0x16>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e016      	b.n	80081f8 <HAL_LTDC_EnableDither+0x44>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <HAL_LTDC_EnableDither+0x50>)
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <HAL_LTDC_EnableDither+0x50>)
 80081e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40016800 	.word	0x40016800

08008208 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008208:	b480      	push	{r7}
 800820a:	b089      	sub	sp, #36	; 0x24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	0c1b      	lsrs	r3, r3, #16
 8008220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008224:	4413      	add	r3, r2
 8008226:	041b      	lsls	r3, r3, #16
 8008228:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	01db      	lsls	r3, r3, #7
 8008234:	4413      	add	r3, r2
 8008236:	3384      	adds	r3, #132	; 0x84
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	4611      	mov	r1, r2
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	01d2      	lsls	r2, r2, #7
 8008244:	440a      	add	r2, r1
 8008246:	3284      	adds	r2, #132	; 0x84
 8008248:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800824c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	0c1b      	lsrs	r3, r3, #16
 800825a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825e:	4413      	add	r3, r2
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	440b      	add	r3, r1
 800826e:	3384      	adds	r3, #132	; 0x84
 8008270:	4619      	mov	r1, r3
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4313      	orrs	r3, r2
 8008276:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008286:	4413      	add	r3, r2
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	01db      	lsls	r3, r3, #7
 8008296:	4413      	add	r3, r2
 8008298:	3384      	adds	r3, #132	; 0x84
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	4611      	mov	r1, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	01d2      	lsls	r2, r2, #7
 80082a6:	440a      	add	r2, r1
 80082a8:	3284      	adds	r2, #132	; 0x84
 80082aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082be:	4413      	add	r3, r2
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4619      	mov	r1, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	01db      	lsls	r3, r3, #7
 80082cc:	440b      	add	r3, r1
 80082ce:	3384      	adds	r3, #132	; 0x84
 80082d0:	4619      	mov	r1, r3
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	01db      	lsls	r3, r3, #7
 80082e2:	4413      	add	r3, r2
 80082e4:	3384      	adds	r3, #132	; 0x84
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	4611      	mov	r1, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	01d2      	lsls	r2, r2, #7
 80082f2:	440a      	add	r2, r1
 80082f4:	3284      	adds	r2, #132	; 0x84
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	01db      	lsls	r3, r3, #7
 8008306:	4413      	add	r3, r2
 8008308:	3384      	adds	r3, #132	; 0x84
 800830a:	461a      	mov	r2, r3
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008322:	041b      	lsls	r3, r3, #16
 8008324:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	061b      	lsls	r3, r3, #24
 800832c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	4413      	add	r3, r2
 800833a:	3384      	adds	r3, #132	; 0x84
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	01db      	lsls	r3, r3, #7
 8008348:	4413      	add	r3, r2
 800834a:	3384      	adds	r3, #132	; 0x84
 800834c:	461a      	mov	r2, r3
 800834e:	2300      	movs	r3, #0
 8008350:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008358:	461a      	mov	r2, r3
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	431a      	orrs	r2, r3
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	431a      	orrs	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4619      	mov	r1, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	440b      	add	r3, r1
 800836e:	3384      	adds	r3, #132	; 0x84
 8008370:	4619      	mov	r1, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	01db      	lsls	r3, r3, #7
 8008382:	4413      	add	r3, r2
 8008384:	3384      	adds	r3, #132	; 0x84
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	4611      	mov	r1, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	01d2      	lsls	r2, r2, #7
 8008392:	440a      	add	r2, r1
 8008394:	3284      	adds	r2, #132	; 0x84
 8008396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800839a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	01db      	lsls	r3, r3, #7
 80083a6:	4413      	add	r3, r2
 80083a8:	3384      	adds	r3, #132	; 0x84
 80083aa:	461a      	mov	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	01db      	lsls	r3, r3, #7
 80083bc:	4413      	add	r3, r2
 80083be:	3384      	adds	r3, #132	; 0x84
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	4611      	mov	r1, r2
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	01d2      	lsls	r2, r2, #7
 80083cc:	440a      	add	r2, r1
 80083ce:	3284      	adds	r2, #132	; 0x84
 80083d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80083d4:	f023 0307 	bic.w	r3, r3, #7
 80083d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	69da      	ldr	r2, [r3, #28]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	6809      	ldr	r1, [r1, #0]
 80083e6:	4608      	mov	r0, r1
 80083e8:	6879      	ldr	r1, [r7, #4]
 80083ea:	01c9      	lsls	r1, r1, #7
 80083ec:	4401      	add	r1, r0
 80083ee:	3184      	adds	r1, #132	; 0x84
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	01db      	lsls	r3, r3, #7
 80083fe:	4413      	add	r3, r2
 8008400:	3384      	adds	r3, #132	; 0x84
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	01db      	lsls	r3, r3, #7
 800840e:	4413      	add	r3, r2
 8008410:	3384      	adds	r3, #132	; 0x84
 8008412:	461a      	mov	r2, r3
 8008414:	2300      	movs	r3, #0
 8008416:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	01db      	lsls	r3, r3, #7
 8008422:	4413      	add	r3, r2
 8008424:	3384      	adds	r3, #132	; 0x84
 8008426:	461a      	mov	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008436:	2304      	movs	r3, #4
 8008438:	61fb      	str	r3, [r7, #28]
 800843a:	e01b      	b.n	8008474 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d102      	bne.n	800844a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008444:	2303      	movs	r3, #3
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e014      	b.n	8008474 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d00b      	beq.n	800846a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008456:	2b02      	cmp	r3, #2
 8008458:	d007      	beq.n	800846a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800845e:	2b03      	cmp	r3, #3
 8008460:	d003      	beq.n	800846a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008466:	2b07      	cmp	r3, #7
 8008468:	d102      	bne.n	8008470 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800846a:	2302      	movs	r3, #2
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e001      	b.n	8008474 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008470:	2301      	movs	r3, #1
 8008472:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	01db      	lsls	r3, r3, #7
 800847e:	4413      	add	r3, r2
 8008480:	3384      	adds	r3, #132	; 0x84
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	4611      	mov	r1, r2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	01d2      	lsls	r2, r2, #7
 800848e:	440a      	add	r2, r1
 8008490:	3284      	adds	r2, #132	; 0x84
 8008492:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008496:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	041a      	lsls	r2, r3, #16
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6859      	ldr	r1, [r3, #4]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	1acb      	subs	r3, r1, r3
 80084ae:	69f9      	ldr	r1, [r7, #28]
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	3303      	adds	r3, #3
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	6809      	ldr	r1, [r1, #0]
 80084ba:	4608      	mov	r0, r1
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	01c9      	lsls	r1, r1, #7
 80084c0:	4401      	add	r1, r0
 80084c2:	3184      	adds	r1, #132	; 0x84
 80084c4:	4313      	orrs	r3, r2
 80084c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	01db      	lsls	r3, r3, #7
 80084d2:	4413      	add	r3, r2
 80084d4:	3384      	adds	r3, #132	; 0x84
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	6812      	ldr	r2, [r2, #0]
 80084dc:	4611      	mov	r1, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	01d2      	lsls	r2, r2, #7
 80084e2:	440a      	add	r2, r1
 80084e4:	3284      	adds	r2, #132	; 0x84
 80084e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	01db      	lsls	r3, r3, #7
 80084fa:	4413      	add	r3, r2
 80084fc:	3384      	adds	r3, #132	; 0x84
 80084fe:	461a      	mov	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	01db      	lsls	r3, r3, #7
 8008510:	4413      	add	r3, r2
 8008512:	3384      	adds	r3, #132	; 0x84
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	4611      	mov	r1, r2
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	01d2      	lsls	r2, r2, #7
 8008520:	440a      	add	r2, r1
 8008522:	3284      	adds	r2, #132	; 0x84
 8008524:	f043 0301 	orr.w	r3, r3, #1
 8008528:	6013      	str	r3, [r2, #0]
}
 800852a:	bf00      	nop
 800852c:	3724      	adds	r7, #36	; 0x24
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008542:	2300      	movs	r3, #0
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4b20      	ldr	r3, [pc, #128]	; (80085c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	4a1f      	ldr	r2, [pc, #124]	; (80085c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800854c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008550:	6413      	str	r3, [r2, #64]	; 0x40
 8008552:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800855e:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <HAL_PWREx_EnableOverDrive+0x94>)
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008564:	f7fb fa7e 	bl	8003a64 <HAL_GetTick>
 8008568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800856a:	e009      	b.n	8008580 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800856c:	f7fb fa7a 	bl	8003a64 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800857a:	d901      	bls.n	8008580 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e01f      	b.n	80085c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	d1ee      	bne.n	800856c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800858e:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008594:	f7fb fa66 	bl	8003a64 <HAL_GetTick>
 8008598:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800859a:	e009      	b.n	80085b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800859c:	f7fb fa62 	bl	8003a64 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085aa:	d901      	bls.n	80085b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e007      	b.n	80085c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085bc:	d1ee      	bne.n	800859c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40023800 	.word	0x40023800
 80085cc:	420e0040 	.word	0x420e0040
 80085d0:	40007000 	.word	0x40007000
 80085d4:	420e0044 	.word	0x420e0044

080085d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e264      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d075      	beq.n	80086e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085f6:	4ba3      	ldr	r3, [pc, #652]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 030c 	and.w	r3, r3, #12
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d00c      	beq.n	800861c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008602:	4ba0      	ldr	r3, [pc, #640]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800860a:	2b08      	cmp	r3, #8
 800860c:	d112      	bne.n	8008634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800860e:	4b9d      	ldr	r3, [pc, #628]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800861a:	d10b      	bne.n	8008634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861c:	4b99      	ldr	r3, [pc, #612]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d05b      	beq.n	80086e0 <HAL_RCC_OscConfig+0x108>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d157      	bne.n	80086e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e23f      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863c:	d106      	bne.n	800864c <HAL_RCC_OscConfig+0x74>
 800863e:	4b91      	ldr	r3, [pc, #580]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a90      	ldr	r2, [pc, #576]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	e01d      	b.n	8008688 <HAL_RCC_OscConfig+0xb0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008654:	d10c      	bne.n	8008670 <HAL_RCC_OscConfig+0x98>
 8008656:	4b8b      	ldr	r3, [pc, #556]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a8a      	ldr	r2, [pc, #552]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800865c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	4b88      	ldr	r3, [pc, #544]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a87      	ldr	r2, [pc, #540]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	e00b      	b.n	8008688 <HAL_RCC_OscConfig+0xb0>
 8008670:	4b84      	ldr	r3, [pc, #528]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a83      	ldr	r2, [pc, #524]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	4b81      	ldr	r3, [pc, #516]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a80      	ldr	r2, [pc, #512]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d013      	beq.n	80086b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008690:	f7fb f9e8 	bl	8003a64 <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008698:	f7fb f9e4 	bl	8003a64 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b64      	cmp	r3, #100	; 0x64
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e204      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086aa:	4b76      	ldr	r3, [pc, #472]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCC_OscConfig+0xc0>
 80086b6:	e014      	b.n	80086e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b8:	f7fb f9d4 	bl	8003a64 <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086be:	e008      	b.n	80086d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086c0:	f7fb f9d0 	bl	8003a64 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b64      	cmp	r3, #100	; 0x64
 80086cc:	d901      	bls.n	80086d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e1f0      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086d2:	4b6c      	ldr	r3, [pc, #432]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f0      	bne.n	80086c0 <HAL_RCC_OscConfig+0xe8>
 80086de:	e000      	b.n	80086e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d063      	beq.n	80087b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086ee:	4b65      	ldr	r3, [pc, #404]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 030c 	and.w	r3, r3, #12
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086fa:	4b62      	ldr	r3, [pc, #392]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008702:	2b08      	cmp	r3, #8
 8008704:	d11c      	bne.n	8008740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008706:	4b5f      	ldr	r3, [pc, #380]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d116      	bne.n	8008740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008712:	4b5c      	ldr	r3, [pc, #368]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_RCC_OscConfig+0x152>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d001      	beq.n	800872a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e1c4      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872a:	4b56      	ldr	r3, [pc, #344]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	4952      	ldr	r1, [pc, #328]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800873a:	4313      	orrs	r3, r2
 800873c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800873e:	e03a      	b.n	80087b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d020      	beq.n	800878a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008748:	4b4f      	ldr	r3, [pc, #316]	; (8008888 <HAL_RCC_OscConfig+0x2b0>)
 800874a:	2201      	movs	r2, #1
 800874c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874e:	f7fb f989 	bl	8003a64 <HAL_GetTick>
 8008752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008756:	f7fb f985 	bl	8003a64 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e1a5      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008768:	4b46      	ldr	r3, [pc, #280]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0f0      	beq.n	8008756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008774:	4b43      	ldr	r3, [pc, #268]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	4940      	ldr	r1, [pc, #256]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008784:	4313      	orrs	r3, r2
 8008786:	600b      	str	r3, [r1, #0]
 8008788:	e015      	b.n	80087b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800878a:	4b3f      	ldr	r3, [pc, #252]	; (8008888 <HAL_RCC_OscConfig+0x2b0>)
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7fb f968 	bl	8003a64 <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008798:	f7fb f964 	bl	8003a64 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e184      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087aa:	4b36      	ldr	r3, [pc, #216]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d030      	beq.n	8008824 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d016      	beq.n	80087f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ca:	4b30      	ldr	r3, [pc, #192]	; (800888c <HAL_RCC_OscConfig+0x2b4>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d0:	f7fb f948 	bl	8003a64 <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087d8:	f7fb f944 	bl	8003a64 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e164      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087ea:	4b26      	ldr	r3, [pc, #152]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 80087ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0f0      	beq.n	80087d8 <HAL_RCC_OscConfig+0x200>
 80087f6:	e015      	b.n	8008824 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087f8:	4b24      	ldr	r3, [pc, #144]	; (800888c <HAL_RCC_OscConfig+0x2b4>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087fe:	f7fb f931 	bl	8003a64 <HAL_GetTick>
 8008802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008804:	e008      	b.n	8008818 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008806:	f7fb f92d 	bl	8003a64 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	2b02      	cmp	r3, #2
 8008812:	d901      	bls.n	8008818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e14d      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008818:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800881a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1f0      	bne.n	8008806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 80a0 	beq.w	8008972 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008832:	2300      	movs	r3, #0
 8008834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008836:	4b13      	ldr	r3, [pc, #76]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008842:	2300      	movs	r3, #0
 8008844:	60bb      	str	r3, [r7, #8]
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 800884c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008850:	6413      	str	r3, [r2, #64]	; 0x40
 8008852:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <HAL_RCC_OscConfig+0x2ac>)
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800885a:	60bb      	str	r3, [r7, #8]
 800885c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800885e:	2301      	movs	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008862:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <HAL_RCC_OscConfig+0x2b8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886a:	2b00      	cmp	r3, #0
 800886c:	d121      	bne.n	80088b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800886e:	4b08      	ldr	r3, [pc, #32]	; (8008890 <HAL_RCC_OscConfig+0x2b8>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a07      	ldr	r2, [pc, #28]	; (8008890 <HAL_RCC_OscConfig+0x2b8>)
 8008874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800887a:	f7fb f8f3 	bl	8003a64 <HAL_GetTick>
 800887e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008880:	e011      	b.n	80088a6 <HAL_RCC_OscConfig+0x2ce>
 8008882:	bf00      	nop
 8008884:	40023800 	.word	0x40023800
 8008888:	42470000 	.word	0x42470000
 800888c:	42470e80 	.word	0x42470e80
 8008890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008894:	f7fb f8e6 	bl	8003a64 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e106      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088a6:	4b85      	ldr	r3, [pc, #532]	; (8008abc <HAL_RCC_OscConfig+0x4e4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d106      	bne.n	80088c8 <HAL_RCC_OscConfig+0x2f0>
 80088ba:	4b81      	ldr	r3, [pc, #516]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	4a80      	ldr	r2, [pc, #512]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088c0:	f043 0301 	orr.w	r3, r3, #1
 80088c4:	6713      	str	r3, [r2, #112]	; 0x70
 80088c6:	e01c      	b.n	8008902 <HAL_RCC_OscConfig+0x32a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b05      	cmp	r3, #5
 80088ce:	d10c      	bne.n	80088ea <HAL_RCC_OscConfig+0x312>
 80088d0:	4b7b      	ldr	r3, [pc, #492]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d4:	4a7a      	ldr	r2, [pc, #488]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088d6:	f043 0304 	orr.w	r3, r3, #4
 80088da:	6713      	str	r3, [r2, #112]	; 0x70
 80088dc:	4b78      	ldr	r3, [pc, #480]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e0:	4a77      	ldr	r2, [pc, #476]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	6713      	str	r3, [r2, #112]	; 0x70
 80088e8:	e00b      	b.n	8008902 <HAL_RCC_OscConfig+0x32a>
 80088ea:	4b75      	ldr	r3, [pc, #468]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	4a74      	ldr	r2, [pc, #464]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	6713      	str	r3, [r2, #112]	; 0x70
 80088f6:	4b72      	ldr	r3, [pc, #456]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	4a71      	ldr	r2, [pc, #452]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80088fc:	f023 0304 	bic.w	r3, r3, #4
 8008900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d015      	beq.n	8008936 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890a:	f7fb f8ab 	bl	8003a64 <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008910:	e00a      	b.n	8008928 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008912:	f7fb f8a7 	bl	8003a64 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008920:	4293      	cmp	r3, r2
 8008922:	d901      	bls.n	8008928 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e0c5      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008928:	4b65      	ldr	r3, [pc, #404]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 800892a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0ee      	beq.n	8008912 <HAL_RCC_OscConfig+0x33a>
 8008934:	e014      	b.n	8008960 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008936:	f7fb f895 	bl	8003a64 <HAL_GetTick>
 800893a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800893c:	e00a      	b.n	8008954 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800893e:	f7fb f891 	bl	8003a64 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	f241 3288 	movw	r2, #5000	; 0x1388
 800894c:	4293      	cmp	r3, r2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e0af      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008954:	4b5a      	ldr	r3, [pc, #360]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1ee      	bne.n	800893e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d105      	bne.n	8008972 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008966:	4b56      	ldr	r3, [pc, #344]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	4a55      	ldr	r2, [pc, #340]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 800896c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 809b 	beq.w	8008ab2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800897c:	4b50      	ldr	r3, [pc, #320]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f003 030c 	and.w	r3, r3, #12
 8008984:	2b08      	cmp	r3, #8
 8008986:	d05c      	beq.n	8008a42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	2b02      	cmp	r3, #2
 800898e:	d141      	bne.n	8008a14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008990:	4b4c      	ldr	r3, [pc, #304]	; (8008ac4 <HAL_RCC_OscConfig+0x4ec>)
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008996:	f7fb f865 	bl	8003a64 <HAL_GetTick>
 800899a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800899c:	e008      	b.n	80089b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800899e:	f7fb f861 	bl	8003a64 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d901      	bls.n	80089b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e081      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b0:	4b43      	ldr	r3, [pc, #268]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f0      	bne.n	800899e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69da      	ldr	r2, [r3, #28]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	019b      	lsls	r3, r3, #6
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	085b      	lsrs	r3, r3, #1
 80089d4:	3b01      	subs	r3, #1
 80089d6:	041b      	lsls	r3, r3, #16
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	061b      	lsls	r3, r3, #24
 80089e0:	4937      	ldr	r1, [pc, #220]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089e6:	4b37      	ldr	r3, [pc, #220]	; (8008ac4 <HAL_RCC_OscConfig+0x4ec>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ec:	f7fb f83a 	bl	8003a64 <HAL_GetTick>
 80089f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f4:	f7fb f836 	bl	8003a64 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e056      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a06:	4b2e      	ldr	r3, [pc, #184]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f0      	beq.n	80089f4 <HAL_RCC_OscConfig+0x41c>
 8008a12:	e04e      	b.n	8008ab2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a14:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <HAL_RCC_OscConfig+0x4ec>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1a:	f7fb f823 	bl	8003a64 <HAL_GetTick>
 8008a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a22:	f7fb f81f 	bl	8003a64 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e03f      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a34:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f0      	bne.n	8008a22 <HAL_RCC_OscConfig+0x44a>
 8008a40:	e037      	b.n	8008ab2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e032      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <HAL_RCC_OscConfig+0x4e8>)
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d028      	beq.n	8008aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d121      	bne.n	8008aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d11a      	bne.n	8008aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d111      	bne.n	8008aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	3b01      	subs	r3, #1
 8008a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d107      	bne.n	8008aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d001      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40007000 	.word	0x40007000
 8008ac0:	40023800 	.word	0x40023800
 8008ac4:	42470060 	.word	0x42470060

08008ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e0cc      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008adc:	4b68      	ldr	r3, [pc, #416]	; (8008c80 <HAL_RCC_ClockConfig+0x1b8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d90c      	bls.n	8008b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aea:	4b65      	ldr	r3, [pc, #404]	; (8008c80 <HAL_RCC_ClockConfig+0x1b8>)
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af2:	4b63      	ldr	r3, [pc, #396]	; (8008c80 <HAL_RCC_ClockConfig+0x1b8>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d001      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0b8      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d020      	beq.n	8008b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0304 	and.w	r3, r3, #4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b1c:	4b59      	ldr	r3, [pc, #356]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	4a58      	ldr	r2, [pc, #352]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b34:	4b53      	ldr	r3, [pc, #332]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	4a52      	ldr	r2, [pc, #328]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b40:	4b50      	ldr	r3, [pc, #320]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	494d      	ldr	r1, [pc, #308]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d044      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d107      	bne.n	8008b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b66:	4b47      	ldr	r3, [pc, #284]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d119      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e07f      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d003      	beq.n	8008b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d107      	bne.n	8008b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b86:	4b3f      	ldr	r3, [pc, #252]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e06f      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b96:	4b3b      	ldr	r3, [pc, #236]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e067      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ba6:	4b37      	ldr	r3, [pc, #220]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f023 0203 	bic.w	r2, r3, #3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	4934      	ldr	r1, [pc, #208]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bb8:	f7fa ff54 	bl	8003a64 <HAL_GetTick>
 8008bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bbe:	e00a      	b.n	8008bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bc0:	f7fa ff50 	bl	8003a64 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e04f      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd6:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 020c 	and.w	r2, r3, #12
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d1eb      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008be8:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <HAL_RCC_ClockConfig+0x1b8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d20c      	bcs.n	8008c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf6:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfe:	4b20      	ldr	r3, [pc, #128]	; (8008c80 <HAL_RCC_ClockConfig+0x1b8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d001      	beq.n	8008c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e032      	b.n	8008c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c1c:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	4916      	ldr	r1, [pc, #88]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c3a:	4b12      	ldr	r3, [pc, #72]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	490e      	ldr	r1, [pc, #56]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c4e:	f000 f821 	bl	8008c94 <HAL_RCC_GetSysClockFreq>
 8008c52:	4602      	mov	r2, r0
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <HAL_RCC_ClockConfig+0x1bc>)
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	091b      	lsrs	r3, r3, #4
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	490a      	ldr	r1, [pc, #40]	; (8008c88 <HAL_RCC_ClockConfig+0x1c0>)
 8008c60:	5ccb      	ldrb	r3, [r1, r3]
 8008c62:	fa22 f303 	lsr.w	r3, r2, r3
 8008c66:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <HAL_RCC_ClockConfig+0x1c4>)
 8008c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <HAL_RCC_ClockConfig+0x1c8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7f9 fa18 	bl	80020a4 <HAL_InitTick>

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	40023c00 	.word	0x40023c00
 8008c84:	40023800 	.word	0x40023800
 8008c88:	08019898 	.word	0x08019898
 8008c8c:	20000034 	.word	0x20000034
 8008c90:	20000088 	.word	0x20000088

08008c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cac:	4b67      	ldr	r3, [pc, #412]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f003 030c 	and.w	r3, r3, #12
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d00d      	beq.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	f200 80bd 	bhi.w	8008e38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d003      	beq.n	8008cce <HAL_RCC_GetSysClockFreq+0x3a>
 8008cc6:	e0b7      	b.n	8008e38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cc8:	4b61      	ldr	r3, [pc, #388]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008cca:	60bb      	str	r3, [r7, #8]
       break;
 8008ccc:	e0b7      	b.n	8008e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cce:	4b61      	ldr	r3, [pc, #388]	; (8008e54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008cd0:	60bb      	str	r3, [r7, #8]
      break;
 8008cd2:	e0b4      	b.n	8008e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cd4:	4b5d      	ldr	r3, [pc, #372]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cde:	4b5b      	ldr	r3, [pc, #364]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d04d      	beq.n	8008d86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cea:	4b58      	ldr	r3, [pc, #352]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	099b      	lsrs	r3, r3, #6
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008cfa:	f04f 0100 	mov.w	r1, #0
 8008cfe:	ea02 0800 	and.w	r8, r2, r0
 8008d02:	ea03 0901 	and.w	r9, r3, r1
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	014b      	lsls	r3, r1, #5
 8008d14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d18:	0142      	lsls	r2, r0, #5
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	ebb0 0008 	subs.w	r0, r0, r8
 8008d22:	eb61 0109 	sbc.w	r1, r1, r9
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	018b      	lsls	r3, r1, #6
 8008d30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d34:	0182      	lsls	r2, r0, #6
 8008d36:	1a12      	subs	r2, r2, r0
 8008d38:	eb63 0301 	sbc.w	r3, r3, r1
 8008d3c:	f04f 0000 	mov.w	r0, #0
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	00d9      	lsls	r1, r3, #3
 8008d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d4a:	00d0      	lsls	r0, r2, #3
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	eb12 0208 	adds.w	r2, r2, r8
 8008d54:	eb43 0309 	adc.w	r3, r3, r9
 8008d58:	f04f 0000 	mov.w	r0, #0
 8008d5c:	f04f 0100 	mov.w	r1, #0
 8008d60:	0259      	lsls	r1, r3, #9
 8008d62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008d66:	0250      	lsls	r0, r2, #9
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f04f 0300 	mov.w	r3, #0
 8008d78:	f7f7 fa8a 	bl	8000290 <__aeabi_uldivmod>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4613      	mov	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e04a      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d86:	4b31      	ldr	r3, [pc, #196]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	099b      	lsrs	r3, r3, #6
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d96:	f04f 0100 	mov.w	r1, #0
 8008d9a:	ea02 0400 	and.w	r4, r2, r0
 8008d9e:	ea03 0501 	and.w	r5, r3, r1
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	f04f 0300 	mov.w	r3, #0
 8008dae:	014b      	lsls	r3, r1, #5
 8008db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008db4:	0142      	lsls	r2, r0, #5
 8008db6:	4610      	mov	r0, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	1b00      	subs	r0, r0, r4
 8008dbc:	eb61 0105 	sbc.w	r1, r1, r5
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	018b      	lsls	r3, r1, #6
 8008dca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008dce:	0182      	lsls	r2, r0, #6
 8008dd0:	1a12      	subs	r2, r2, r0
 8008dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8008dd6:	f04f 0000 	mov.w	r0, #0
 8008dda:	f04f 0100 	mov.w	r1, #0
 8008dde:	00d9      	lsls	r1, r3, #3
 8008de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008de4:	00d0      	lsls	r0, r2, #3
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	1912      	adds	r2, r2, r4
 8008dec:	eb45 0303 	adc.w	r3, r5, r3
 8008df0:	f04f 0000 	mov.w	r0, #0
 8008df4:	f04f 0100 	mov.w	r1, #0
 8008df8:	0299      	lsls	r1, r3, #10
 8008dfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008dfe:	0290      	lsls	r0, r2, #10
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4610      	mov	r0, r2
 8008e06:	4619      	mov	r1, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	f7f7 fa3e 	bl	8000290 <__aeabi_uldivmod>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4613      	mov	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	3301      	adds	r3, #1
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e34:	60bb      	str	r3, [r7, #8]
      break;
 8008e36:	e002      	b.n	8008e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008e3a:	60bb      	str	r3, [r7, #8]
      break;
 8008e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e4a:	bf00      	nop
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	00f42400 	.word	0x00f42400
 8008e54:	007a1200 	.word	0x007a1200

08008e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e5c:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000034 	.word	0x20000034

08008e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e74:	f7ff fff0 	bl	8008e58 <HAL_RCC_GetHCLKFreq>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	0a9b      	lsrs	r3, r3, #10
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	4903      	ldr	r1, [pc, #12]	; (8008e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e86:	5ccb      	ldrb	r3, [r1, r3]
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40023800 	.word	0x40023800
 8008e94:	080198a8 	.word	0x080198a8

08008e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e9c:	f7ff ffdc 	bl	8008e58 <HAL_RCC_GetHCLKFreq>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	0b5b      	lsrs	r3, r3, #13
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	4903      	ldr	r1, [pc, #12]	; (8008ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eae:	5ccb      	ldrb	r3, [r1, r3]
 8008eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	40023800 	.word	0x40023800
 8008ebc:	080198a8 	.word	0x080198a8

08008ec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	220f      	movs	r2, #15
 8008ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <HAL_RCC_GetClockConfig+0x5c>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 0203 	and.w	r2, r3, #3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008edc:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <HAL_RCC_GetClockConfig+0x5c>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008ee8:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <HAL_RCC_GetClockConfig+0x5c>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ef4:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <HAL_RCC_GetClockConfig+0x5c>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	08db      	lsrs	r3, r3, #3
 8008efa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f02:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <HAL_RCC_GetClockConfig+0x60>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 020f 	and.w	r2, r3, #15
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	601a      	str	r2, [r3, #0]
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	40023c00 	.word	0x40023c00

08008f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d105      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d075      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f58:	4bad      	ldr	r3, [pc, #692]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f5e:	f7fa fd81 	bl	8003a64 <HAL_GetTick>
 8008f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f64:	e008      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f66:	f7fa fd7d 	bl	8003a64 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d901      	bls.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e18b      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f78:	4ba6      	ldr	r3, [pc, #664]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f0      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d009      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	019a      	lsls	r2, r3, #6
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	071b      	lsls	r3, r3, #28
 8008f9c:	499d      	ldr	r1, [pc, #628]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01f      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008fb0:	4b98      	ldr	r3, [pc, #608]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb6:	0f1b      	lsrs	r3, r3, #28
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	019a      	lsls	r2, r3, #6
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	061b      	lsls	r3, r3, #24
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	071b      	lsls	r3, r3, #28
 8008fd0:	4990      	ldr	r1, [pc, #576]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008fd8:	4b8e      	ldr	r3, [pc, #568]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fde:	f023 021f 	bic.w	r2, r3, #31
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	498a      	ldr	r1, [pc, #552]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00d      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	019a      	lsls	r2, r3, #6
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	061b      	lsls	r3, r3, #24
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	071b      	lsls	r3, r3, #28
 8009010:	4980      	ldr	r1, [pc, #512]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009012:	4313      	orrs	r3, r2
 8009014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009018:	4b7d      	ldr	r3, [pc, #500]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800901e:	f7fa fd21 	bl	8003a64 <HAL_GetTick>
 8009022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009024:	e008      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009026:	f7fa fd1d 	bl	8003a64 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e12b      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009038:	4b76      	ldr	r3, [pc, #472]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0f0      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d105      	bne.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009058:	2b00      	cmp	r3, #0
 800905a:	d079      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800905c:	4b6e      	ldr	r3, [pc, #440]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009062:	f7fa fcff 	bl	8003a64 <HAL_GetTick>
 8009066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009068:	e008      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800906a:	f7fa fcfb 	bl	8003a64 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e109      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800907c:	4b65      	ldr	r3, [pc, #404]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009088:	d0ef      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d020      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009096:	4b5f      	ldr	r3, [pc, #380]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800909c:	0f1b      	lsrs	r3, r3, #28
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	019a      	lsls	r2, r3, #6
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	061b      	lsls	r3, r3, #24
 80090b0:	431a      	orrs	r2, r3
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	071b      	lsls	r3, r3, #28
 80090b6:	4957      	ldr	r1, [pc, #348]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090be:	4b55      	ldr	r3, [pc, #340]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	021b      	lsls	r3, r3, #8
 80090d0:	4950      	ldr	r1, [pc, #320]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01e      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090e4:	4b4b      	ldr	r3, [pc, #300]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ea:	0e1b      	lsrs	r3, r3, #24
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	019a      	lsls	r2, r3, #6
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	061b      	lsls	r3, r3, #24
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	071b      	lsls	r3, r3, #28
 8009104:	4943      	ldr	r1, [pc, #268]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009106:	4313      	orrs	r3, r2
 8009108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800910c:	4b41      	ldr	r3, [pc, #260]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800910e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	493e      	ldr	r1, [pc, #248]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009122:	4b3d      	ldr	r3, [pc, #244]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009124:	2201      	movs	r2, #1
 8009126:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009128:	f7fa fc9c 	bl	8003a64 <HAL_GetTick>
 800912c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800912e:	e008      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009130:	f7fa fc98 	bl	8003a64 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d901      	bls.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e0a6      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009142:	4b34      	ldr	r3, [pc, #208]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800914a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800914e:	d1ef      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 808d 	beq.w	8009278 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	4b2c      	ldr	r3, [pc, #176]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009166:	4a2b      	ldr	r2, [pc, #172]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800916c:	6413      	str	r3, [r2, #64]	; 0x40
 800916e:	4b29      	ldr	r3, [pc, #164]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800917a:	4b28      	ldr	r3, [pc, #160]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a27      	ldr	r2, [pc, #156]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009184:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009186:	f7fa fc6d 	bl	8003a64 <HAL_GetTick>
 800918a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800918c:	e008      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800918e:	f7fa fc69 	bl	8003a64 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b02      	cmp	r3, #2
 800919a:	d901      	bls.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e077      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80091a0:	4b1e      	ldr	r3, [pc, #120]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0f0      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80091ac:	4b19      	ldr	r3, [pc, #100]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d039      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d032      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ca:	4b12      	ldr	r3, [pc, #72]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091d4:	4b12      	ldr	r3, [pc, #72]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091da:	4b11      	ldr	r3, [pc, #68]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80091e0:	4a0c      	ldr	r2, [pc, #48]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d11e      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80091f2:	f7fa fc37 	bl	8003a64 <HAL_GetTick>
 80091f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091f8:	e014      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091fa:	f7fa fc33 	bl	8003a64 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	f241 3288 	movw	r2, #5000	; 0x1388
 8009208:	4293      	cmp	r3, r2
 800920a:	d90b      	bls.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e03f      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009210:	42470068 	.word	0x42470068
 8009214:	40023800 	.word	0x40023800
 8009218:	42470070 	.word	0x42470070
 800921c:	40007000 	.word	0x40007000
 8009220:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009224:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0e4      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800923c:	d10d      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800923e:	4b16      	ldr	r3, [pc, #88]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800924e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009252:	4911      	ldr	r1, [pc, #68]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009254:	4313      	orrs	r3, r2
 8009256:	608b      	str	r3, [r1, #8]
 8009258:	e005      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	4a0e      	ldr	r2, [pc, #56]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009260:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009264:	6093      	str	r3, [r2, #8]
 8009266:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009272:	4909      	ldr	r1, [pc, #36]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009274:	4313      	orrs	r3, r2
 8009276:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800928a:	4b04      	ldr	r3, [pc, #16]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800928c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40023800 	.word	0x40023800
 800929c:	424711e0 	.word	0x424711e0

080092a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e025      	b.n	8009300 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d106      	bne.n	80092ce <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7f8 fee1 	bl	8002090 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3304      	adds	r3, #4
 80092de:	4619      	mov	r1, r3
 80092e0:	4610      	mov	r0, r2
 80092e2:	f002 f9bf 	bl	800b664 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	f002 fa2a 	bl	800b74a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d101      	bne.n	8009324 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
 8009322:	e018      	b.n	8009356 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	4618      	mov	r0, r3
 8009336:	f002 fa87 	bl	800b848 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d104      	bne.n	800934c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2205      	movs	r2, #5
 8009346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800934a:	e003      	b.n	8009354 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d101      	bne.n	8009378 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009374:	2302      	movs	r3, #2
 8009376:	e00e      	b.n	8009396 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f002 fa9a 	bl	800b8c0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e07b      	b.n	80094a8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d108      	bne.n	80093ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093c0:	d009      	beq.n	80093d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	61da      	str	r2, [r3, #28]
 80093c8:	e005      	b.n	80093d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7f8 fc77 	bl	8001ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800940c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945a:	ea42 0103 	orr.w	r1, r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	f003 0104 	and.w	r1, r3, #4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	f003 0210 	and.w	r2, r3, #16
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69da      	ldr	r2, [r3, #28]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e01a      	b.n	80094f8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7f8 fc4a 	bl	8001d74 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_SPI_Transmit+0x22>
 800951e:	2302      	movs	r3, #2
 8009520:	e126      	b.n	8009770 <HAL_SPI_Transmit+0x270>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800952a:	f7fa fa9b 	bl	8003a64 <HAL_GetTick>
 800952e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	d002      	beq.n	8009546 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009540:	2302      	movs	r3, #2
 8009542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009544:	e10b      	b.n	800975e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <HAL_SPI_Transmit+0x52>
 800954c:	88fb      	ldrh	r3, [r7, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d102      	bne.n	8009558 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009556:	e102      	b.n	800975e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2203      	movs	r2, #3
 800955c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	88fa      	ldrh	r2, [r7, #6]
 8009576:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800959e:	d10f      	bne.n	80095c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ca:	2b40      	cmp	r3, #64	; 0x40
 80095cc:	d007      	beq.n	80095de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e6:	d14b      	bne.n	8009680 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <HAL_SPI_Transmit+0xf6>
 80095f0:	8afb      	ldrh	r3, [r7, #22]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d13e      	bne.n	8009674 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	881a      	ldrh	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009606:	1c9a      	adds	r2, r3, #2
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009610:	b29b      	uxth	r3, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	b29a      	uxth	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800961a:	e02b      	b.n	8009674 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b02      	cmp	r3, #2
 8009628:	d112      	bne.n	8009650 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	881a      	ldrh	r2, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963a:	1c9a      	adds	r2, r3, #2
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	86da      	strh	r2, [r3, #54]	; 0x36
 800964e:	e011      	b.n	8009674 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009650:	f7fa fa08 	bl	8003a64 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	429a      	cmp	r2, r3
 800965e:	d803      	bhi.n	8009668 <HAL_SPI_Transmit+0x168>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d102      	bne.n	800966e <HAL_SPI_Transmit+0x16e>
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009672:	e074      	b.n	800975e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009678:	b29b      	uxth	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1ce      	bne.n	800961c <HAL_SPI_Transmit+0x11c>
 800967e:	e04c      	b.n	800971a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_SPI_Transmit+0x18e>
 8009688:	8afb      	ldrh	r3, [r7, #22]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d140      	bne.n	8009710 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	330c      	adds	r3, #12
 8009698:	7812      	ldrb	r2, [r2, #0]
 800969a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80096b4:	e02c      	b.n	8009710 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d113      	bne.n	80096ec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80096ea:	e011      	b.n	8009710 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ec:	f7fa f9ba 	bl	8003a64 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d803      	bhi.n	8009704 <HAL_SPI_Transmit+0x204>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009702:	d102      	bne.n	800970a <HAL_SPI_Transmit+0x20a>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d102      	bne.n	8009710 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800970e:	e026      	b.n	800975e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1cd      	bne.n	80096b6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fbda 	bl	8009ed8 <SPI_EndRxTxTransaction>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2220      	movs	r2, #32
 800972e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009738:	2300      	movs	r3, #0
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	613b      	str	r3, [r7, #16]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	77fb      	strb	r3, [r7, #31]
 800975a:	e000      	b.n	800975e <HAL_SPI_Transmit+0x25e>
  }

error:
 800975c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800976e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	4613      	mov	r3, r2
 8009786:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009794:	d112      	bne.n	80097bc <HAL_SPI_Receive+0x44>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10e      	bne.n	80097bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2204      	movs	r2, #4
 80097a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097a6:	88fa      	ldrh	r2, [r7, #6]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	4613      	mov	r3, r2
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 f8f1 	bl	800999a <HAL_SPI_TransmitReceive>
 80097b8:	4603      	mov	r3, r0
 80097ba:	e0ea      	b.n	8009992 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d101      	bne.n	80097ca <HAL_SPI_Receive+0x52>
 80097c6:	2302      	movs	r3, #2
 80097c8:	e0e3      	b.n	8009992 <HAL_SPI_Receive+0x21a>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097d2:	f7fa f947 	bl	8003a64 <HAL_GetTick>
 80097d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d002      	beq.n	80097ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80097e4:	2302      	movs	r3, #2
 80097e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097e8:	e0ca      	b.n	8009980 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_SPI_Receive+0x7e>
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097fa:	e0c1      	b.n	8009980 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2204      	movs	r2, #4
 8009800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	88fa      	ldrh	r2, [r7, #6]
 8009814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	88fa      	ldrh	r2, [r7, #6]
 800981a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009842:	d10f      	bne.n	8009864 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009862:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d007      	beq.n	8009882 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009880:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d162      	bne.n	8009950 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800988a:	e02e      	b.n	80098ea <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b01      	cmp	r3, #1
 8009898:	d115      	bne.n	80098c6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f103 020c 	add.w	r2, r3, #12
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	3b01      	subs	r3, #1
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098c4:	e011      	b.n	80098ea <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098c6:	f7fa f8cd 	bl	8003a64 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d803      	bhi.n	80098de <HAL_SPI_Receive+0x166>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d102      	bne.n	80098e4 <HAL_SPI_Receive+0x16c>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098e8:	e04a      	b.n	8009980 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1cb      	bne.n	800988c <HAL_SPI_Receive+0x114>
 80098f4:	e031      	b.n	800995a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b01      	cmp	r3, #1
 8009902:	d113      	bne.n	800992c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	b292      	uxth	r2, r2
 8009910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	1c9a      	adds	r2, r3, #2
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	b29a      	uxth	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800992a:	e011      	b.n	8009950 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800992c:	f7fa f89a 	bl	8003a64 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d803      	bhi.n	8009944 <HAL_SPI_Receive+0x1cc>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d102      	bne.n	800994a <HAL_SPI_Receive+0x1d2>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d102      	bne.n	8009950 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800994e:	e017      	b.n	8009980 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1cd      	bne.n	80098f6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fa54 	bl	8009e0c <SPI_EndRxTransaction>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2220      	movs	r2, #32
 800996e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
 800997c:	e000      	b.n	8009980 <HAL_SPI_Receive+0x208>
  }

error :
 800997e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b08c      	sub	sp, #48	; 0x30
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099a8:	2301      	movs	r3, #1
 80099aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d101      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x26>
 80099bc:	2302      	movs	r3, #2
 80099be:	e18a      	b.n	8009cd6 <HAL_SPI_TransmitReceive+0x33c>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099c8:	f7fa f84c 	bl	8003a64 <HAL_GetTick>
 80099cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80099de:	887b      	ldrh	r3, [r7, #2]
 80099e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d00f      	beq.n	8009a0a <HAL_SPI_TransmitReceive+0x70>
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f0:	d107      	bne.n	8009a02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <HAL_SPI_TransmitReceive+0x68>
 80099fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d003      	beq.n	8009a0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a02:	2302      	movs	r3, #2
 8009a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a08:	e15b      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x82>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x82>
 8009a16:	887b      	ldrh	r3, [r7, #2]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d103      	bne.n	8009a24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a22:	e14e      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d003      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2205      	movs	r2, #5
 8009a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	887a      	ldrh	r2, [r7, #2]
 8009a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	887a      	ldrh	r2, [r7, #2]
 8009a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	887a      	ldrh	r2, [r7, #2]
 8009a5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	887a      	ldrh	r2, [r7, #2]
 8009a60:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b40      	cmp	r3, #64	; 0x40
 8009a7a:	d007      	beq.n	8009a8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a94:	d178      	bne.n	8009b88 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <HAL_SPI_TransmitReceive+0x10a>
 8009a9e:	8b7b      	ldrh	r3, [r7, #26]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d166      	bne.n	8009b72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	881a      	ldrh	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ac8:	e053      	b.n	8009b72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d11b      	bne.n	8009b10 <HAL_SPI_TransmitReceive+0x176>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d016      	beq.n	8009b10 <HAL_SPI_TransmitReceive+0x176>
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d113      	bne.n	8009b10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aec:	881a      	ldrh	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	1c9a      	adds	r2, r3, #2
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d119      	bne.n	8009b52 <HAL_SPI_TransmitReceive+0x1b8>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d014      	beq.n	8009b52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	b292      	uxth	r2, r2
 8009b34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	1c9a      	adds	r2, r3, #2
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b52:	f7f9 ff87 	bl	8003a64 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d807      	bhi.n	8009b72 <HAL_SPI_TransmitReceive+0x1d8>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b68:	d003      	beq.n	8009b72 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b70:	e0a7      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1a6      	bne.n	8009aca <HAL_SPI_TransmitReceive+0x130>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1a1      	bne.n	8009aca <HAL_SPI_TransmitReceive+0x130>
 8009b86:	e07c      	b.n	8009c82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <HAL_SPI_TransmitReceive+0x1fc>
 8009b90:	8b7b      	ldrh	r3, [r7, #26]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d16b      	bne.n	8009c6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	7812      	ldrb	r2, [r2, #0]
 8009ba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bbc:	e057      	b.n	8009c6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d11c      	bne.n	8009c06 <HAL_SPI_TransmitReceive+0x26c>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d017      	beq.n	8009c06 <HAL_SPI_TransmitReceive+0x26c>
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d114      	bne.n	8009c06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d119      	bne.n	8009c48 <HAL_SPI_TransmitReceive+0x2ae>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d014      	beq.n	8009c48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c44:	2301      	movs	r3, #1
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c48:	f7f9 ff0c 	bl	8003a64 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d803      	bhi.n	8009c60 <HAL_SPI_TransmitReceive+0x2c6>
 8009c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5e:	d102      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x2cc>
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d103      	bne.n	8009c6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c6c:	e029      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1a2      	bne.n	8009bbe <HAL_SPI_TransmitReceive+0x224>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d19d      	bne.n	8009bbe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 f926 	bl	8009ed8 <SPI_EndRxTxTransaction>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009c9e:	e010      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ca8:	2300      	movs	r3, #0
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	e000      	b.n	8009cc2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009cc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3730      	adds	r7, #48	; 0x30
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cec:	b2db      	uxtb	r3, r3
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
	...

08009cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d0c:	f7f9 feaa 	bl	8003a64 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	4413      	add	r3, r2
 8009d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d1c:	f7f9 fea2 	bl	8003a64 <HAL_GetTick>
 8009d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d22:	4b39      	ldr	r3, [pc, #228]	; (8009e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	015b      	lsls	r3, r3, #5
 8009d28:	0d1b      	lsrs	r3, r3, #20
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	fb02 f303 	mul.w	r3, r2, r3
 8009d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d32:	e054      	b.n	8009dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3a:	d050      	beq.n	8009dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d3c:	f7f9 fe92 	bl	8003a64 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d902      	bls.n	8009d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d13d      	bne.n	8009dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d6a:	d111      	bne.n	8009d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d74:	d004      	beq.n	8009d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d7e:	d107      	bne.n	8009d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d98:	d10f      	bne.n	8009dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e017      	b.n	8009dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	4013      	ands	r3, r2
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	bf0c      	ite	eq
 8009dee:	2301      	moveq	r3, #1
 8009df0:	2300      	movne	r3, #0
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d19b      	bne.n	8009d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000034 	.word	0x20000034

08009e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e20:	d111      	bne.n	8009e46 <SPI_EndRxTransaction+0x3a>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e2a:	d004      	beq.n	8009e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e34:	d107      	bne.n	8009e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e4e:	d12a      	bne.n	8009ea6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e58:	d012      	beq.n	8009e80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2200      	movs	r2, #0
 8009e62:	2180      	movs	r1, #128	; 0x80
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff ff49 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d02d      	beq.n	8009ecc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e74:	f043 0220 	orr.w	r2, r3, #32
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e026      	b.n	8009ece <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2200      	movs	r2, #0
 8009e88:	2101      	movs	r1, #1
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f7ff ff36 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d01a      	beq.n	8009ecc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9a:	f043 0220 	orr.w	r2, r3, #32
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e013      	b.n	8009ece <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2200      	movs	r2, #0
 8009eae:	2101      	movs	r1, #1
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7ff ff23 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec0:	f043 0220 	orr.w	r2, r3, #32
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e000      	b.n	8009ece <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ee4:	4b1b      	ldr	r3, [pc, #108]	; (8009f54 <SPI_EndRxTxTransaction+0x7c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1b      	ldr	r2, [pc, #108]	; (8009f58 <SPI_EndRxTxTransaction+0x80>)
 8009eea:	fba2 2303 	umull	r2, r3, r2, r3
 8009eee:	0d5b      	lsrs	r3, r3, #21
 8009ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f02:	d112      	bne.n	8009f2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2180      	movs	r1, #128	; 0x80
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7ff fef4 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d016      	beq.n	8009f48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1e:	f043 0220 	orr.w	r2, r3, #32
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e00f      	b.n	8009f4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f40:	2b80      	cmp	r3, #128	; 0x80
 8009f42:	d0f2      	beq.n	8009f2a <SPI_EndRxTxTransaction+0x52>
 8009f44:	e000      	b.n	8009f48 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f46:	bf00      	nop
  }

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000034 	.word	0x20000034
 8009f58:	165e9f81 	.word	0x165e9f81

08009f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e041      	b.n	8009ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7f7 ff14 	bl	8001db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3304      	adds	r3, #4
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	f000 fa96 	bl	800a4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d001      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e04e      	b.n	800a0b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2202      	movs	r2, #2
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a23      	ldr	r2, [pc, #140]	; (800a0c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d022      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d01d      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1f      	ldr	r2, [pc, #124]	; (800a0c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d018      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1e      	ldr	r2, [pc, #120]	; (800a0c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d013      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00e      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1b      	ldr	r2, [pc, #108]	; (800a0d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d009      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d004      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x80>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d111      	bne.n	800a0a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b06      	cmp	r3, #6
 800a08c:	d010      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0201 	orr.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09e:	e007      	b.n	800a0b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0201 	orr.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40000400 	.word	0x40000400
 800a0c8:	40000800 	.word	0x40000800
 800a0cc:	40000c00 	.word	0x40000c00
 800a0d0:	40010400 	.word	0x40010400
 800a0d4:	40014000 	.word	0x40014000
 800a0d8:	40001800 	.word	0x40001800

0800a0dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d122      	bne.n	800a138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d11b      	bne.n	800a138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f06f 0202 	mvn.w	r2, #2
 800a108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f9b5 	bl	800a48e <HAL_TIM_IC_CaptureCallback>
 800a124:	e005      	b.n	800a132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9a7 	bl	800a47a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f9b8 	bl	800a4a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	f003 0304 	and.w	r3, r3, #4
 800a142:	2b04      	cmp	r3, #4
 800a144:	d122      	bne.n	800a18c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b04      	cmp	r3, #4
 800a152:	d11b      	bne.n	800a18c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f06f 0204 	mvn.w	r2, #4
 800a15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2202      	movs	r2, #2
 800a162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f98b 	bl	800a48e <HAL_TIM_IC_CaptureCallback>
 800a178:	e005      	b.n	800a186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f97d 	bl	800a47a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f98e 	bl	800a4a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b08      	cmp	r3, #8
 800a198:	d122      	bne.n	800a1e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f003 0308 	and.w	r3, r3, #8
 800a1a4:	2b08      	cmp	r3, #8
 800a1a6:	d11b      	bne.n	800a1e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f06f 0208 	mvn.w	r2, #8
 800a1b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2204      	movs	r2, #4
 800a1b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f961 	bl	800a48e <HAL_TIM_IC_CaptureCallback>
 800a1cc:	e005      	b.n	800a1da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f953 	bl	800a47a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f964 	bl	800a4a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f003 0310 	and.w	r3, r3, #16
 800a1ea:	2b10      	cmp	r3, #16
 800a1ec:	d122      	bne.n	800a234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	f003 0310 	and.w	r3, r3, #16
 800a1f8:	2b10      	cmp	r3, #16
 800a1fa:	d11b      	bne.n	800a234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f06f 0210 	mvn.w	r2, #16
 800a204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2208      	movs	r2, #8
 800a20a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f937 	bl	800a48e <HAL_TIM_IC_CaptureCallback>
 800a220:	e005      	b.n	800a22e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f929 	bl	800a47a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f93a 	bl	800a4a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d10e      	bne.n	800a260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d107      	bne.n	800a260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f06f 0201 	mvn.w	r2, #1
 800a258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7f7 fa80 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26a:	2b80      	cmp	r3, #128	; 0x80
 800a26c:	d10e      	bne.n	800a28c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a278:	2b80      	cmp	r3, #128	; 0x80
 800a27a:	d107      	bne.n	800a28c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fae0 	bl	800a84c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d10e      	bne.n	800a2b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d107      	bne.n	800a2b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f8ff 	bl	800a4b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	f003 0320 	and.w	r3, r3, #32
 800a2c2:	2b20      	cmp	r3, #32
 800a2c4:	d10e      	bne.n	800a2e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d107      	bne.n	800a2e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f06f 0220 	mvn.w	r2, #32
 800a2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 faaa 	bl	800a838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_TIM_ConfigClockSource+0x1c>
 800a304:	2302      	movs	r3, #2
 800a306:	e0b4      	b.n	800a472 <HAL_TIM_ConfigClockSource+0x186>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a32e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a340:	d03e      	beq.n	800a3c0 <HAL_TIM_ConfigClockSource+0xd4>
 800a342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a346:	f200 8087 	bhi.w	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34e:	f000 8086 	beq.w	800a45e <HAL_TIM_ConfigClockSource+0x172>
 800a352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a356:	d87f      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a358:	2b70      	cmp	r3, #112	; 0x70
 800a35a:	d01a      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0xa6>
 800a35c:	2b70      	cmp	r3, #112	; 0x70
 800a35e:	d87b      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a360:	2b60      	cmp	r3, #96	; 0x60
 800a362:	d050      	beq.n	800a406 <HAL_TIM_ConfigClockSource+0x11a>
 800a364:	2b60      	cmp	r3, #96	; 0x60
 800a366:	d877      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a368:	2b50      	cmp	r3, #80	; 0x50
 800a36a:	d03c      	beq.n	800a3e6 <HAL_TIM_ConfigClockSource+0xfa>
 800a36c:	2b50      	cmp	r3, #80	; 0x50
 800a36e:	d873      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a370:	2b40      	cmp	r3, #64	; 0x40
 800a372:	d058      	beq.n	800a426 <HAL_TIM_ConfigClockSource+0x13a>
 800a374:	2b40      	cmp	r3, #64	; 0x40
 800a376:	d86f      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a378:	2b30      	cmp	r3, #48	; 0x30
 800a37a:	d064      	beq.n	800a446 <HAL_TIM_ConfigClockSource+0x15a>
 800a37c:	2b30      	cmp	r3, #48	; 0x30
 800a37e:	d86b      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a380:	2b20      	cmp	r3, #32
 800a382:	d060      	beq.n	800a446 <HAL_TIM_ConfigClockSource+0x15a>
 800a384:	2b20      	cmp	r3, #32
 800a386:	d867      	bhi.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d05c      	beq.n	800a446 <HAL_TIM_ConfigClockSource+0x15a>
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d05a      	beq.n	800a446 <HAL_TIM_ConfigClockSource+0x15a>
 800a390:	e062      	b.n	800a458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	6899      	ldr	r1, [r3, #8]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f000 f9ad 	bl	800a700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	609a      	str	r2, [r3, #8]
      break;
 800a3be:	e04f      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	6899      	ldr	r1, [r3, #8]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f000 f996 	bl	800a700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3e2:	609a      	str	r2, [r3, #8]
      break;
 800a3e4:	e03c      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	6859      	ldr	r1, [r3, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f000 f90a 	bl	800a60c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2150      	movs	r1, #80	; 0x50
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 f963 	bl	800a6ca <TIM_ITRx_SetConfig>
      break;
 800a404:	e02c      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	6859      	ldr	r1, [r3, #4]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	461a      	mov	r2, r3
 800a414:	f000 f929 	bl	800a66a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2160      	movs	r1, #96	; 0x60
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 f953 	bl	800a6ca <TIM_ITRx_SetConfig>
      break;
 800a424:	e01c      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	6859      	ldr	r1, [r3, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	461a      	mov	r2, r3
 800a434:	f000 f8ea 	bl	800a60c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2140      	movs	r1, #64	; 0x40
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 f943 	bl	800a6ca <TIM_ITRx_SetConfig>
      break;
 800a444:	e00c      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f000 f93a 	bl	800a6ca <TIM_ITRx_SetConfig>
      break;
 800a456:	e003      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]
      break;
 800a45c:	e000      	b.n	800a460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a45e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a40      	ldr	r2, [pc, #256]	; (800a5e0 <TIM_Base_SetConfig+0x114>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d013      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ea:	d00f      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a3d      	ldr	r2, [pc, #244]	; (800a5e4 <TIM_Base_SetConfig+0x118>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00b      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a3c      	ldr	r2, [pc, #240]	; (800a5e8 <TIM_Base_SetConfig+0x11c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d007      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a3b      	ldr	r2, [pc, #236]	; (800a5ec <TIM_Base_SetConfig+0x120>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d003      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a3a      	ldr	r2, [pc, #232]	; (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d108      	bne.n	800a51e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a2f      	ldr	r2, [pc, #188]	; (800a5e0 <TIM_Base_SetConfig+0x114>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d02b      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a52c:	d027      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a2c      	ldr	r2, [pc, #176]	; (800a5e4 <TIM_Base_SetConfig+0x118>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d023      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2b      	ldr	r2, [pc, #172]	; (800a5e8 <TIM_Base_SetConfig+0x11c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d01f      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a2a      	ldr	r2, [pc, #168]	; (800a5ec <TIM_Base_SetConfig+0x120>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d01b      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a29      	ldr	r2, [pc, #164]	; (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d017      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a28      	ldr	r2, [pc, #160]	; (800a5f4 <TIM_Base_SetConfig+0x128>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a27      	ldr	r2, [pc, #156]	; (800a5f8 <TIM_Base_SetConfig+0x12c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00f      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a26      	ldr	r2, [pc, #152]	; (800a5fc <TIM_Base_SetConfig+0x130>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00b      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a25      	ldr	r2, [pc, #148]	; (800a600 <TIM_Base_SetConfig+0x134>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d007      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a24      	ldr	r2, [pc, #144]	; (800a604 <TIM_Base_SetConfig+0x138>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d003      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a23      	ldr	r2, [pc, #140]	; (800a608 <TIM_Base_SetConfig+0x13c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d108      	bne.n	800a590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a0a      	ldr	r2, [pc, #40]	; (800a5e0 <TIM_Base_SetConfig+0x114>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d003      	beq.n	800a5c4 <TIM_Base_SetConfig+0xf8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d103      	bne.n	800a5cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	615a      	str	r2, [r3, #20]
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40000400 	.word	0x40000400
 800a5e8:	40000800 	.word	0x40000800
 800a5ec:	40000c00 	.word	0x40000c00
 800a5f0:	40010400 	.word	0x40010400
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800
 800a600:	40001800 	.word	0x40001800
 800a604:	40001c00 	.word	0x40001c00
 800a608:	40002000 	.word	0x40002000

0800a60c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f023 0201 	bic.w	r2, r3, #1
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	4313      	orrs	r3, r2
 800a640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f023 030a 	bic.w	r3, r3, #10
 800a648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4313      	orrs	r3, r2
 800a650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	621a      	str	r2, [r3, #32]
}
 800a65e:	bf00      	nop
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b087      	sub	sp, #28
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f023 0210 	bic.w	r2, r3, #16
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	031b      	lsls	r3, r3, #12
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	011b      	lsls	r3, r3, #4
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	621a      	str	r2, [r3, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	371c      	adds	r7, #28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b085      	sub	sp, #20
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	f043 0307 	orr.w	r3, r3, #7
 800a6ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	609a      	str	r2, [r3, #8]
}
 800a6f4:	bf00      	nop
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a71a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	021a      	lsls	r2, r3, #8
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	431a      	orrs	r2, r3
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	4313      	orrs	r3, r2
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	609a      	str	r2, [r3, #8]
}
 800a734:	bf00      	nop
 800a736:	371c      	adds	r7, #28
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a754:	2302      	movs	r3, #2
 800a756:	e05a      	b.n	800a80e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a21      	ldr	r2, [pc, #132]	; (800a81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d022      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a4:	d01d      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	; (800a820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d018      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1b      	ldr	r2, [pc, #108]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d013      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a1a      	ldr	r2, [pc, #104]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d00e      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a18      	ldr	r2, [pc, #96]	; (800a82c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d009      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a17      	ldr	r2, [pc, #92]	; (800a830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d004      	beq.n	800a7e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a15      	ldr	r2, [pc, #84]	; (800a834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d10c      	bne.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40010000 	.word	0x40010000
 800a820:	40000400 	.word	0x40000400
 800a824:	40000800 	.word	0x40000800
 800a828:	40000c00 	.word	0x40000c00
 800a82c:	40010400 	.word	0x40010400
 800a830:	40014000 	.word	0x40014000
 800a834:	40001800 	.word	0x40001800

0800a838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e03f      	b.n	800a8f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7f7 fad0 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2224      	movs	r2, #36	; 0x24
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fd15 	bl	800b2d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	695a      	ldr	r2, [r3, #20]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	4613      	mov	r3, r2
 800a906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b20      	cmp	r3, #32
 800a912:	d130      	bne.n	800a976 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <HAL_UART_Transmit_IT+0x26>
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e029      	b.n	800a978 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d101      	bne.n	800a932 <HAL_UART_Transmit_IT+0x38>
 800a92e:	2302      	movs	r3, #2
 800a930:	e022      	b.n	800a978 <HAL_UART_Transmit_IT+0x7e>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2221      	movs	r2, #33	; 0x21
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a970:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	e000      	b.n	800a978 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a976:	2302      	movs	r3, #2
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d11d      	bne.n	800a9da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <HAL_UART_Receive_IT+0x26>
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e016      	b.n	800a9dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d101      	bne.n	800a9bc <HAL_UART_Receive_IT+0x38>
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e00f      	b.n	800a9dc <HAL_UART_Receive_IT+0x58>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 faab 	bl	800af2c <UART_Start_Receive_IT>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	e000      	b.n	800a9dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a9da:	2302      	movs	r3, #2
  }
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b0ba      	sub	sp, #232	; 0xe8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aa22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10f      	bne.n	800aa4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2e:	f003 0320 	and.w	r3, r3, #32
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <HAL_UART_IRQHandler+0x66>
 800aa36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fb8b 	bl	800b15e <UART_Receive_IT>
      return;
 800aa48:	e256      	b.n	800aef8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80de 	beq.w	800ac10 <HAL_UART_IRQHandler+0x22c>
 800aa54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d106      	bne.n	800aa6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 80d1 	beq.w	800ac10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00b      	beq.n	800aa92 <HAL_UART_IRQHandler+0xae>
 800aa7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	f043 0201 	orr.w	r2, r3, #1
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa96:	f003 0304 	and.w	r3, r3, #4
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <HAL_UART_IRQHandler+0xd2>
 800aa9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d005      	beq.n	800aab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	f043 0202 	orr.w	r2, r3, #2
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaba:	f003 0302 	and.w	r3, r3, #2
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00b      	beq.n	800aada <HAL_UART_IRQHandler+0xf6>
 800aac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d005      	beq.n	800aada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	f043 0204 	orr.w	r2, r3, #4
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aade:	f003 0308 	and.w	r3, r3, #8
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d011      	beq.n	800ab0a <HAL_UART_IRQHandler+0x126>
 800aae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaea:	f003 0320 	and.w	r3, r3, #32
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aaf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d005      	beq.n	800ab0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f043 0208 	orr.w	r2, r3, #8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 81ed 	beq.w	800aeee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab18:	f003 0320 	and.w	r3, r3, #32
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d008      	beq.n	800ab32 <HAL_UART_IRQHandler+0x14e>
 800ab20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fb16 	bl	800b15e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	695b      	ldr	r3, [r3, #20]
 800ab38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3c:	2b40      	cmp	r3, #64	; 0x40
 800ab3e:	bf0c      	ite	eq
 800ab40:	2301      	moveq	r3, #1
 800ab42:	2300      	movne	r3, #0
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f003 0308 	and.w	r3, r3, #8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <HAL_UART_IRQHandler+0x17a>
 800ab56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d04f      	beq.n	800abfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fa1e 	bl	800afa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	d141      	bne.n	800abf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3314      	adds	r3, #20
 800ab78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3314      	adds	r3, #20
 800ab9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800abae:	e841 2300 	strex	r3, r2, [r1]
 800abb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800abb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1d9      	bne.n	800ab72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d013      	beq.n	800abee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	4a7d      	ldr	r2, [pc, #500]	; (800adc0 <HAL_UART_IRQHandler+0x3dc>)
 800abcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f9 ffb4 	bl	8004b40 <HAL_DMA_Abort_IT>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d016      	beq.n	800ac0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abe8:	4610      	mov	r0, r2
 800abea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abec:	e00e      	b.n	800ac0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f986 	bl	800af00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf4:	e00a      	b.n	800ac0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f982 	bl	800af00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abfc:	e006      	b.n	800ac0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f97e 	bl	800af00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ac0a:	e170      	b.n	800aeee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac0c:	bf00      	nop
    return;
 800ac0e:	e16e      	b.n	800aeee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	f040 814a 	bne.w	800aeae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac1e:	f003 0310 	and.w	r3, r3, #16
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8143 	beq.w	800aeae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ac28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac2c:	f003 0310 	and.w	r3, r3, #16
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 813c 	beq.w	800aeae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac36:	2300      	movs	r3, #0
 800ac38:	60bb      	str	r3, [r7, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60bb      	str	r3, [r7, #8]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	60bb      	str	r3, [r7, #8]
 800ac4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac56:	2b40      	cmp	r3, #64	; 0x40
 800ac58:	f040 80b4 	bne.w	800adc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8140 	beq.w	800aef2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	f080 8139 	bcs.w	800aef2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac92:	f000 8088 	beq.w	800ada6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	330c      	adds	r3, #12
 800ac9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800acac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	330c      	adds	r3, #12
 800acbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800acc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800acc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800acce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1d9      	bne.n	800ac96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3314      	adds	r3, #20
 800ace8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acf4:	f023 0301 	bic.w	r3, r3, #1
 800acf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3314      	adds	r3, #20
 800ad02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e1      	bne.n	800ace2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3314      	adds	r3, #20
 800ad24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	3314      	adds	r3, #20
 800ad3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad42:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e3      	bne.n	800ad1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	330c      	adds	r3, #12
 800ad6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad76:	f023 0310 	bic.w	r3, r3, #16
 800ad7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	330c      	adds	r3, #12
 800ad84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad88:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e3      	bne.n	800ad64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f9 fe5d 	bl	8004a60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adae:	b29b      	uxth	r3, r3
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f8ac 	bl	800af14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800adbc:	e099      	b.n	800aef2 <HAL_UART_IRQHandler+0x50e>
 800adbe:	bf00      	nop
 800adc0:	0800b067 	.word	0x0800b067
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adcc:	b29b      	uxth	r3, r3
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800add8:	b29b      	uxth	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 808b 	beq.w	800aef6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ade0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8086 	beq.w	800aef6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	330c      	adds	r3, #12
 800adf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	330c      	adds	r3, #12
 800ae0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ae0e:	647a      	str	r2, [r7, #68]	; 0x44
 800ae10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e3      	bne.n	800adea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3314      	adds	r3, #20
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	623b      	str	r3, [r7, #32]
   return(result);
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	f023 0301 	bic.w	r3, r3, #1
 800ae38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3314      	adds	r3, #20
 800ae42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae46:	633a      	str	r2, [r7, #48]	; 0x30
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e3      	bne.n	800ae22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f023 0310 	bic.w	r3, r3, #16
 800ae7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	330c      	adds	r3, #12
 800ae88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae8c:	61fa      	str	r2, [r7, #28]
 800ae8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae90:	69b9      	ldr	r1, [r7, #24]
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	e841 2300 	strex	r3, r2, [r1]
 800ae98:	617b      	str	r3, [r7, #20]
   return(result);
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1e3      	bne.n	800ae68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f834 	bl	800af14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aeac:	e023      	b.n	800aef6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aeae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <HAL_UART_IRQHandler+0x4ea>
 800aeba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f8e1 	bl	800b08e <UART_Transmit_IT>
    return;
 800aecc:	e014      	b.n	800aef8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00e      	beq.n	800aef8 <HAL_UART_IRQHandler+0x514>
 800aeda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d008      	beq.n	800aef8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f921 	bl	800b12e <UART_EndTransmit_IT>
    return;
 800aeec:	e004      	b.n	800aef8 <HAL_UART_IRQHandler+0x514>
    return;
 800aeee:	bf00      	nop
 800aef0:	e002      	b.n	800aef8 <HAL_UART_IRQHandler+0x514>
      return;
 800aef2:	bf00      	nop
 800aef4:	e000      	b.n	800aef8 <HAL_UART_IRQHandler+0x514>
      return;
 800aef6:	bf00      	nop
  }
}
 800aef8:	37e8      	adds	r7, #232	; 0xe8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop

0800af00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	88fa      	ldrh	r2, [r7, #6]
 800af44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	88fa      	ldrh	r2, [r7, #6]
 800af4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2222      	movs	r2, #34	; 0x22
 800af56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af70:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	695a      	ldr	r2, [r3, #20]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f042 0201 	orr.w	r2, r2, #1
 800af80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f042 0220 	orr.w	r2, r2, #32
 800af90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b095      	sub	sp, #84	; 0x54
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	330c      	adds	r3, #12
 800afae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb2:	e853 3f00 	ldrex	r3, [r3]
 800afb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	330c      	adds	r3, #12
 800afc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afc8:	643a      	str	r2, [r7, #64]	; 0x40
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afd0:	e841 2300 	strex	r3, r2, [r1]
 800afd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e5      	bne.n	800afa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3314      	adds	r3, #20
 800afe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	e853 3f00 	ldrex	r3, [r3]
 800afea:	61fb      	str	r3, [r7, #28]
   return(result);
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	f023 0301 	bic.w	r3, r3, #1
 800aff2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3314      	adds	r3, #20
 800affa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800affc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b004:	e841 2300 	strex	r3, r2, [r1]
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e5      	bne.n	800afdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b014:	2b01      	cmp	r3, #1
 800b016:	d119      	bne.n	800b04c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	330c      	adds	r3, #12
 800b01e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	60bb      	str	r3, [r7, #8]
   return(result);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f023 0310 	bic.w	r3, r3, #16
 800b02e:	647b      	str	r3, [r7, #68]	; 0x44
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	330c      	adds	r3, #12
 800b036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b038:	61ba      	str	r2, [r7, #24]
 800b03a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6979      	ldr	r1, [r7, #20]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	613b      	str	r3, [r7, #16]
   return(result);
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e5      	bne.n	800b018 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2220      	movs	r2, #32
 800b050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b05a:	bf00      	nop
 800b05c:	3754      	adds	r7, #84	; 0x54
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff ff3d 	bl	800af00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b086:	bf00      	nop
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b21      	cmp	r3, #33	; 0x21
 800b0a0:	d13e      	bne.n	800b120 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0aa:	d114      	bne.n	800b0d6 <UART_Transmit_IT+0x48>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d110      	bne.n	800b0d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	1c9a      	adds	r2, r3, #2
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	621a      	str	r2, [r3, #32]
 800b0d4:	e008      	b.n	800b0e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	1c59      	adds	r1, r3, #1
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6211      	str	r1, [r2, #32]
 800b0e0:	781a      	ldrb	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10f      	bne.n	800b11c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68da      	ldr	r2, [r3, #12]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b10a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68da      	ldr	r2, [r3, #12]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b11a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e000      	b.n	800b122 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b120:	2302      	movs	r3, #2
  }
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68da      	ldr	r2, [r3, #12]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b144:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2220      	movs	r2, #32
 800b14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7f5 fba2 	bl	8000898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b08c      	sub	sp, #48	; 0x30
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b22      	cmp	r3, #34	; 0x22
 800b170:	f040 80ab 	bne.w	800b2ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b17c:	d117      	bne.n	800b1ae <UART_Receive_IT+0x50>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d113      	bne.n	800b1ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b186:	2300      	movs	r3, #0
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	b29b      	uxth	r3, r3
 800b198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a6:	1c9a      	adds	r2, r3, #2
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	629a      	str	r2, [r3, #40]	; 0x28
 800b1ac:	e026      	b.n	800b1fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c0:	d007      	beq.n	800b1d2 <UART_Receive_IT+0x74>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <UART_Receive_IT+0x82>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1dc:	701a      	strb	r2, [r3, #0]
 800b1de:	e008      	b.n	800b1f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	b29b      	uxth	r3, r3
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	4619      	mov	r1, r3
 800b20a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d15a      	bne.n	800b2c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 0220 	bic.w	r2, r2, #32
 800b21e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b22e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	695a      	ldr	r2, [r3, #20]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0201 	bic.w	r2, r2, #1
 800b23e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2220      	movs	r2, #32
 800b244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d135      	bne.n	800b2bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	330c      	adds	r3, #12
 800b25c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	613b      	str	r3, [r7, #16]
   return(result);
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f023 0310 	bic.w	r3, r3, #16
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	330c      	adds	r3, #12
 800b274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b276:	623a      	str	r2, [r7, #32]
 800b278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	69f9      	ldr	r1, [r7, #28]
 800b27c:	6a3a      	ldr	r2, [r7, #32]
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	61bb      	str	r3, [r7, #24]
   return(result);
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e5      	bne.n	800b256 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b10      	cmp	r3, #16
 800b296:	d10a      	bne.n	800b2ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7ff fe2d 	bl	800af14 <HAL_UARTEx_RxEventCallback>
 800b2ba:	e002      	b.n	800b2c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7f5 faa3 	bl	8000808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e002      	b.n	800b2cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e000      	b.n	800b2cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b2ca:	2302      	movs	r3, #2
  }
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3730      	adds	r7, #48	; 0x30
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d8:	b09f      	sub	sp, #124	; 0x7c
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b2e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ea:	68d9      	ldr	r1, [r3, #12]
 800b2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	ea40 0301 	orr.w	r3, r0, r1
 800b2f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f8:	689a      	ldr	r2, [r3, #8]
 800b2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	431a      	orrs	r2, r3
 800b306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b318:	f021 010c 	bic.w	r1, r1, #12
 800b31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b322:	430b      	orrs	r3, r1
 800b324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b332:	6999      	ldr	r1, [r3, #24]
 800b334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	ea40 0301 	orr.w	r3, r0, r1
 800b33c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	4bc5      	ldr	r3, [pc, #788]	; (800b658 <UART_SetConfig+0x384>)
 800b344:	429a      	cmp	r2, r3
 800b346:	d004      	beq.n	800b352 <UART_SetConfig+0x7e>
 800b348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	4bc3      	ldr	r3, [pc, #780]	; (800b65c <UART_SetConfig+0x388>)
 800b34e:	429a      	cmp	r2, r3
 800b350:	d103      	bne.n	800b35a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b352:	f7fd fda1 	bl	8008e98 <HAL_RCC_GetPCLK2Freq>
 800b356:	6778      	str	r0, [r7, #116]	; 0x74
 800b358:	e002      	b.n	800b360 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b35a:	f7fd fd89 	bl	8008e70 <HAL_RCC_GetPCLK1Freq>
 800b35e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b368:	f040 80b6 	bne.w	800b4d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b36e:	461c      	mov	r4, r3
 800b370:	f04f 0500 	mov.w	r5, #0
 800b374:	4622      	mov	r2, r4
 800b376:	462b      	mov	r3, r5
 800b378:	1891      	adds	r1, r2, r2
 800b37a:	6439      	str	r1, [r7, #64]	; 0x40
 800b37c:	415b      	adcs	r3, r3
 800b37e:	647b      	str	r3, [r7, #68]	; 0x44
 800b380:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b384:	1912      	adds	r2, r2, r4
 800b386:	eb45 0303 	adc.w	r3, r5, r3
 800b38a:	f04f 0000 	mov.w	r0, #0
 800b38e:	f04f 0100 	mov.w	r1, #0
 800b392:	00d9      	lsls	r1, r3, #3
 800b394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b398:	00d0      	lsls	r0, r2, #3
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	1911      	adds	r1, r2, r4
 800b3a0:	6639      	str	r1, [r7, #96]	; 0x60
 800b3a2:	416b      	adcs	r3, r5
 800b3a4:	667b      	str	r3, [r7, #100]	; 0x64
 800b3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f04f 0300 	mov.w	r3, #0
 800b3b0:	1891      	adds	r1, r2, r2
 800b3b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3b4:	415b      	adcs	r3, r3
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b3c0:	f7f4 ff66 	bl	8000290 <__aeabi_uldivmod>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4ba5      	ldr	r3, [pc, #660]	; (800b660 <UART_SetConfig+0x38c>)
 800b3ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ce:	095b      	lsrs	r3, r3, #5
 800b3d0:	011e      	lsls	r6, r3, #4
 800b3d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3d4:	461c      	mov	r4, r3
 800b3d6:	f04f 0500 	mov.w	r5, #0
 800b3da:	4622      	mov	r2, r4
 800b3dc:	462b      	mov	r3, r5
 800b3de:	1891      	adds	r1, r2, r2
 800b3e0:	6339      	str	r1, [r7, #48]	; 0x30
 800b3e2:	415b      	adcs	r3, r3
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b3ea:	1912      	adds	r2, r2, r4
 800b3ec:	eb45 0303 	adc.w	r3, r5, r3
 800b3f0:	f04f 0000 	mov.w	r0, #0
 800b3f4:	f04f 0100 	mov.w	r1, #0
 800b3f8:	00d9      	lsls	r1, r3, #3
 800b3fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3fe:	00d0      	lsls	r0, r2, #3
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	1911      	adds	r1, r2, r4
 800b406:	65b9      	str	r1, [r7, #88]	; 0x58
 800b408:	416b      	adcs	r3, r5
 800b40a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b40c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	461a      	mov	r2, r3
 800b412:	f04f 0300 	mov.w	r3, #0
 800b416:	1891      	adds	r1, r2, r2
 800b418:	62b9      	str	r1, [r7, #40]	; 0x28
 800b41a:	415b      	adcs	r3, r3
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b41e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b422:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b426:	f7f4 ff33 	bl	8000290 <__aeabi_uldivmod>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4b8c      	ldr	r3, [pc, #560]	; (800b660 <UART_SetConfig+0x38c>)
 800b430:	fba3 1302 	umull	r1, r3, r3, r2
 800b434:	095b      	lsrs	r3, r3, #5
 800b436:	2164      	movs	r1, #100	; 0x64
 800b438:	fb01 f303 	mul.w	r3, r1, r3
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	3332      	adds	r3, #50	; 0x32
 800b442:	4a87      	ldr	r2, [pc, #540]	; (800b660 <UART_SetConfig+0x38c>)
 800b444:	fba2 2303 	umull	r2, r3, r2, r3
 800b448:	095b      	lsrs	r3, r3, #5
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b450:	441e      	add	r6, r3
 800b452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b454:	4618      	mov	r0, r3
 800b456:	f04f 0100 	mov.w	r1, #0
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	1894      	adds	r4, r2, r2
 800b460:	623c      	str	r4, [r7, #32]
 800b462:	415b      	adcs	r3, r3
 800b464:	627b      	str	r3, [r7, #36]	; 0x24
 800b466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b46a:	1812      	adds	r2, r2, r0
 800b46c:	eb41 0303 	adc.w	r3, r1, r3
 800b470:	f04f 0400 	mov.w	r4, #0
 800b474:	f04f 0500 	mov.w	r5, #0
 800b478:	00dd      	lsls	r5, r3, #3
 800b47a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b47e:	00d4      	lsls	r4, r2, #3
 800b480:	4622      	mov	r2, r4
 800b482:	462b      	mov	r3, r5
 800b484:	1814      	adds	r4, r2, r0
 800b486:	653c      	str	r4, [r7, #80]	; 0x50
 800b488:	414b      	adcs	r3, r1
 800b48a:	657b      	str	r3, [r7, #84]	; 0x54
 800b48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	461a      	mov	r2, r3
 800b492:	f04f 0300 	mov.w	r3, #0
 800b496:	1891      	adds	r1, r2, r2
 800b498:	61b9      	str	r1, [r7, #24]
 800b49a:	415b      	adcs	r3, r3
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b4a6:	f7f4 fef3 	bl	8000290 <__aeabi_uldivmod>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4b6c      	ldr	r3, [pc, #432]	; (800b660 <UART_SetConfig+0x38c>)
 800b4b0:	fba3 1302 	umull	r1, r3, r3, r2
 800b4b4:	095b      	lsrs	r3, r3, #5
 800b4b6:	2164      	movs	r1, #100	; 0x64
 800b4b8:	fb01 f303 	mul.w	r3, r1, r3
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	3332      	adds	r3, #50	; 0x32
 800b4c2:	4a67      	ldr	r2, [pc, #412]	; (800b660 <UART_SetConfig+0x38c>)
 800b4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c8:	095b      	lsrs	r3, r3, #5
 800b4ca:	f003 0207 	and.w	r2, r3, #7
 800b4ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4432      	add	r2, r6
 800b4d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4d6:	e0b9      	b.n	800b64c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4da:	461c      	mov	r4, r3
 800b4dc:	f04f 0500 	mov.w	r5, #0
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	1891      	adds	r1, r2, r2
 800b4e6:	6139      	str	r1, [r7, #16]
 800b4e8:	415b      	adcs	r3, r3
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b4f0:	1912      	adds	r2, r2, r4
 800b4f2:	eb45 0303 	adc.w	r3, r5, r3
 800b4f6:	f04f 0000 	mov.w	r0, #0
 800b4fa:	f04f 0100 	mov.w	r1, #0
 800b4fe:	00d9      	lsls	r1, r3, #3
 800b500:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b504:	00d0      	lsls	r0, r2, #3
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	eb12 0804 	adds.w	r8, r2, r4
 800b50e:	eb43 0905 	adc.w	r9, r3, r5
 800b512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4618      	mov	r0, r3
 800b518:	f04f 0100 	mov.w	r1, #0
 800b51c:	f04f 0200 	mov.w	r2, #0
 800b520:	f04f 0300 	mov.w	r3, #0
 800b524:	008b      	lsls	r3, r1, #2
 800b526:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b52a:	0082      	lsls	r2, r0, #2
 800b52c:	4640      	mov	r0, r8
 800b52e:	4649      	mov	r1, r9
 800b530:	f7f4 feae 	bl	8000290 <__aeabi_uldivmod>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	4b49      	ldr	r3, [pc, #292]	; (800b660 <UART_SetConfig+0x38c>)
 800b53a:	fba3 2302 	umull	r2, r3, r3, r2
 800b53e:	095b      	lsrs	r3, r3, #5
 800b540:	011e      	lsls	r6, r3, #4
 800b542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b544:	4618      	mov	r0, r3
 800b546:	f04f 0100 	mov.w	r1, #0
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	1894      	adds	r4, r2, r2
 800b550:	60bc      	str	r4, [r7, #8]
 800b552:	415b      	adcs	r3, r3
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b55a:	1812      	adds	r2, r2, r0
 800b55c:	eb41 0303 	adc.w	r3, r1, r3
 800b560:	f04f 0400 	mov.w	r4, #0
 800b564:	f04f 0500 	mov.w	r5, #0
 800b568:	00dd      	lsls	r5, r3, #3
 800b56a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b56e:	00d4      	lsls	r4, r2, #3
 800b570:	4622      	mov	r2, r4
 800b572:	462b      	mov	r3, r5
 800b574:	1814      	adds	r4, r2, r0
 800b576:	64bc      	str	r4, [r7, #72]	; 0x48
 800b578:	414b      	adcs	r3, r1
 800b57a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	f04f 0100 	mov.w	r1, #0
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	008b      	lsls	r3, r1, #2
 800b590:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b594:	0082      	lsls	r2, r0, #2
 800b596:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b59a:	f7f4 fe79 	bl	8000290 <__aeabi_uldivmod>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4b2f      	ldr	r3, [pc, #188]	; (800b660 <UART_SetConfig+0x38c>)
 800b5a4:	fba3 1302 	umull	r1, r3, r3, r2
 800b5a8:	095b      	lsrs	r3, r3, #5
 800b5aa:	2164      	movs	r1, #100	; 0x64
 800b5ac:	fb01 f303 	mul.w	r3, r1, r3
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	011b      	lsls	r3, r3, #4
 800b5b4:	3332      	adds	r3, #50	; 0x32
 800b5b6:	4a2a      	ldr	r2, [pc, #168]	; (800b660 <UART_SetConfig+0x38c>)
 800b5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5bc:	095b      	lsrs	r3, r3, #5
 800b5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5c2:	441e      	add	r6, r3
 800b5c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f04f 0100 	mov.w	r1, #0
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	1894      	adds	r4, r2, r2
 800b5d2:	603c      	str	r4, [r7, #0]
 800b5d4:	415b      	adcs	r3, r3
 800b5d6:	607b      	str	r3, [r7, #4]
 800b5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5dc:	1812      	adds	r2, r2, r0
 800b5de:	eb41 0303 	adc.w	r3, r1, r3
 800b5e2:	f04f 0400 	mov.w	r4, #0
 800b5e6:	f04f 0500 	mov.w	r5, #0
 800b5ea:	00dd      	lsls	r5, r3, #3
 800b5ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b5f0:	00d4      	lsls	r4, r2, #3
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	eb12 0a00 	adds.w	sl, r2, r0
 800b5fa:	eb43 0b01 	adc.w	fp, r3, r1
 800b5fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	4618      	mov	r0, r3
 800b604:	f04f 0100 	mov.w	r1, #0
 800b608:	f04f 0200 	mov.w	r2, #0
 800b60c:	f04f 0300 	mov.w	r3, #0
 800b610:	008b      	lsls	r3, r1, #2
 800b612:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b616:	0082      	lsls	r2, r0, #2
 800b618:	4650      	mov	r0, sl
 800b61a:	4659      	mov	r1, fp
 800b61c:	f7f4 fe38 	bl	8000290 <__aeabi_uldivmod>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <UART_SetConfig+0x38c>)
 800b626:	fba3 1302 	umull	r1, r3, r3, r2
 800b62a:	095b      	lsrs	r3, r3, #5
 800b62c:	2164      	movs	r1, #100	; 0x64
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	3332      	adds	r3, #50	; 0x32
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <UART_SetConfig+0x38c>)
 800b63a:	fba2 2303 	umull	r2, r3, r2, r3
 800b63e:	095b      	lsrs	r3, r3, #5
 800b640:	f003 020f 	and.w	r2, r3, #15
 800b644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4432      	add	r2, r6
 800b64a:	609a      	str	r2, [r3, #8]
}
 800b64c:	bf00      	nop
 800b64e:	377c      	adds	r7, #124	; 0x7c
 800b650:	46bd      	mov	sp, r7
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	bf00      	nop
 800b658:	40011000 	.word	0x40011000
 800b65c:	40011400 	.word	0x40011400
 800b660:	51eb851f 	.word	0x51eb851f

0800b664 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d029      	beq.n	800b6d2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b68a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b68e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b698:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800b69e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800b6a4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800b6aa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800b6b0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800b6b6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800b6bc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800b6c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	e034      	b.n	800b73c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6de:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b6ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b706:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b710:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800b716:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800b71c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800b722:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800b728:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b087      	sub	sp, #28
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d02e      	beq.n	800b7c2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b770:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b780:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	3b01      	subs	r3, #1
 800b788:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b78a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	3b01      	subs	r3, #1
 800b792:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b794:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b79e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	695b      	ldr	r3, [r3, #20]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b7a8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	609a      	str	r2, [r3, #8]
 800b7c0:	e03b      	b.n	800b83a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7d2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b7f8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	3b01      	subs	r3, #1
 800b806:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b808:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b812:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	3b01      	subs	r3, #1
 800b81a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b81c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	3b01      	subs	r3, #1
 800b824:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b826:	4313      	orrs	r3, r2
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800b854:	2300      	movs	r3, #0
 800b856:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b864:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b86e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b876:	4313      	orrs	r3, r2
 800b878:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b880:	f7f8 f8f0 	bl	8003a64 <HAL_GetTick>
 800b884:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b886:	e010      	b.n	800b8aa <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88e:	d00c      	beq.n	800b8aa <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d007      	beq.n	800b8a6 <FMC_SDRAM_SendCommand+0x5e>
 800b896:	f7f8 f8e5 	bl	8003a64 <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d201      	bcs.n	800b8aa <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e006      	b.n	800b8b8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	d0e8      	beq.n	800b888 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	695a      	ldr	r2, [r3, #20]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	f107 001c 	add.w	r0, r7, #28
 800b8f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d122      	bne.n	800b944 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d105      	bne.n	800b938 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f951 	bl	800bbe0 <USB_CoreReset>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
 800b942:	e01a      	b.n	800b97a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f945 	bl	800bbe0 <USB_CoreReset>
 800b956:	4603      	mov	r3, r0
 800b958:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	639a      	str	r2, [r3, #56]	; 0x38
 800b96c:	e005      	b.n	800b97a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b972:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d10b      	bne.n	800b998 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f043 0206 	orr.w	r2, r3, #6
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f043 0220 	orr.w	r2, r3, #32
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9a4:	b004      	add	sp, #16
 800b9a6:	4770      	bx	lr

0800b9a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f023 0201 	bic.w	r2, r3, #1
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d115      	bne.n	800ba18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f7f8 f83f 	bl	8003a7c <HAL_Delay>
      ms++;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3301      	adds	r3, #1
 800ba02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f8dc 	bl	800bbc2 <USB_GetMode>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d01e      	beq.n	800ba4e <USB_SetCurrentMode+0x84>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2b31      	cmp	r3, #49	; 0x31
 800ba14:	d9f0      	bls.n	800b9f8 <USB_SetCurrentMode+0x2e>
 800ba16:	e01a      	b.n	800ba4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d115      	bne.n	800ba4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	f7f8 f826 	bl	8003a7c <HAL_Delay>
      ms++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f8c3 	bl	800bbc2 <USB_GetMode>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <USB_SetCurrentMode+0x84>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b31      	cmp	r3, #49	; 0x31
 800ba46:	d9f0      	bls.n	800ba2a <USB_SetCurrentMode+0x60>
 800ba48:	e001      	b.n	800ba4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e005      	b.n	800ba5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b32      	cmp	r3, #50	; 0x32
 800ba52:	d101      	bne.n	800ba58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e000      	b.n	800ba5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	019b      	lsls	r3, r3, #6
 800ba76:	f043 0220 	orr.w	r2, r3, #32
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3301      	adds	r3, #1
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	4a08      	ldr	r2, [pc, #32]	; (800baa8 <USB_FlushTxFifo+0x44>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d901      	bls.n	800ba8e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e006      	b.n	800ba9c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	d0f1      	beq.n	800ba7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	00030d40 	.word	0x00030d40

0800baac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2210      	movs	r2, #16
 800babc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3301      	adds	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	4a08      	ldr	r2, [pc, #32]	; (800bae8 <USB_FlushRxFifo+0x3c>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d901      	bls.n	800bace <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e006      	b.n	800badc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	2b10      	cmp	r3, #16
 800bad8:	d0f1      	beq.n	800babe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	00030d40 	.word	0x00030d40

0800baec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800baec:	b480      	push	{r7}
 800baee:	b08b      	sub	sp, #44	; 0x2c
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	4613      	mov	r3, r2
 800baf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bb02:	88fb      	ldrh	r3, [r7, #6]
 800bb04:	089b      	lsrs	r3, r3, #2
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bb12:	2300      	movs	r3, #0
 800bb14:	623b      	str	r3, [r7, #32]
 800bb16:	e014      	b.n	800bb42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	3301      	adds	r3, #1
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	3301      	adds	r3, #1
 800bb34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	3301      	adds	r3, #1
 800bb3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	623b      	str	r3, [r7, #32]
 800bb42:	6a3a      	ldr	r2, [r7, #32]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d3e6      	bcc.n	800bb18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bb4a:	8bfb      	ldrh	r3, [r7, #30]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01e      	beq.n	800bb8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f107 0310 	add.w	r3, r7, #16
 800bb60:	6812      	ldr	r2, [r2, #0]
 800bb62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	701a      	strb	r2, [r3, #0]
      i++;
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	623b      	str	r3, [r7, #32]
      pDest++;
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	3301      	adds	r3, #1
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bb82:	8bfb      	ldrh	r3, [r7, #30]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bb88:	8bfb      	ldrh	r3, [r7, #30]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1ea      	bne.n	800bb64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	372c      	adds	r7, #44	; 0x2c
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	f003 0301 	and.w	r3, r3, #1
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	4a13      	ldr	r2, [pc, #76]	; (800bc40 <USB_CoreReset+0x60>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d901      	bls.n	800bbfc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e01a      	b.n	800bc32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	daf3      	bge.n	800bbec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	f043 0201 	orr.w	r2, r3, #1
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <USB_CoreReset+0x60>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d901      	bls.n	800bc24 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e006      	b.n	800bc32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d0f1      	beq.n	800bc14 <USB_CoreReset+0x34>

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	00030d40 	.word	0x00030d40

0800bc44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc44:	b084      	sub	sp, #16
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	f107 001c 	add.w	r0, r7, #28
 800bc52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc60:	461a      	mov	r2, r3
 800bc62:	2300      	movs	r3, #0
 800bc64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d018      	beq.n	800bcc8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d10a      	bne.n	800bcb2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcaa:	f043 0304 	orr.w	r3, r3, #4
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e014      	b.n	800bcdc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcc0:	f023 0304 	bic.w	r3, r3, #4
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	e009      	b.n	800bcdc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcd6:	f023 0304 	bic.w	r3, r3, #4
 800bcda:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bcdc:	2110      	movs	r1, #16
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7ff fec0 	bl	800ba64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff fee1 	bl	800baac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
 800bcee:	e015      	b.n	800bd1c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	f04f 33ff 	mov.w	r3, #4294967295
 800bd02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd10:	461a      	mov	r2, r3
 800bd12:	2300      	movs	r3, #0
 800bd14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d3e5      	bcc.n	800bcf0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd30:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00b      	beq.n	800bd56 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd44:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a13      	ldr	r2, [pc, #76]	; (800bd98 <USB_HostInit+0x154>)
 800bd4a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a13      	ldr	r2, [pc, #76]	; (800bd9c <USB_HostInit+0x158>)
 800bd50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bd54:	e009      	b.n	800bd6a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2280      	movs	r2, #128	; 0x80
 800bd5a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a10      	ldr	r2, [pc, #64]	; (800bda0 <USB_HostInit+0x15c>)
 800bd60:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a0f      	ldr	r2, [pc, #60]	; (800bda4 <USB_HostInit+0x160>)
 800bd66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d105      	bne.n	800bd7c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	f043 0210 	orr.w	r2, r3, #16
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <USB_HostInit+0x164>)
 800bd82:	4313      	orrs	r3, r2
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd94:	b004      	add	sp, #16
 800bd96:	4770      	bx	lr
 800bd98:	01000200 	.word	0x01000200
 800bd9c:	00e00300 	.word	0x00e00300
 800bda0:	00600080 	.word	0x00600080
 800bda4:	004000e0 	.word	0x004000e0
 800bda8:	a3200008 	.word	0xa3200008

0800bdac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdca:	f023 0303 	bic.w	r3, r3, #3
 800bdce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	78fb      	ldrb	r3, [r7, #3]
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	68f9      	ldr	r1, [r7, #12]
 800bde0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bde4:	4313      	orrs	r3, r2
 800bde6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d107      	bne.n	800bdfe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bdfa:	6053      	str	r3, [r2, #4]
 800bdfc:	e009      	b.n	800be12 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bdfe:	78fb      	ldrb	r3, [r7, #3]
 800be00:	2b02      	cmp	r3, #2
 800be02:	d106      	bne.n	800be12 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be0a:	461a      	mov	r2, r3
 800be0c:	f241 7370 	movw	r3, #6000	; 0x1770
 800be10:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	b29b      	uxth	r3, r3
}
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be42:	b480      	push	{r7}
 800be44:	b089      	sub	sp, #36	; 0x24
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	460b      	mov	r3, r1
 800be4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800be56:	2300      	movs	r3, #0
 800be58:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	4413      	add	r3, r2
 800be62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	0c9b      	lsrs	r3, r3, #18
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	015a      	lsls	r2, r3, #5
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	4413      	add	r3, r2
 800be78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	0fdb      	lsrs	r3, r3, #31
 800be80:	f003 0301 	and.w	r3, r3, #1
 800be84:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	f003 0320 	and.w	r3, r3, #32
 800be8e:	2b20      	cmp	r3, #32
 800be90:	d104      	bne.n	800be9c <USB_HC_Halt+0x5a>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	e0e8      	b.n	800c06e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <USB_HC_Halt+0x66>
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d173      	bne.n	800bf90 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	0151      	lsls	r1, r2, #5
 800beba:	69ba      	ldr	r2, [r7, #24]
 800bebc:	440a      	add	r2, r1
 800bebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bec6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f003 0320 	and.w	r3, r3, #32
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f040 80cb 	bne.w	800c06c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d143      	bne.n	800bf6a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800befc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	0151      	lsls	r1, r2, #5
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	440a      	add	r2, r1
 800bf18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	015a      	lsls	r2, r3, #5
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	0151      	lsls	r1, r2, #5
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	440a      	add	r2, r1
 800bf38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf40:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	3301      	adds	r3, #1
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf4e:	d81d      	bhi.n	800bf8c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf66:	d0ec      	beq.n	800bf42 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf68:	e080      	b.n	800c06c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	0151      	lsls	r1, r2, #5
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	440a      	add	r2, r1
 800bf80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf88:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf8a:	e06f      	b.n	800c06c <USB_HC_Halt+0x22a>
            break;
 800bf8c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf8e:	e06d      	b.n	800c06c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	69ba      	ldr	r2, [r7, #24]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d143      	bne.n	800c048 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	015a      	lsls	r2, r3, #5
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	0151      	lsls	r1, r2, #5
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	440a      	add	r2, r1
 800bfd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfde:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	015a      	lsls	r2, r3, #5
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	0151      	lsls	r1, r2, #5
 800bff2:	69ba      	ldr	r2, [r7, #24]
 800bff4:	440a      	add	r2, r1
 800bff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bffe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	4413      	add	r3, r2
 800c008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	0151      	lsls	r1, r2, #5
 800c012:	69ba      	ldr	r2, [r7, #24]
 800c014:	440a      	add	r2, r1
 800c016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c01a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c01e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	3301      	adds	r3, #1
 800c024:	61fb      	str	r3, [r7, #28]
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c02c:	d81d      	bhi.n	800c06a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	4413      	add	r3, r2
 800c036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c044:	d0ec      	beq.n	800c020 <USB_HC_Halt+0x1de>
 800c046:	e011      	b.n	800c06c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	0151      	lsls	r1, r2, #5
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	440a      	add	r2, r1
 800c05e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c066:	6013      	str	r3, [r2, #0]
 800c068:	e000      	b.n	800c06c <USB_HC_Halt+0x22a>
          break;
 800c06a:	bf00      	nop
    }
  }

  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3724      	adds	r7, #36	; 0x24
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <GUI_Disbitmap>:
	return &p[header.DataOffset];
}

//Todo: improve function with the DMA usage
void GUI_Disbitmap(uint16_t Xpoint, uint16_t Ypoint, uint16_t width, uint16_t height, uint16_t *bmp)
{
 800c07a:	b590      	push	{r4, r7, lr}
 800c07c:	b085      	sub	sp, #20
 800c07e:	af00      	add	r7, sp, #0
 800c080:	4604      	mov	r4, r0
 800c082:	4608      	mov	r0, r1
 800c084:	4611      	mov	r1, r2
 800c086:	461a      	mov	r2, r3
 800c088:	4623      	mov	r3, r4
 800c08a:	80fb      	strh	r3, [r7, #6]
 800c08c:	4603      	mov	r3, r0
 800c08e:	80bb      	strh	r3, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	807b      	strh	r3, [r7, #2]
 800c094:	4613      	mov	r3, r2
 800c096:	803b      	strh	r3, [r7, #0]
	uint16_t Width, Height;
	uint16_t index = 0;*/

	//uint8_t* image = bmp_parser(pMap, &Width, &Height);

    for(j = 0; j < height; j++) {
 800c098:	2300      	movs	r3, #0
 800c09a:	81bb      	strh	r3, [r7, #12]
 800c09c:	e021      	b.n	800c0e2 <GUI_Disbitmap+0x68>
        for(i = 0; i <width; i ++) {
 800c09e:	2300      	movs	r3, #0
 800c0a0:	81fb      	strh	r3, [r7, #14]
 800c0a2:	e017      	b.n	800c0d4 <GUI_Disbitmap+0x5a>
        	color = bmp[i+j*width];
 800c0a4:	89fa      	ldrh	r2, [r7, #14]
 800c0a6:	89bb      	ldrh	r3, [r7, #12]
 800c0a8:	8879      	ldrh	r1, [r7, #2]
 800c0aa:	fb01 f303 	mul.w	r3, r1, r3
 800c0ae:	4413      	add	r3, r2
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	6a3a      	ldr	r2, [r7, #32]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	817b      	strh	r3, [r7, #10]

        	/*red = (color << 8) &  0xF80000;
        	green = (color <<5) & 0x00FC00;
        	blue = (color << 3) & 0x00001F;*/

            BSP_LCD_DrawPixel(Xpoint+i, Ypoint+j, color);
 800c0ba:	88fa      	ldrh	r2, [r7, #6]
 800c0bc:	89fb      	ldrh	r3, [r7, #14]
 800c0be:	18d0      	adds	r0, r2, r3
 800c0c0:	88ba      	ldrh	r2, [r7, #4]
 800c0c2:	89bb      	ldrh	r3, [r7, #12]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	897a      	ldrh	r2, [r7, #10]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7f7 f9b3 	bl	8003434 <BSP_LCD_DrawPixel>
        for(i = 0; i <width; i ++) {
 800c0ce:	89fb      	ldrh	r3, [r7, #14]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	81fb      	strh	r3, [r7, #14]
 800c0d4:	89fa      	ldrh	r2, [r7, #14]
 800c0d6:	887b      	ldrh	r3, [r7, #2]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d3e3      	bcc.n	800c0a4 <GUI_Disbitmap+0x2a>
    for(j = 0; j < height; j++) {
 800c0dc:	89bb      	ldrh	r3, [r7, #12]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	81bb      	strh	r3, [r7, #12]
 800c0e2:	89ba      	ldrh	r2, [r7, #12]
 800c0e4:	883b      	ldrh	r3, [r7, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d3d9      	bcc.n	800c09e <GUI_Disbitmap+0x24>
        }
    }
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd90      	pop	{r4, r7, pc}

0800c0f4 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <get_paramAddrTable+0x10>)
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	200010e0 	.word	0x200010e0

0800c108 <writeToFBTable>:
}
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	70fb      	strb	r3, [r7, #3]
	uint8_t fb_index = fbTable.length;
 800c114:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <writeToFBTable+0x44>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	73fb      	strb	r3, [r7, #15]
	fbTable.fb[fb_index].callback = callback;
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	490b      	ldr	r1, [pc, #44]	; (800c14c <writeToFBTable+0x44>)
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	440b      	add	r3, r1
 800c124:	609a      	str	r2, [r3, #8]
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	4a08      	ldr	r2, [pc, #32]	; (800c14c <writeToFBTable+0x44>)
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	4413      	add	r3, r2
 800c12e:	78fa      	ldrb	r2, [r7, #3]
 800c130:	711a      	strb	r2, [r3, #4]
	fbTable.length++;
 800c132:	4b06      	ldr	r3, [pc, #24]	; (800c14c <writeToFBTable+0x44>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	3301      	adds	r3, #1
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	4b04      	ldr	r3, [pc, #16]	; (800c14c <writeToFBTable+0x44>)
 800c13c:	701a      	strb	r2, [r3, #0]
	return fb_index;
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	20000dbc 	.word	0x20000dbc

0800c150 <createParameter>:

uint32_t createParameter(int32_t init_val){
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 800c158:	4b10      	ldr	r3, [pc, #64]	; (800c19c <createParameter+0x4c>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	4a0f      	ldr	r2, [pc, #60]	; (800c19c <createParameter+0x4c>)
 800c15e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	605a      	str	r2, [r3, #4]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 800c16a:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <createParameter+0x4c>)
 800c16c:	781a      	ldrb	r2, [r3, #0]
 800c16e:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <createParameter+0x4c>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	4611      	mov	r1, r2
 800c174:	4a09      	ldr	r2, [pc, #36]	; (800c19c <createParameter+0x4c>)
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	6059      	str	r1, [r3, #4]
	paramAddrTable.currentIndex++;
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <createParameter+0x4c>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	3301      	adds	r3, #1
 800c182:	b2da      	uxtb	r2, r3
 800c184:	4b05      	ldr	r3, [pc, #20]	; (800c19c <createParameter+0x4c>)
 800c186:	701a      	strb	r2, [r3, #0]
	return paramAddrTable.currentIndex-1;
 800c188:	4b04      	ldr	r3, [pc, #16]	; (800c19c <createParameter+0x4c>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	3b01      	subs	r3, #1
}
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	200010e0 	.word	0x200010e0

0800c1a0 <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 800c1aa:	4a08      	ldr	r2, [pc, #32]	; (800c1cc <make_connection+0x2c>)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	4905      	ldr	r1, [pc, #20]	; (800c1cc <make_connection+0x2c>)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	440b      	add	r3, r1
 800c1bc:	605a      	str	r2, [r3, #4]
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	200010e0 	.word	0x200010e0

0800c1d0 <initiate_mccore>:

void initiate_mccore(){
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	af00      	add	r7, sp, #0
	fbTable.length = 0;
 800c1d4:	4b08      	ldr	r3, [pc, #32]	; (800c1f8 <initiate_mccore+0x28>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	701a      	strb	r2, [r3, #0]
	paramAddrTable.currentIndex = 0;
 800c1da:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <initiate_mccore+0x2c>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
	init_uniqueid();
 800c1e0:	f000 f9e2 	bl	800c5a8 <init_uniqueid>
	init_deployment_ch();
 800c1e4:	f002 fb04 	bl	800e7f0 <init_deployment_ch>
	init_text_table();
 800c1e8:	f000 f914 	bl	800c414 <init_text_table>
	init_memory_service();
 800c1ec:	f000 fdd6 	bl	800cd9c <init_memory_service>
	init_application();
 800c1f0:	f002 f9ae 	bl	800e550 <init_application>
}
 800c1f4:	bf00      	nop
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20000dbc 	.word	0x20000dbc
 800c1fc:	200010e0 	.word	0x200010e0

0800c200 <clear_display>:

//clear the display data if there is an gui display element
void clear_display(){
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0

	if(is_there_any_gui_disp){
		Display_Clear();
	}*/

	Display_Clear();
 800c204:	f7f4 fde2 	bl	8000dcc <Display_Clear>
}
 800c208:	bf00      	nop
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <initiate_circuit>:

void initiate_circuit(){
 800c20c:	b580      	push	{r7, lr}
 800c20e:	af00      	add	r7, sp, #0
	clear_display();
 800c210:	f7ff fff6 	bl	800c200 <clear_display>
	hal_init_tick();
 800c214:	f7f4 fa9d 	bl	8000752 <hal_init_tick>
	reset_all_output_channels();
 800c218:	f000 fdaa 	bl	800cd70 <reset_all_output_channels>
}
 800c21c:	bf00      	nop
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <run_one_cycle>:

void run_one_cycle(){
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
	//get inputs
	//run the input related function blocks

	//process inputs
	//run the processing related input blocks
	for(uint8_t i= 0;i<fbTable.length;i++){
 800c226:	2300      	movs	r3, #0
 800c228:	71fb      	strb	r3, [r7, #7]
 800c22a:	e00e      	b.n	800c24a <run_one_cycle+0x2a>
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	4a0c      	ldr	r2, [pc, #48]	; (800c260 <run_one_cycle+0x40>)
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	4413      	add	r3, r2
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	4909      	ldr	r1, [pc, #36]	; (800c260 <run_one_cycle+0x40>)
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	440b      	add	r3, r1
 800c23e:	791b      	ldrb	r3, [r3, #4]
 800c240:	4618      	mov	r0, r3
 800c242:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	3301      	adds	r3, #1
 800c248:	71fb      	strb	r3, [r7, #7]
 800c24a:	4b05      	ldr	r3, [pc, #20]	; (800c260 <run_one_cycle+0x40>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	79fa      	ldrb	r2, [r7, #7]
 800c250:	429a      	cmp	r2, r3
 800c252:	d3eb      	bcc.n	800c22c <run_one_cycle+0xc>
	}

	//refresh outputs
	//run the output related function blocks
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000dbc 	.word	0x20000dbc

0800c264 <run_test_functions>:

void run_test_functions()
{
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
	//test_deployment();
	//test_memory_service();
	//test_application_load_fromflash();
	//test_watch_function();
	//test_32b_support();
}
 800c268:	bf00      	nop
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
	...

0800c274 <mcCore_SM>:

void mcCore_SM()
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
	test_circuit_t* test_circ = get_test_circuit();
 800c27a:	f000 f861 	bl	800c340 <get_test_circuit>
 800c27e:	4603      	mov	r3, r0
 800c280:	607b      	str	r3, [r7, #4]
	static uint8_t mcCore_state;

	switch (mcCore_state){
 800c282:	4b2e      	ldr	r3, [pc, #184]	; (800c33c <mcCore_SM+0xc8>)
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b06      	cmp	r3, #6
 800c288:	d853      	bhi.n	800c332 <mcCore_SM+0xbe>
 800c28a:	a201      	add	r2, pc, #4	; (adr r2, 800c290 <mcCore_SM+0x1c>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2ad 	.word	0x0800c2ad
 800c294:	0800c305 	.word	0x0800c305
 800c298:	0800c333 	.word	0x0800c333
 800c29c:	0800c2ef 	.word	0x0800c2ef
 800c2a0:	0800c31d 	.word	0x0800c31d
 800c2a4:	0800c32b 	.word	0x0800c32b
 800c2a8:	0800c2e3 	.word	0x0800c2e3
		case ST_MCCORE_INIT:
			run_test_functions();
 800c2ac:	f7ff ffda 	bl	800c264 <run_test_functions>
			if(test_circ->do_test == 1){
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d103      	bne.n	800c2c0 <mcCore_SM+0x4c>
				mcCore_state = ST_MCCORE_TEST;
 800c2b8:	4b20      	ldr	r3, [pc, #128]	; (800c33c <mcCore_SM+0xc8>)
 800c2ba:	2204      	movs	r2, #4
 800c2bc:	701a      	strb	r2, [r3, #0]
					//Some error occured on application load
					initiate_mccore(); //kill all the program memory
					mcCore_state = ST_WAIT_RUN;
				}
			}
			break;
 800c2be:	e038      	b.n	800c332 <mcCore_SM+0xbe>
				initiate_mccore(); //kill all the program memory
 800c2c0:	f7ff ff86 	bl	800c1d0 <initiate_mccore>
				if(application_load() == 0){
 800c2c4:	f002 fa48 	bl	800e758 <application_load>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d103      	bne.n	800c2d6 <mcCore_SM+0x62>
					mcCore_state = ST_MCCORE_RUN;
 800c2ce:	4b1b      	ldr	r3, [pc, #108]	; (800c33c <mcCore_SM+0xc8>)
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	701a      	strb	r2, [r3, #0]
			break;
 800c2d4:	e02d      	b.n	800c332 <mcCore_SM+0xbe>
					initiate_mccore(); //kill all the program memory
 800c2d6:	f7ff ff7b 	bl	800c1d0 <initiate_mccore>
					mcCore_state = ST_WAIT_RUN;
 800c2da:	4b18      	ldr	r3, [pc, #96]	; (800c33c <mcCore_SM+0xc8>)
 800c2dc:	2203      	movs	r2, #3
 800c2de:	701a      	strb	r2, [r3, #0]
			break;
 800c2e0:	e027      	b.n	800c332 <mcCore_SM+0xbe>

		case ST_MCCORE_INIT2:
				initiate_mccore(); //kill all the program memory
 800c2e2:	f7ff ff75 	bl	800c1d0 <initiate_mccore>
				mcCore_state = ST_WAIT_RUN;
 800c2e6:	4b15      	ldr	r3, [pc, #84]	; (800c33c <mcCore_SM+0xc8>)
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	701a      	strb	r2, [r3, #0]

			break;
 800c2ec:	e021      	b.n	800c332 <mcCore_SM+0xbe>

		case ST_WAIT_RUN: //wait for the deployment finish and run cmd arrival
			if( Parser_Modbus_GetState() == CMD_RUN){
 800c2ee:	f002 f8d7 	bl	800e4a0 <Parser_Modbus_GetState>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b67      	cmp	r3, #103	; 0x67
 800c2f6:	d11b      	bne.n	800c330 <mcCore_SM+0xbc>
				initiate_circuit();
 800c2f8:	f7ff ff88 	bl	800c20c <initiate_circuit>
				mcCore_state = ST_MCCORE_RUN;
 800c2fc:	4b0f      	ldr	r3, [pc, #60]	; (800c33c <mcCore_SM+0xc8>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	701a      	strb	r2, [r3, #0]
			}
			break;
 800c302:	e015      	b.n	800c330 <mcCore_SM+0xbc>

		case ST_MCCORE_RUN:
			if(Parser_Modbus_GetState() == CMD_KILL) { //when running if KILL cmd received go to the initial state
 800c304:	f002 f8cc 	bl	800e4a0 <Parser_Modbus_GetState>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b68      	cmp	r3, #104	; 0x68
 800c30c:	d103      	bne.n	800c316 <mcCore_SM+0xa2>
				mcCore_state = ST_MCCORE_INIT2;
 800c30e:	4b0b      	ldr	r3, [pc, #44]	; (800c33c <mcCore_SM+0xc8>)
 800c310:	2206      	movs	r2, #6
 800c312:	701a      	strb	r2, [r3, #0]
				run_one_cycle();
				//burdaki zamanı ölç
				//delta
				//bu deltaları kullanıcıya logla
			}
			break;
 800c314:	e00d      	b.n	800c332 <mcCore_SM+0xbe>
				run_one_cycle();
 800c316:	f7ff ff83 	bl	800c220 <run_one_cycle>
			break;
 800c31a:	e00a      	b.n	800c332 <mcCore_SM+0xbe>

		case ST_MCCORE_TEST:
			test_circ->test_func_ptr(); //function defined in test_circuits.c
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4798      	blx	r3
			mcCore_state = ST_MCCORE_TEST_RUN;
 800c322:	4b06      	ldr	r3, [pc, #24]	; (800c33c <mcCore_SM+0xc8>)
 800c324:	2205      	movs	r2, #5
 800c326:	701a      	strb	r2, [r3, #0]
			break;
 800c328:	e003      	b.n	800c332 <mcCore_SM+0xbe>

		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
 800c32a:	f7ff ff79 	bl	800c220 <run_one_cycle>
			break;
 800c32e:	e000      	b.n	800c332 <mcCore_SM+0xbe>
			break;
 800c330:	bf00      	nop
	}
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20000370 	.word	0x20000370

0800c340 <get_test_circuit>:
#include "mcCore.h"
#include "fb_inc.h"
#include "test_circuits.h"

test_circuit_t test_circuit = {.do_test=0, .test_func_ptr=&create_recording_test_circuit};
test_circuit_t* get_test_circuit(){
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
	return &test_circuit;
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <get_test_circuit+0x10>)
}
 800c346:	4618      	mov	r0, r3
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20000090 	.word	0x20000090

0800c354 <create_recording_test_circuit>:
	make_connection(display_element1.fp.val, number_tesla.value);
	make_connection(display_element2.fp.val, number_ok.value);
}

void create_recording_test_circuit()
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b0b0      	sub	sp, #192	; 0xc0
 800c358:	af02      	add	r7, sp, #8
	type_fb_record rec = create_fb_record(0,256);
 800c35a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c35e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c362:	2100      	movs	r1, #0
 800c364:	4618      	mov	r0, r3
 800c366:	f001 ffa3 	bl	800e2b0 <create_fb_record>

	type_fb_cycle fb_cyc1 = create_fb_cycle(0, 0, 100, 100, 0);
 800c36a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800c36e:	2300      	movs	r3, #0
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	2364      	movs	r3, #100	; 0x64
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	2364      	movs	r3, #100	; 0x64
 800c378:	2200      	movs	r2, #0
 800c37a:	2100      	movs	r1, #0
 800c37c:	f000 fffc 	bl	800d378 <create_fb_cycle>
	type_fb_outputpin ld1   = create_fb_outputpin(0, 0, 0); //GPIO-12
 800c380:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800c384:	2300      	movs	r3, #0
 800c386:	2200      	movs	r2, #0
 800c388:	2100      	movs	r1, #0
 800c38a:	f001 fd8f 	bl	800deac <create_fb_outputpin>

	type_fb_cycle fb_cyc2 = create_fb_cycle(0, 0, 10000, 10000, 0);
 800c38e:	f107 001c 	add.w	r0, r7, #28
 800c392:	2300      	movs	r3, #0
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	f242 7310 	movw	r3, #10000	; 0x2710
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	f242 7310 	movw	r3, #10000	; 0x2710
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	f000 ffe8 	bl	800d378 <create_fb_cycle>
	type_fb_outputpin ld2   = create_fb_outputpin(1, 0, 0); //GPIO-12
 800c3a8:	1d38      	adds	r0, r7, #4
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	f001 fd7c 	bl	800deac <create_fb_outputpin>

	//led connections
	make_connection(ld1.fp.val, fb_cyc1.fp.out);
 800c3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff fef0 	bl	800c1a0 <make_connection>
	make_connection(ld2.fp.val, fb_cyc2.fp.out);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff feea 	bl	800c1a0 <make_connection>

	make_connection(rec.fp.din, fb_cyc1.fp.val);
 800c3cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff fee3 	bl	800c1a0 <make_connection>
	make_connection(rec.fp.wren, fb_cyc1.fp.out);
 800c3da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff fedc 	bl	800c1a0 <make_connection>
	make_connection(rec.fp.rec, fb_cyc2.fp.out);
 800c3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff fed5 	bl	800c1a0 <make_connection>
}
 800c3f6:	bf00      	nop
 800c3f8:	37b8      	adds	r7, #184	; 0xb8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <get_text_element_table>:

#include "stdint.h"
#include "text_table.h"

glob_text_element_table_t text_element_table = {.i=0};
glob_text_element_table_t* get_text_element_table(){return &text_element_table;}
 800c400:	b480      	push	{r7}
 800c402:	af00      	add	r7, sp, #0
 800c404:	4b02      	ldr	r3, [pc, #8]	; (800c410 <get_text_element_table+0x10>)
 800c406:	4618      	mov	r0, r3
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20000374 	.word	0x20000374

0800c414 <init_text_table>:

void init_text_table(){
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
	glob_text_element_table_t* t = get_text_element_table();
 800c41a:	f7ff fff1 	bl	800c400 <get_text_element_table>
 800c41e:	6038      	str	r0, [r7, #0]
	//clear previous records
	for(uint16_t i=0;i<t->i;i++){
 800c420:	2300      	movs	r3, #0
 800c422:	80fb      	strh	r3, [r7, #6]
 800c424:	e034      	b.n	800c490 <init_text_table+0x7c>
		for(uint16_t j= 0; j<t->e[i].length;j++){
 800c426:	2300      	movs	r3, #0
 800c428:	80bb      	strh	r3, [r7, #4]
 800c42a:	e00e      	b.n	800c44a <init_text_table+0x36>
			t->e[i].value[j] = 0;
 800c42c:	88fa      	ldrh	r2, [r7, #6]
 800c42e:	88b9      	ldrh	r1, [r7, #4]
 800c430:	6838      	ldr	r0, [r7, #0]
 800c432:	4613      	mov	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4413      	add	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4403      	add	r3, r0
 800c43c:	440b      	add	r3, r1
 800c43e:	3306      	adds	r3, #6
 800c440:	2200      	movs	r2, #0
 800c442:	701a      	strb	r2, [r3, #0]
		for(uint16_t j= 0; j<t->e[i].length;j++){
 800c444:	88bb      	ldrh	r3, [r7, #4]
 800c446:	3301      	adds	r3, #1
 800c448:	80bb      	strh	r3, [r7, #4]
 800c44a:	88fa      	ldrh	r2, [r7, #6]
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	440b      	add	r3, r1
 800c458:	3304      	adds	r3, #4
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	88ba      	ldrh	r2, [r7, #4]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d3e4      	bcc.n	800c42c <init_text_table+0x18>
		}
		t->e[i].length = 0;
 800c462:	88fa      	ldrh	r2, [r7, #6]
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	4613      	mov	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	440b      	add	r3, r1
 800c470:	3304      	adds	r3, #4
 800c472:	2200      	movs	r2, #0
 800c474:	801a      	strh	r2, [r3, #0]
		t->e[i].index = 0;
 800c476:	88fa      	ldrh	r2, [r7, #6]
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	440b      	add	r3, r1
 800c484:	3302      	adds	r3, #2
 800c486:	2200      	movs	r2, #0
 800c488:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0;i<t->i;i++){
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	3301      	adds	r3, #1
 800c48e:	80fb      	strh	r3, [r7, #6]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	88fa      	ldrh	r2, [r7, #6]
 800c496:	429a      	cmp	r2, r3
 800c498:	d3c5      	bcc.n	800c426 <init_text_table+0x12>
	}

	//set the index to zero
	t->i = 0;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2200      	movs	r2, #0
 800c49e:	801a      	strh	r2, [r3, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <get_next_text_element>:

static text_element_t* get_next_text_element(){
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
	text_element_t* ret_element = &text_element_table.e[text_element_table.i];
 800c4ae:	4b10      	ldr	r3, [pc, #64]	; (800c4f0 <get_next_text_element+0x48>)
 800c4b0:	881b      	ldrh	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4a0c      	ldr	r2, [pc, #48]	; (800c4f0 <get_next_text_element+0x48>)
 800c4be:	4413      	add	r3, r2
 800c4c0:	3302      	adds	r3, #2
 800c4c2:	607b      	str	r3, [r7, #4]
	ret_element->index = text_element_table.i;
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <get_next_text_element+0x48>)
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	701a      	strb	r2, [r3, #0]

	if(text_element_table.i < TEXT_TABLE_MAX_ELEMENT_COUNT-1){
 800c4ce:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <get_next_text_element+0x48>)
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	2b1e      	cmp	r3, #30
 800c4d4:	d805      	bhi.n	800c4e2 <get_next_text_element+0x3a>
		text_element_table.i++;
 800c4d6:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <get_next_text_element+0x48>)
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	4b04      	ldr	r3, [pc, #16]	; (800c4f0 <get_next_text_element+0x48>)
 800c4e0:	801a      	strh	r2, [r3, #0]
	}
	return ret_element;
 800c4e2:	687b      	ldr	r3, [r7, #4]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20000374 	.word	0x20000374

0800c4f4 <get_text_element>:

uint8_t get_text_element(uint16_t index,char** str, uint16_t* len){
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	81fb      	strh	r3, [r7, #14]
	text_element_t* ret_element;

	if(index > TEXT_TABLE_MAX_ELEMENT_COUNT-1){
 800c502:	89fb      	ldrh	r3, [r7, #14]
 800c504:	2b1f      	cmp	r3, #31
 800c506:	d901      	bls.n	800c50c <get_text_element+0x18>
		return 1; //boundary error
 800c508:	2301      	movs	r3, #1
 800c50a:	e011      	b.n	800c530 <get_text_element+0x3c>
	}

	ret_element = &text_element_table.e[index];
 800c50c:	89fa      	ldrh	r2, [r7, #14]
 800c50e:	4613      	mov	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4413      	add	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4a09      	ldr	r2, [pc, #36]	; (800c53c <get_text_element+0x48>)
 800c518:	4413      	add	r3, r2
 800c51a:	3302      	adds	r3, #2
 800c51c:	617b      	str	r3, [r7, #20]

	*str =ret_element->value;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	1d1a      	adds	r2, r3, #4
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	601a      	str	r2, [r3, #0]
	*len = ret_element->length;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	885a      	ldrh	r2, [r3, #2]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	801a      	strh	r2, [r3, #0]

	return 0;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	371c      	adds	r7, #28
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	20000374 	.word	0x20000374

0800c540 <create_text_table_entry>:

uint8_t create_text_table_entry(uint8_t len, char* str){
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	6039      	str	r1, [r7, #0]
 800c54a:	71fb      	strb	r3, [r7, #7]
	text_element_t* text_el = get_next_text_element();
 800c54c:	f7ff ffac 	bl	800c4a8 <get_next_text_element>
 800c550:	60b8      	str	r0, [r7, #8]
	text_el->length = len;
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	b29a      	uxth	r2, r3
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	805a      	strh	r2, [r3, #2]
	//first clear entry
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	e007      	b.n	800c570 <create_text_table_entry+0x30>
		text_el->value[i] = 0;
 800c560:	7bfb      	ldrb	r3, [r7, #15]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	4413      	add	r3, r2
 800c566:	2200      	movs	r2, #0
 800c568:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	3301      	adds	r3, #1
 800c56e:	73fb      	strb	r3, [r7, #15]
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	2b0f      	cmp	r3, #15
 800c574:	d9f4      	bls.n	800c560 <create_text_table_entry+0x20>
	}

	//fill with new values
	for(uint8_t i = 0;i<len;i++){
 800c576:	2300      	movs	r3, #0
 800c578:	73bb      	strb	r3, [r7, #14]
 800c57a:	e00b      	b.n	800c594 <create_text_table_entry+0x54>
		text_el->value[i] = str[i];
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	441a      	add	r2, r3
 800c582:	7bbb      	ldrb	r3, [r7, #14]
 800c584:	7811      	ldrb	r1, [r2, #0]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	4413      	add	r3, r2
 800c58a:	460a      	mov	r2, r1
 800c58c:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<len;i++){
 800c58e:	7bbb      	ldrb	r3, [r7, #14]
 800c590:	3301      	adds	r3, #1
 800c592:	73bb      	strb	r3, [r7, #14]
 800c594:	7bba      	ldrb	r2, [r7, #14]
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d3ef      	bcc.n	800c57c <create_text_table_entry+0x3c>
	}

	return text_el->index;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	781b      	ldrb	r3, [r3, #0]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	75fb      	strb	r3, [r7, #23]
 800c5b2:	e009      	b.n	800c5c8 <init_uniqueid+0x20>
		uniqueid[i] = 0;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	f107 0218 	add.w	r2, r7, #24
 800c5ba:	4413      	add	r3, r2
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 0;i<UID_LEN;i++){
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	75fb      	strb	r3, [r7, #23]
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b0f      	cmp	r3, #15
 800c5cc:	d9f2      	bls.n	800c5b4 <init_uniqueid+0xc>
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 800c5ce:	463b      	mov	r3, r7
 800c5d0:	2110      	movs	r1, #16
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7f4 f96a 	bl	80008ac <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 800c5d8:	f000 f888 	bl	800c6ec <get_Modbus_Buf_Input_Registers_30001>
 800c5dc:	6138      	str	r0, [r7, #16]

	for(uint8_t i= 0; i<UID_LEN;i++){
 800c5de:	2300      	movs	r3, #0
 800c5e0:	75bb      	strb	r3, [r7, #22]
 800c5e2:	e00c      	b.n	800c5fe <init_uniqueid+0x56>
		modbus_p[i] = uniqueid[i];
 800c5e4:	7dba      	ldrb	r2, [r7, #22]
 800c5e6:	7dbb      	ldrb	r3, [r7, #22]
 800c5e8:	6939      	ldr	r1, [r7, #16]
 800c5ea:	440b      	add	r3, r1
 800c5ec:	f107 0118 	add.w	r1, r7, #24
 800c5f0:	440a      	add	r2, r1
 800c5f2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800c5f6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i= 0; i<UID_LEN;i++){
 800c5f8:	7dbb      	ldrb	r3, [r7, #22]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	75bb      	strb	r3, [r7, #22]
 800c5fe:	7dbb      	ldrb	r3, [r7, #22]
 800c600:	2b0f      	cmp	r3, #15
 800c602:	d9ef      	bls.n	800c5e4 <init_uniqueid+0x3c>
	}
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <Channel_Mapping>:
 */
#include "stdint.h"
#include "deployment.h"
#include "comm_service.h"

Communication_Ch* Channel_Mapping(uint32_t channel){
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d103      	bne.n	800c624 <Channel_Mapping+0x16>
		comm_ch = get_deployment_ch();
 800c61c:	f002 f8c6 	bl	800e7ac <get_deployment_ch>
 800c620:	4603      	mov	r3, r0
 800c622:	60fb      	str	r3, [r7, #12]
	}
	return comm_ch;
 800c624:	68fb      	ldr	r3, [r7, #12]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b086      	sub	sp, #24
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	607a      	str	r2, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7ff ffe7 	bl	800c60e <Channel_Mapping>
 800c640:	6138      	str	r0, [r7, #16]

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 800c642:	2300      	movs	r3, #0
 800c644:	617b      	str	r3, [r7, #20]
 800c646:	e014      	b.n	800c672 <Runtime_CommDataService_NewData_Received+0x44>
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	795b      	ldrb	r3, [r3, #5]
 800c64c:	2b3f      	cmp	r3, #63	; 0x3f
 800c64e:	d80d      	bhi.n	800c66c <Runtime_CommDataService_NewData_Received+0x3e>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	441a      	add	r2, r3
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	795b      	ldrb	r3, [r3, #5]
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	b2c8      	uxtb	r0, r1
 800c65e:	6939      	ldr	r1, [r7, #16]
 800c660:	7148      	strb	r0, [r1, #5]
 800c662:	4619      	mov	r1, r3
 800c664:	7812      	ldrb	r2, [r2, #0]
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	440b      	add	r3, r1
 800c66a:	719a      	strb	r2, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	3301      	adds	r3, #1
 800c670:	617b      	str	r3, [r7, #20]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d3e6      	bcc.n	800c648 <Runtime_CommDataService_NewData_Received+0x1a>
	}
}
 800c67a:	bf00      	nop
 800c67c:	bf00      	nop
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff ffbe 	bl	800c60e <Channel_Mapping>
 800c692:	60f8      	str	r0, [r7, #12]

	if(comm_ch->rx_data_cntr < 2) {
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	795b      	ldrb	r3, [r3, #5]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d803      	bhi.n	800c6a4 <Runtime_CommDataService_Process_DataBuffer+0x20>
		comm_ch->rx_data_cntr = 0;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	715a      	strb	r2, [r3, #5]
 800c6a2:	e014      	b.n	800c6ce <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a8:	4798      	blx	r3
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10c      	bne.n	800c6ca <Runtime_CommDataService_Process_DataBuffer+0x46>
		comm_ch->fdata_ready = 1;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		comm_ch->process_callback(comm_ch);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4798      	blx	r3
		comm_ch->rx_data_cntr = 0;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	715a      	strb	r2, [r3, #5]
 800c6c8:	e001      	b.n	800c6ce <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}
	else{
		return 1;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e000      	b.n	800c6d0 <Runtime_CommDataService_Process_DataBuffer+0x4c>
	}

	return 0;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <get_Modbus_Buf_Holding_Registers_40001+0x10>)
 800c6de:	4618      	mov	r0, r3
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	20001dac 	.word	0x20001dac

0800c6ec <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	4b02      	ldr	r3, [pc, #8]	; (800c6fc <get_Modbus_Buf_Input_Registers_30001+0x10>)
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	20001dcc 	.word	0x20001dcc

0800c700 <get_low_byte>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}

uint8_t get_low_byte(uint16_t word){
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(word & 0xFF);
 800c70a:	88fb      	ldrh	r3, [r7, #6]
 800c70c:	b2db      	uxtb	r3, r3
}
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <get_hi_byte>:

uint8_t get_hi_byte(uint16_t word){
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	4603      	mov	r3, r0
 800c722:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((word>>8) & 0xFF);
 800c724:	88fb      	ldrh	r3, [r7, #6]
 800c726:	0a1b      	lsrs	r3, r3, #8
 800c728:	b29b      	uxth	r3, r3
 800c72a:	b2db      	uxtb	r3, r3
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <modbus_byte2word>:

uint16_t modbus_byte2word(uint8_t* p){
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	return ((p[0] << 8) + p[1]);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	b29b      	uxth	r3, r3
 800c746:	021b      	lsls	r3, r3, #8
 800c748:	b29a      	uxth	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3301      	adds	r3, #1
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	b29b      	uxth	r3, r3
 800c752:	4413      	add	r3, r2
 800c754:	b29b      	uxth	r3, r3
}
 800c756:	4618      	mov	r0, r3
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
	...

0800c764 <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 800c764:	b590      	push	{r4, r7, lr}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	461a      	mov	r2, r3
 800c772:	4603      	mov	r3, r0
 800c774:	72fb      	strb	r3, [r7, #11]
 800c776:	460b      	mov	r3, r1
 800c778:	813b      	strh	r3, [r7, #8]
 800c77a:	4613      	mov	r3, r2
 800c77c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	uint16_t register_addr_0 = register_addr; //40001 means register 0
 800c77e:	893b      	ldrh	r3, [r7, #8]
 800c780:	82bb      	strh	r3, [r7, #20]

	resp_data->index = 0;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	b2d1      	uxtb	r1, r2
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c79a:	461a      	mov	r2, r3
 800c79c:	4b8e      	ldr	r3, [pc, #568]	; (800c9d8 <modbus_slave_prep_resp_data+0x274>)
 800c79e:	7819      	ldrb	r1, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	5499      	strb	r1, [r3, r2]
	resp_data->buf[resp_data->index++] = function; //Function
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	b2d1      	uxtb	r1, r2
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	545a      	strb	r2, [r3, r1]
	if(function == MODBUS_READ_HOLDING_REGISTER){
 800c7bc:	7afb      	ldrb	r3, [r7, #11]
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d16d      	bne.n	800c89e <modbus_slave_prep_resp_data+0x13a>
		resp_data->buf[resp_data->index++] = register_qty*2;
 800c7c2:	88fb      	ldrh	r3, [r7, #6]
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c7cc:	1c59      	adds	r1, r3, #1
 800c7ce:	b2c8      	uxtb	r0, r1
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	0053      	lsls	r3, r2, #1
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	82fb      	strh	r3, [r7, #22]
 800c7e4:	e056      	b.n	800c894 <modbus_slave_prep_resp_data+0x130>
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 800c7e6:	8aba      	ldrh	r2, [r7, #20]
 800c7e8:	8afb      	ldrh	r3, [r7, #22]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	2b10      	cmp	r3, #16
 800c7ee:	dc2c      	bgt.n	800c84a <modbus_slave_prep_resp_data+0xe6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800c7f0:	8aba      	ldrh	r2, [r7, #20]
 800c7f2:	8afb      	ldrh	r3, [r7, #22]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	4a79      	ldr	r2, [pc, #484]	; (800c9dc <modbus_slave_prep_resp_data+0x278>)
 800c7f8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	b2d0      	uxtb	r0, r2
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c80c:	461c      	mov	r4, r3
 800c80e:	4608      	mov	r0, r1
 800c810:	f7ff ff83 	bl	800c71a <get_hi_byte>
 800c814:	4603      	mov	r3, r0
 800c816:	461a      	mov	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800c81c:	8aba      	ldrh	r2, [r7, #20]
 800c81e:	8afb      	ldrh	r3, [r7, #22]
 800c820:	4413      	add	r3, r2
 800c822:	4a6e      	ldr	r2, [pc, #440]	; (800c9dc <modbus_slave_prep_resp_data+0x278>)
 800c824:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	b2d0      	uxtb	r0, r2
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c838:	461c      	mov	r4, r3
 800c83a:	4608      	mov	r0, r1
 800c83c:	f7ff ff60 	bl	800c700 <get_low_byte>
 800c840:	4603      	mov	r3, r0
 800c842:	461a      	mov	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	551a      	strb	r2, [r3, r4]
 800c848:	e021      	b.n	800c88e <modbus_slave_prep_resp_data+0x12a>
			}

			//Issuing MONITOR command, Watch function
			else if(register_addr+i >= MODBUS_APP_MONITOR_REGISTER) {
 800c84a:	893a      	ldrh	r2, [r7, #8]
 800c84c:	8afb      	ldrh	r3, [r7, #22]
 800c84e:	4413      	add	r3, r2
 800c850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c854:	db1b      	blt.n	800c88e <modbus_slave_prep_resp_data+0x12a>
				uint16_t value = get_watch_value(register_addr - MODBUS_APP_MONITOR_REGISTER + i);
 800c856:	893a      	ldrh	r2, [r7, #8]
 800c858:	8afb      	ldrh	r3, [r7, #22]
 800c85a:	4413      	add	r3, r2
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c862:	b29b      	uxth	r3, r3
 800c864:	4618      	mov	r0, r3
 800c866:	f001 ffd7 	bl	800e818 <get_watch_value>
 800c86a:	4603      	mov	r3, r0
 800c86c:	823b      	strh	r3, [r7, #16]
				memcpy(&(resp_data->buf[resp_data->index]), &value, sizeof(value));
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c874:	461a      	mov	r2, r3
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4413      	add	r3, r2
 800c87a:	8a3a      	ldrh	r2, [r7, #16]
 800c87c:	801a      	strh	r2, [r3, #0]
				resp_data->index += sizeof(value);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c884:	3302      	adds	r3, #2
 800c886:	b2da      	uxtb	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		for(i = 0;i<register_qty;i++){
 800c88e:	8afb      	ldrh	r3, [r7, #22]
 800c890:	3301      	adds	r3, #1
 800c892:	82fb      	strh	r3, [r7, #22]
 800c894:	8afa      	ldrh	r2, [r7, #22]
 800c896:	88fb      	ldrh	r3, [r7, #6]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d3a4      	bcc.n	800c7e6 <modbus_slave_prep_resp_data+0x82>
 800c89c:	e0e9      	b.n	800ca72 <modbus_slave_prep_resp_data+0x30e>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 800c89e:	7afb      	ldrb	r3, [r7, #11]
 800c8a0:	2b04      	cmp	r3, #4
 800c8a2:	d14a      	bne.n	800c93a <modbus_slave_prep_resp_data+0x1d6>
		resp_data->buf[resp_data->index++] = register_qty*2;
 800c8a4:	88fb      	ldrh	r3, [r7, #6]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c8ae:	1c59      	adds	r1, r3, #1
 800c8b0:	b2c8      	uxtb	r0, r1
 800c8b2:	68f9      	ldr	r1, [r7, #12]
 800c8b4:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	0053      	lsls	r3, r2, #1
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	82fb      	strh	r3, [r7, #22]
 800c8c6:	e033      	b.n	800c930 <modbus_slave_prep_resp_data+0x1cc>
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 800c8c8:	8aba      	ldrh	r2, [r7, #20]
 800c8ca:	8afb      	ldrh	r3, [r7, #22]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	2b10      	cmp	r3, #16
 800c8d0:	dc2b      	bgt.n	800c92a <modbus_slave_prep_resp_data+0x1c6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800c8d2:	8aba      	ldrh	r2, [r7, #20]
 800c8d4:	8afb      	ldrh	r3, [r7, #22]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	4a41      	ldr	r2, [pc, #260]	; (800c9e0 <modbus_slave_prep_resp_data+0x27c>)
 800c8da:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c8e4:	1c5a      	adds	r2, r3, #1
 800c8e6:	b2d0      	uxtb	r0, r2
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c8ee:	461c      	mov	r4, r3
 800c8f0:	4608      	mov	r0, r1
 800c8f2:	f7ff ff12 	bl	800c71a <get_hi_byte>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800c8fe:	8aba      	ldrh	r2, [r7, #20]
 800c900:	8afb      	ldrh	r3, [r7, #22]
 800c902:	4413      	add	r3, r2
 800c904:	4a36      	ldr	r2, [pc, #216]	; (800c9e0 <modbus_slave_prep_resp_data+0x27c>)
 800c906:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	b2d0      	uxtb	r0, r2
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c91a:	461c      	mov	r4, r3
 800c91c:	4608      	mov	r0, r1
 800c91e:	f7ff feef 	bl	800c700 <get_low_byte>
 800c922:	4603      	mov	r3, r0
 800c924:	461a      	mov	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 800c92a:	8afb      	ldrh	r3, [r7, #22]
 800c92c:	3301      	adds	r3, #1
 800c92e:	82fb      	strh	r3, [r7, #22]
 800c930:	8afa      	ldrh	r2, [r7, #22]
 800c932:	88fb      	ldrh	r3, [r7, #6]
 800c934:	429a      	cmp	r2, r3
 800c936:	d3c7      	bcc.n	800c8c8 <modbus_slave_prep_resp_data+0x164>
 800c938:	e09b      	b.n	800ca72 <modbus_slave_prep_resp_data+0x30e>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 800c93a:	7afb      	ldrb	r3, [r7, #11]
 800c93c:	2b06      	cmp	r3, #6
 800c93e:	d151      	bne.n	800c9e4 <modbus_slave_prep_resp_data+0x280>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	b2d1      	uxtb	r1, r2
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c950:	461c      	mov	r4, r3
 800c952:	893b      	ldrh	r3, [r7, #8]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff fee0 	bl	800c71a <get_hi_byte>
 800c95a:	4603      	mov	r3, r0
 800c95c:	461a      	mov	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	b2d1      	uxtb	r1, r2
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c972:	461c      	mov	r4, r3
 800c974:	893b      	ldrh	r3, [r7, #8]
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff fec2 	bl	800c700 <get_low_byte>
 800c97c:	4603      	mov	r3, r0
 800c97e:	461a      	mov	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 800c984:	8abb      	ldrh	r3, [r7, #20]
 800c986:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <modbus_slave_prep_resp_data+0x278>)
 800c988:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	b2d0      	uxtb	r0, r2
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c99c:	461c      	mov	r4, r3
 800c99e:	4608      	mov	r0, r1
 800c9a0:	f7ff febb 	bl	800c71a <get_hi_byte>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 800c9ac:	8abb      	ldrh	r3, [r7, #20]
 800c9ae:	4a0b      	ldr	r2, [pc, #44]	; (800c9dc <modbus_slave_prep_resp_data+0x278>)
 800c9b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	b2d0      	uxtb	r0, r2
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c9c4:	461c      	mov	r4, r3
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	f7ff fe9a 	bl	800c700 <get_low_byte>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	551a      	strb	r2, [r3, r4]
 800c9d4:	e04d      	b.n	800ca72 <modbus_slave_prep_resp_data+0x30e>
 800c9d6:	bf00      	nop
 800c9d8:	20000098 	.word	0x20000098
 800c9dc:	20001dac 	.word	0x20001dac
 800c9e0:	20001dcc 	.word	0x20001dcc
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 800c9e4:	7afb      	ldrb	r3, [r7, #11]
 800c9e6:	2b10      	cmp	r3, #16
 800c9e8:	d143      	bne.n	800ca72 <modbus_slave_prep_resp_data+0x30e>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	b2d1      	uxtb	r1, r2
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c9fa:	461c      	mov	r4, r3
 800c9fc:	893b      	ldrh	r3, [r7, #8]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff fe8b 	bl	800c71a <get_hi_byte>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461a      	mov	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ca12:	1c5a      	adds	r2, r3, #1
 800ca14:	b2d1      	uxtb	r1, r2
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800ca1c:	461c      	mov	r4, r3
 800ca1e:	893b      	ldrh	r3, [r7, #8]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fe6d 	bl	800c700 <get_low_byte>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(register_qty);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	b2d1      	uxtb	r1, r2
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800ca3e:	461c      	mov	r4, r3
 800ca40:	88fb      	ldrh	r3, [r7, #6]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7ff fe69 	bl	800c71a <get_hi_byte>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	b2d1      	uxtb	r1, r2
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800ca60:	461c      	mov	r4, r3
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff fe4b 	bl	800c700 <get_low_byte>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	551a      	strb	r2, [r3, r4]
	}

	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4610      	mov	r0, r2
 800ca80:	f000 f94c 	bl	800cd1c <CRC16>
 800ca84:	4603      	mov	r3, r0
 800ca86:	827b      	strh	r3, [r7, #18]

	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	b2d1      	uxtb	r1, r2
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800ca98:	461c      	mov	r4, r3
 800ca9a:	8a7b      	ldrh	r3, [r7, #18]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff fe2f 	bl	800c700 <get_low_byte>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461a      	mov	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	551a      	strb	r2, [r3, r4]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	b2d1      	uxtb	r1, r2
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800caba:	461c      	mov	r4, r3
 800cabc:	8a7b      	ldrh	r3, [r7, #18]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7ff fe2b 	bl	800c71a <get_hi_byte>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	551a      	strb	r2, [r3, r4]

	resp_data->len = resp_data->index;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 800cad8:	bf00      	nop
 800cada:	371c      	adds	r7, #28
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd90      	pop	{r4, r7, pc}

0800cae0 <modbus_slave_tx>:

void modbus_slave_tx(Modbus_Slave_Responce_Data* resp_data){
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7f3 febc 	bl	8000870 <hal_modbus_uart_tx>
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <modbus_check_crc>:

uint8_t modbus_check_crc(uint8_t* buf){
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	uint8_t byte_count = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	75fb      	strb	r3, [r7, #23]

	uint16_t len = 0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	82bb      	strh	r3, [r7, #20]
	uint8_t slave_addr = buf[len++];
 800cb10:	8abb      	ldrh	r3, [r7, #20]
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	82ba      	strh	r2, [r7, #20]
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	74fb      	strb	r3, [r7, #19]
	uint8_t function = buf[len++];
 800cb20:	8abb      	ldrh	r3, [r7, #20]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	82ba      	strh	r2, [r7, #20]
 800cb26:	461a      	mov	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	74bb      	strb	r3, [r7, #18]
	uint8_t starting_addr_hi = buf[len++];
 800cb30:	8abb      	ldrh	r3, [r7, #20]
 800cb32:	1c5a      	adds	r2, r3, #1
 800cb34:	82ba      	strh	r2, [r7, #20]
 800cb36:	461a      	mov	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	747b      	strb	r3, [r7, #17]
	uint8_t starting_addr_lo = buf[len++];
 800cb40:	8abb      	ldrh	r3, [r7, #20]
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	82ba      	strh	r2, [r7, #20]
 800cb46:	461a      	mov	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	743b      	strb	r3, [r7, #16]
	uint8_t quantity_of_register_hi = buf[len++];
 800cb50:	8abb      	ldrh	r3, [r7, #20]
 800cb52:	1c5a      	adds	r2, r3, #1
 800cb54:	82ba      	strh	r2, [r7, #20]
 800cb56:	461a      	mov	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	73fb      	strb	r3, [r7, #15]
	uint8_t quantity_of_register_lo = buf[len++];
 800cb60:	8abb      	ldrh	r3, [r7, #20]
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	82ba      	strh	r2, [r7, #20]
 800cb66:	461a      	mov	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	73bb      	strb	r3, [r7, #14]

	if(function == 16){
 800cb70:	7cbb      	ldrb	r3, [r7, #18]
 800cb72:	2b10      	cmp	r3, #16
 800cb74:	d107      	bne.n	800cb86 <modbus_check_crc+0x86>
		byte_count = buf[len++];
 800cb76:	8abb      	ldrh	r3, [r7, #20]
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	82ba      	strh	r2, [r7, #20]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4413      	add	r3, r2
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	75fb      	strb	r3, [r7, #23]
	}

	uint8_t error_check_lo = buf[len + byte_count];
 800cb86:	8aba      	ldrh	r2, [r7, #20]
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4413      	add	r3, r2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	737b      	strb	r3, [r7, #13]
	uint8_t error_check_hi = buf[len + byte_count + 1];
 800cb96:	8aba      	ldrh	r2, [r7, #20]
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	4413      	add	r3, r2
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	733b      	strb	r3, [r7, #12]

	uint16_t calc_crc = CRC16(buf, len+byte_count);
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	8abb      	ldrh	r3, [r7, #20]
 800cbac:	4413      	add	r3, r2
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f8b2 	bl	800cd1c <CRC16>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	817b      	strh	r3, [r7, #10]

	if(calc_crc == ((error_check_hi << 8) | error_check_lo))
 800cbbc:	897a      	ldrh	r2, [r7, #10]
 800cbbe:	7b3b      	ldrb	r3, [r7, #12]
 800cbc0:	0219      	lsls	r1, r3, #8
 800cbc2:	7b7b      	ldrb	r3, [r7, #13]
 800cbc4:	430b      	orrs	r3, r1
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d101      	bne.n	800cbce <modbus_check_crc+0xce>
		return 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e000      	b.n	800cbd0 <modbus_check_crc+0xd0>

	else {
		return 1; //error
 800cbce:	2301      	movs	r3, #1
	}
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3718      	adds	r7, #24
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <modbus_slave_rx>:

uint8_t modbus_slave_rx(Communication_Ch* ch ){
 800cbd8:	b590      	push	{r4, r7, lr}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	uint16_t register_addr = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	82bb      	strh	r3, [r7, #20]
	uint16_t register_val = 0;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	827b      	strh	r3, [r7, #18]
	uint16_t register_qty = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	823b      	strh	r3, [r7, #16]
	uint8_t byte_count = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]

	uint16_t starting_addr = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	81bb      	strh	r3, [r7, #12]
	uint16_t quantity_of_register = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	817b      	strh	r3, [r7, #10]

	//Communication_Ch* ch = Channel_Mapping(channel);

	//todo: crc check

	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	799a      	ldrb	r2, [r3, #6]
 800cbfc:	4b43      	ldr	r3, [pc, #268]	; (800cd0c <modbus_slave_rx+0x134>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d17c      	bne.n	800ccfe <modbus_slave_rx+0x126>

		if(modbus_check_crc(&ch->rx_data_buf) != 0) return 1; //todo: return what?
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3306      	adds	r3, #6
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff ff79 	bl	800cb00 <modbus_check_crc>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <modbus_slave_rx+0x40>
 800cc14:	2301      	movs	r3, #1
 800cc16:	e074      	b.n	800cd02 <modbus_slave_rx+0x12a>

		register_addr = modbus_byte2word(&ch->rx_data_buf[2]);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fd8b 	bl	800c738 <modbus_byte2word>
 800cc22:	4603      	mov	r3, r0
 800cc24:	82bb      	strh	r3, [r7, #20]
		register_qty = modbus_byte2word(&ch->rx_data_buf[4]);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	330a      	adds	r3, #10
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7ff fd84 	bl	800c738 <modbus_byte2word>
 800cc30:	4603      	mov	r3, r0
 800cc32:	823b      	strh	r3, [r7, #16]
		byte_count = ch->rx_data_buf[6];
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	7b1b      	ldrb	r3, [r3, #12]
 800cc38:	73fb      	strb	r3, [r7, #15]
		starting_addr = register_addr;
 800cc3a:	8abb      	ldrh	r3, [r7, #20]
 800cc3c:	81bb      	strh	r3, [r7, #12]

		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	79db      	ldrb	r3, [r3, #7]
 800cc42:	2b06      	cmp	r3, #6
 800cc44:	d10e      	bne.n	800cc64 <modbus_slave_rx+0x8c>
			//todo: need to save parameter to flash
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 800cc46:	89bb      	ldrh	r3, [r7, #12]
 800cc48:	2b0f      	cmp	r3, #15
 800cc4a:	d839      	bhi.n	800ccc0 <modbus_slave_rx+0xe8>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	330a      	adds	r3, #10
 800cc50:	89bc      	ldrh	r4, [r7, #12]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fd70 	bl	800c738 <modbus_byte2word>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4b2c      	ldr	r3, [pc, #176]	; (800cd10 <modbus_slave_rx+0x138>)
 800cc5e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800cc62:	e02d      	b.n	800ccc0 <modbus_slave_rx+0xe8>
			}
		}

		else if(ch->rx_data_buf[1] == MODBUS_WRITE_MULTIPLE_REGISTER){
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	79db      	ldrb	r3, [r3, #7]
 800cc68:	2b10      	cmp	r3, #16
 800cc6a:	d129      	bne.n	800ccc0 <modbus_slave_rx+0xe8>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 800cc6c:	89bb      	ldrh	r3, [r7, #12]
 800cc6e:	2b0f      	cmp	r3, #15
 800cc70:	d81c      	bhi.n	800ccac <modbus_slave_rx+0xd4>
				for(uint8_t i = 0;i<register_qty;i++){
 800cc72:	2300      	movs	r3, #0
 800cc74:	75fb      	strb	r3, [r7, #23]
 800cc76:	e013      	b.n	800cca0 <modbus_slave_rx+0xc8>
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 800cc78:	7dfb      	ldrb	r3, [r7, #23]
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	3307      	adds	r3, #7
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	4413      	add	r3, r2
 800cc82:	1d99      	adds	r1, r3, #6
 800cc84:	89ba      	ldrh	r2, [r7, #12]
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	18d4      	adds	r4, r2, r3
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	f7ff fd54 	bl	800c738 <modbus_byte2word>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461a      	mov	r2, r3
 800cc94:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <modbus_slave_rx+0x138>)
 800cc96:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				for(uint8_t i = 0;i<register_qty;i++){
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	75fb      	strb	r3, [r7, #23]
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	8a3a      	ldrh	r2, [r7, #16]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d8e6      	bhi.n	800cc78 <modbus_slave_rx+0xa0>
 800ccaa:	e009      	b.n	800ccc0 <modbus_slave_rx+0xe8>
				}
			}
			else if(starting_addr == MODBUS_DEPLOYMENT_REGISTER){//deployment command
 800ccac:	89bb      	ldrh	r3, [r7, #12]
 800ccae:	2bff      	cmp	r3, #255	; 0xff
 800ccb0:	d106      	bne.n	800ccc0 <modbus_slave_rx+0xe8>
				Parser_Modbus(&ch->rx_data_buf[7], byte_count);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	330d      	adds	r3, #13
 800ccb6:	7bfa      	ldrb	r2, [r7, #15]
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f001 fbfc 	bl	800e4b8 <Parser_Modbus>
		}

		else if(ch->rx_data_buf[1] == MODBUS_READ_HOLDING_REGISTER){
		}

		switch(ch->rx_data_buf[1]){
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	79db      	ldrb	r3, [r3, #7]
 800ccc4:	2b10      	cmp	r3, #16
 800ccc6:	bf8c      	ite	hi
 800ccc8:	2201      	movhi	r2, #1
 800ccca:	2200      	movls	r2, #0
 800cccc:	b2d2      	uxtb	r2, r2
 800ccce:	2a00      	cmp	r2, #0
 800ccd0:	d116      	bne.n	800cd00 <modbus_slave_rx+0x128>
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	409a      	lsls	r2, r3
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <modbus_slave_rx+0x13c>)
 800ccd8:	4013      	ands	r3, r2
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	bf14      	ite	ne
 800ccde:	2301      	movne	r3, #1
 800cce0:	2300      	moveq	r3, #0
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00b      	beq.n	800cd00 <modbus_slave_rx+0x128>
			case MODBUS_WRITE_SINGLE_REGISTER:
			case MODBUS_WRITE_MULTIPLE_REGISTER:
			case MODBUS_READ_HOLDING_REGISTER:
			case MODBUS_READ_INPUT_REGISTER:
				//fill the responce structure
					modbus_slave_prep_resp_data(&resp_data,
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	79d9      	ldrb	r1, [r3, #7]
 800ccec:	8a3b      	ldrh	r3, [r7, #16]
 800ccee:	8aba      	ldrh	r2, [r7, #20]
 800ccf0:	4809      	ldr	r0, [pc, #36]	; (800cd18 <modbus_slave_rx+0x140>)
 800ccf2:	f7ff fd37 	bl	800c764 <modbus_slave_prep_resp_data>
													ch->rx_data_buf[1],
														register_addr,
															register_qty);

				//initiate_tx
				modbus_slave_tx(&resp_data);
 800ccf6:	4808      	ldr	r0, [pc, #32]	; (800cd18 <modbus_slave_rx+0x140>)
 800ccf8:	f7ff fef2 	bl	800cae0 <modbus_slave_tx>
				break;
 800ccfc:	e000      	b.n	800cd00 <modbus_slave_rx+0x128>
		}
	}
 800ccfe:	bf00      	nop
	return 0;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	371c      	adds	r7, #28
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd90      	pop	{r4, r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20000098 	.word	0x20000098
 800cd10:	20001dac 	.word	0x20001dac
 800cd14:	00010058 	.word	0x00010058
 800cd18:	20001d64 	.word	0x20001d64

0800cd1c <CRC16>:

uint16_t CRC16 (const uint8_t *nData, uint16_t wLength)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	807b      	strh	r3, [r7, #2]
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 800cd28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd2c:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 800cd2e:	e011      	b.n	800cd54 <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	607a      	str	r2, [r7, #4]
 800cd36:	781a      	ldrb	r2, [r3, #0]
 800cd38:	89fb      	ldrh	r3, [r7, #14]
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	4053      	eors	r3, r2
 800cd3e:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 800cd40:	89fb      	ldrh	r3, [r7, #14]
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	81fb      	strh	r3, [r7, #14]
      wCRCWord  ^= wCRCTable[nTemp];
 800cd46:	7b7b      	ldrb	r3, [r7, #13]
 800cd48:	4a08      	ldr	r2, [pc, #32]	; (800cd6c <CRC16+0x50>)
 800cd4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800cd4e:	89fb      	ldrh	r3, [r7, #14]
 800cd50:	4053      	eors	r3, r2
 800cd52:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 800cd54:	887b      	ldrh	r3, [r7, #2]
 800cd56:	1e5a      	subs	r2, r3, #1
 800cd58:	807a      	strh	r2, [r7, #2]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1e8      	bne.n	800cd30 <CRC16+0x14>
   }
   return wCRCWord;
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
} // End: CRC16
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	0801bf50 	.word	0x0801bf50

0800cd70 <reset_all_output_channels>:
//Please write down GPIO output function in your hardware
void __attribute__((weak)) hal_gpio_write_pin(uint16_t chNum,  uint8_t value){
}


void __attribute__((weak)) reset_all_output_channels(){
 800cd70:	b480      	push	{r7}
 800cd72:	af00      	add	r7, sp, #0

}
 800cd74:	bf00      	nop
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <SDCard_WriteFile>:
void __attribute__((weak)) hal_xfer_watch_data(uint8_t len, uint8_t* watch_data){

}

//SDCard functions
uint8_t  __attribute__((weak)) SDCard_WriteFile(uint8_t file_id, uint32_t* data, uint32_t datalen, uint32_t* free_space){
 800cd7e:	b480      	push	{r7}
 800cd80:	b085      	sub	sp, #20
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	73fb      	strb	r3, [r7, #15]

}
 800cd8e:	bf00      	nop
 800cd90:	4618      	mov	r0, r3
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <init_memory_service>:
#include "stdint.h"
#include "memory_service.h"

memory_controller_t memory_controller;

void init_memory_service() {
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
	memory_controller.file_index = 0;
 800cda0:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <init_memory_service+0x1c>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	801a      	strh	r2, [r3, #0]
	memory_controller.raw_index = 0;
 800cda6:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <init_memory_service+0x1c>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	605a      	str	r2, [r3, #4]
}
 800cdac:	bf00      	nop
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	20001dec 	.word	0x20001dec

0800cdbc <checkfor_available_memory>:

static uint8_t checkfor_available_memory(uint32_t len) {
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	if (len + memory_controller.raw_index >= MEMORY_SERVICE_TOTAL_MEMORY
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <checkfor_available_memory+0x48>)
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4413      	add	r3, r2
			| memory_controller.file_index >= MEMORY_SERVICE_MAX_FILE_COUNT) //check for available free space
 800cdcc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	bf8c      	ite	hi
 800cdd4:	2301      	movhi	r3, #1
 800cdd6:	2300      	movls	r3, #0
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <checkfor_available_memory+0x48>)
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	2b0f      	cmp	r3, #15
 800cde0:	bf8c      	ite	hi
 800cde2:	2301      	movhi	r3, #1
 800cde4:	2300      	movls	r3, #0
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	4313      	orrs	r3, r2
 800cdea:	b2db      	uxtb	r3, r3
	if (len + memory_controller.raw_index >= MEMORY_SERVICE_TOTAL_MEMORY
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <checkfor_available_memory+0x38>
	{
		return 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e000      	b.n	800cdf6 <checkfor_available_memory+0x3a>
	}

	//else
	return 1;
 800cdf4:	2301      	movs	r3, #1
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	20001dec 	.word	0x20001dec

0800ce08 <allocate_memory>:

static uint16_t allocate_memory(uint32_t len, memory_type_t memory_type) {
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	460b      	mov	r3, r1
 800ce12:	70fb      	strb	r3, [r7, #3]
	memory_file_t *new_fp =
			&memory_controller.files[memory_controller.file_index];
 800ce14:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <allocate_memory+0x84>)
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
	memory_file_t *new_fp =
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	4413      	add	r3, r2
 800ce20:	00db      	lsls	r3, r3, #3
 800ce22:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800ce26:	4a19      	ldr	r2, [pc, #100]	; (800ce8c <allocate_memory+0x84>)
 800ce28:	4413      	add	r3, r2
 800ce2a:	60fb      	str	r3, [r7, #12]

	new_fp->id = memory_controller.file_index;
 800ce2c:	4b17      	ldr	r3, [pc, #92]	; (800ce8c <allocate_memory+0x84>)
 800ce2e:	881a      	ldrh	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	801a      	strh	r2, [r3, #0]
	new_fp->len = len;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	605a      	str	r2, [r3, #4]
	new_fp->crc = 0;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	609a      	str	r2, [r3, #8]
	new_fp->raw_index = memory_controller.raw_index;
 800ce40:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <allocate_memory+0x84>)
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	611a      	str	r2, [r3, #16]

	//initiate memory buffer
	new_fp->mbuf = memory_buf_init(
			&memory_controller.raw[memory_controller.raw_index], new_fp->len,
 800ce48:	4b10      	ldr	r3, [pc, #64]	; (800ce8c <allocate_memory+0x84>)
 800ce4a:	685b      	ldr	r3, [r3, #4]
	new_fp->mbuf = memory_buf_init(
 800ce4c:	3308      	adds	r3, #8
 800ce4e:	4a0f      	ldr	r2, [pc, #60]	; (800ce8c <allocate_memory+0x84>)
 800ce50:	1898      	adds	r0, r3, r2
			&memory_controller.raw[memory_controller.raw_index], new_fp->len,
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	685b      	ldr	r3, [r3, #4]
	new_fp->mbuf = memory_buf_init(
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	78fa      	ldrb	r2, [r7, #3]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f001 fe6a 	bl	800eb34 <memory_buf_init>
 800ce60:	4602      	mov	r2, r0
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	60da      	str	r2, [r3, #12]
			memory_type);

	memory_controller.file_index++;
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <allocate_memory+0x84>)
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	4b07      	ldr	r3, [pc, #28]	; (800ce8c <allocate_memory+0x84>)
 800ce70:	801a      	strh	r2, [r3, #0]
	memory_controller.raw_index += len;
 800ce72:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <allocate_memory+0x84>)
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4413      	add	r3, r2
 800ce7a:	4a04      	ldr	r2, [pc, #16]	; (800ce8c <allocate_memory+0x84>)
 800ce7c:	6053      	str	r3, [r2, #4]

	return new_fp->id;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	881b      	ldrh	r3, [r3, #0]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20001dec 	.word	0x20001dec

0800ce90 <runtime_malloc_memory>:

//returns id of the new file for ret_id
//if success return 1, fail return 0
uint8_t runtime_malloc_memory(uint32_t len, memory_type_t memory_type,
		uint16_t *ret_id) {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	72fb      	strb	r3, [r7, #11]
	if (checkfor_available_memory(len) != 0) {
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	f7ff ff8c 	bl	800cdbc <checkfor_available_memory>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <runtime_malloc_memory+0x30>
		*ret_id = allocate_memory(len, memory_type);
 800ceaa:	7afb      	ldrb	r3, [r7, #11]
 800ceac:	4619      	mov	r1, r3
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7ff ffaa 	bl	800ce08 <allocate_memory>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	801a      	strh	r2, [r3, #0]
		return 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	e000      	b.n	800cec2 <runtime_malloc_memory+0x32>
	}

	return 1; //error
 800cec0:	2301      	movs	r3, #1
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <put_file_val>:

static void put_file_val(memory_file_t *file, MBUF_DATA_T data) {
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	460b      	mov	r3, r1
 800ced4:	70fb      	strb	r3, [r7, #3]
	memory_buf_put(file->mbuf, data);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 ff30 	bl	800ed44 <memory_buf_put>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <get_file_val>:

static uint8_t get_file_val(memory_file_t *file, MBUF_DATA_T *data) {
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	return memory_buf_get(file->mbuf, data);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f001 ff49 	bl	800ed94 <memory_buf_get>
 800cf02:	4603      	mov	r3, r0
 800cf04:	b2db      	uxtb	r3, r3
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <get_file_pointer>:

memory_file_t* get_file_pointer(uint16_t file_id) {
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	80fb      	strh	r3, [r7, #6]
	if (file_id < memory_controller.file_index)
 800cf1a:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <get_file_pointer+0x34>)
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	88fa      	ldrh	r2, [r7, #6]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d209      	bcs.n	800cf38 <get_file_pointer+0x28>
		return &memory_controller.files[file_id];
 800cf24:	88fa      	ldrh	r2, [r7, #6]
 800cf26:	4613      	mov	r3, r2
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	4413      	add	r3, r2
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800cf32:	4a04      	ldr	r2, [pc, #16]	; (800cf44 <get_file_pointer+0x34>)
 800cf34:	4413      	add	r3, r2
 800cf36:	e7ff      	b.n	800cf38 <get_file_pointer+0x28>
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	20001dec 	.word	0x20001dec

0800cf48 <get_file_size>:

//returns the current buffer's byte size
uint8_t get_file_size(uint16_t file_id, uint32_t *size) {
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6039      	str	r1, [r7, #0]
 800cf52:	80fb      	strh	r3, [r7, #6]
	memory_file_t *file = get_file_pointer(file_id);
 800cf54:	88fb      	ldrh	r3, [r7, #6]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff ffda 	bl	800cf10 <get_file_pointer>
 800cf5c:	60f8      	str	r0, [r7, #12]
	memory_buf_t *buf = (file->mbuf);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	60bb      	str	r3, [r7, #8]

	//determine the size
	if (buf->head > buf->tail){
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	889a      	ldrh	r2, [r3, #4]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	88db      	ldrh	r3, [r3, #6]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d909      	bls.n	800cf84 <get_file_size+0x3c>
		*size = buf->head - buf->tail;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	889b      	ldrh	r3, [r3, #4]
 800cf74:	461a      	mov	r2, r3
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	88db      	ldrh	r3, [r3, #6]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	e01f      	b.n	800cfc4 <get_file_size+0x7c>
	}
	else if (buf->head < buf->tail) {
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	889a      	ldrh	r2, [r3, #4]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	88db      	ldrh	r3, [r3, #6]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d20c      	bcs.n	800cfaa <get_file_size+0x62>
		*size = buf->max - buf->tail + buf->head;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	891b      	ldrh	r3, [r3, #8]
 800cf94:	461a      	mov	r2, r3
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	88db      	ldrh	r3, [r3, #6]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	8892      	ldrh	r2, [r2, #4]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	e00c      	b.n	800cfc4 <get_file_size+0x7c>
	}
	else if(buf->full == 1) { //head == tail and buf->full
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	7a9b      	ldrb	r3, [r3, #10]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d105      	bne.n	800cfbe <get_file_size+0x76>
		*size = buf->max;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	891b      	ldrh	r3, [r3, #8]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	e002      	b.n	800cfc4 <get_file_size+0x7c>
	}
	else {
		*size = 0;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800cfc4:	2300      	movs	r3, #0

}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <writebuf_to_file>:
/*
* BUFFER READ/WRITE INTERFACE FUNCTIONS
*/

//Buffer write/read functions
void writebuf_to_file(uint16_t file_id, MBUF_DATA_T *buf, uint32_t len) {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	81fb      	strh	r3, [r7, #14]
	memory_file_t *file = &(memory_controller.files[file_id]);
 800cfde:	89fa      	ldrh	r2, [r7, #14]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	4413      	add	r3, r2
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800cfec:	4a0c      	ldr	r2, [pc, #48]	; (800d020 <writebuf_to_file+0x50>)
 800cfee:	4413      	add	r3, r2
 800cff0:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 0; i < len; i++) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	e00a      	b.n	800d00e <writebuf_to_file+0x3e>
		put_file_val(file, buf[i]);
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	4413      	add	r3, r2
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	4619      	mov	r1, r3
 800d002:	6938      	ldr	r0, [r7, #16]
 800d004:	f7ff ff61 	bl	800ceca <put_file_val>
	for (uint32_t i = 0; i < len; i++) {
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	3301      	adds	r3, #1
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	429a      	cmp	r2, r3
 800d014:	d3f0      	bcc.n	800cff8 <writebuf_to_file+0x28>
	}
}
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	3718      	adds	r7, #24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20001dec 	.word	0x20001dec

0800d024 <readbuf_from_file_32b>:
	for (uint32_t i = 0; i < len; i++) {
		get_file_val(file, &buf[i]);
	}
}

void readbuf_from_file_32b(uint16_t file_id, MBUF_DATA_T_32b *buf, uint32_t len) {
 800d024:	b580      	push	{r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af00      	add	r7, sp, #0
 800d02a:	4603      	mov	r3, r0
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
 800d030:	81fb      	strh	r3, [r7, #14]
	memory_file_t *file = &(memory_controller.files[file_id]);
 800d032:	89fa      	ldrh	r2, [r7, #14]
 800d034:	4613      	mov	r3, r2
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	4413      	add	r3, r2
 800d03a:	00db      	lsls	r3, r3, #3
 800d03c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800d040:	4a1d      	ldr	r2, [pc, #116]	; (800d0b8 <readbuf_from_file_32b+0x94>)
 800d042:	4413      	add	r3, r2
 800d044:	61bb      	str	r3, [r7, #24]
	uint8_t byte3,byte2,byte1,byte0;

	for (uint32_t i = 0; i < len; i++) {
 800d046:	2300      	movs	r3, #0
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	e02b      	b.n	800d0a4 <readbuf_from_file_32b+0x80>
		get_file_val(file, &byte0);
 800d04c:	f107 0314 	add.w	r3, r7, #20
 800d050:	4619      	mov	r1, r3
 800d052:	69b8      	ldr	r0, [r7, #24]
 800d054:	f7ff ff4a 	bl	800ceec <get_file_val>
		get_file_val(file, &byte1);
 800d058:	f107 0315 	add.w	r3, r7, #21
 800d05c:	4619      	mov	r1, r3
 800d05e:	69b8      	ldr	r0, [r7, #24]
 800d060:	f7ff ff44 	bl	800ceec <get_file_val>
		get_file_val(file, &byte2);
 800d064:	f107 0316 	add.w	r3, r7, #22
 800d068:	4619      	mov	r1, r3
 800d06a:	69b8      	ldr	r0, [r7, #24]
 800d06c:	f7ff ff3e 	bl	800ceec <get_file_val>
		get_file_val(file, &byte3);
 800d070:	f107 0317 	add.w	r3, r7, #23
 800d074:	4619      	mov	r1, r3
 800d076:	69b8      	ldr	r0, [r7, #24]
 800d078:	f7ff ff38 	bl	800ceec <get_file_val>

		buf[i] = (byte3 << 24) | (byte2 << 16) | (byte1<<8) | byte0;
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	061a      	lsls	r2, r3, #24
 800d080:	7dbb      	ldrb	r3, [r7, #22]
 800d082:	041b      	lsls	r3, r3, #16
 800d084:	431a      	orrs	r2, r3
 800d086:	7d7b      	ldrb	r3, [r7, #21]
 800d088:	021b      	lsls	r3, r3, #8
 800d08a:	4313      	orrs	r3, r2
 800d08c:	7d3a      	ldrb	r2, [r7, #20]
 800d08e:	ea43 0102 	orr.w	r1, r3, r2
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	4413      	add	r3, r2
 800d09a:	460a      	mov	r2, r1
 800d09c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++) {
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	61fb      	str	r3, [r7, #28]
 800d0a4:	69fa      	ldr	r2, [r7, #28]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d3cf      	bcc.n	800d04c <readbuf_from_file_32b+0x28>
	}
}
 800d0ac:	bf00      	nop
 800d0ae:	bf00      	nop
 800d0b0:	3720      	adds	r7, #32
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20001dec 	.word	0x20001dec

0800d0bc <writesingle_to_file>:

//Single value write/read functions
void writesingle_to_file(uint16_t file_id, MBUF_DATA_T val) {
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	460a      	mov	r2, r1
 800d0c6:	80fb      	strh	r3, [r7, #6]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	717b      	strb	r3, [r7, #5]
	memory_file_t *file = &(memory_controller.files[file_id]);
 800d0cc:	88fa      	ldrh	r2, [r7, #6]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	005b      	lsls	r3, r3, #1
 800d0d2:	4413      	add	r3, r2
 800d0d4:	00db      	lsls	r3, r3, #3
 800d0d6:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800d0da:	4a06      	ldr	r2, [pc, #24]	; (800d0f4 <writesingle_to_file+0x38>)
 800d0dc:	4413      	add	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
	put_file_val(file, val);
 800d0e0:	797b      	ldrb	r3, [r7, #5]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7ff fef0 	bl	800ceca <put_file_val>
}
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20001dec 	.word	0x20001dec

0800d0f8 <writesingle_to_file_32b>:

void writesingle_to_file_32b(uint16_t file_id, MBUF_DATA_T_32b val) {
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	80fb      	strh	r3, [r7, #6]
	memory_file_t *file = &(memory_controller.files[file_id]);
 800d104:	88fa      	ldrh	r2, [r7, #6]
 800d106:	4613      	mov	r3, r2
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	4413      	add	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800d112:	4a11      	ldr	r2, [pc, #68]	; (800d158 <writesingle_to_file_32b+0x60>)
 800d114:	4413      	add	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]
	put_file_val(file, val & 0xFF);
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	4619      	mov	r1, r3
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f7ff fed3 	bl	800ceca <put_file_val>
	put_file_val(file, (val>>8) & 0xFF);
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	0a1b      	lsrs	r3, r3, #8
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	4619      	mov	r1, r3
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f7ff fecc 	bl	800ceca <put_file_val>
	put_file_val(file, (val>>16) & 0xFF);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	0c1b      	lsrs	r3, r3, #16
 800d136:	b2db      	uxtb	r3, r3
 800d138:	4619      	mov	r1, r3
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fec5 	bl	800ceca <put_file_val>
	put_file_val(file, (val>>24) & 0xFF);
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	0e1b      	lsrs	r3, r3, #24
 800d144:	b2db      	uxtb	r3, r3
 800d146:	4619      	mov	r1, r3
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff febe 	bl	800ceca <put_file_val>
}
 800d14e:	bf00      	nop
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	20001dec 	.word	0x20001dec

0800d15c <fb_cycle_parser>:
#include "fb_cycle.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_cycle_parser(uint8_t* p){
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b092      	sub	sp, #72	; 0x48
 800d160:	af02      	add	r7, sp, #8
 800d162:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t rst = p[0];
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t don = (uint32_t) p[1] << 24 | p[2] << 16 | p[3] <<8 | p[4];
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	3301      	adds	r3, #1
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	061b      	lsls	r3, r3, #24
 800d174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d176:	3202      	adds	r2, #2
 800d178:	7812      	ldrb	r2, [r2, #0]
 800d17a:	0412      	lsls	r2, r2, #16
 800d17c:	4313      	orrs	r3, r2
 800d17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d180:	3203      	adds	r2, #3
 800d182:	7812      	ldrb	r2, [r2, #0]
 800d184:	0212      	lsls	r2, r2, #8
 800d186:	4313      	orrs	r3, r2
 800d188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d18a:	3204      	adds	r2, #4
 800d18c:	7812      	ldrb	r2, [r2, #0]
 800d18e:	4313      	orrs	r3, r2
 800d190:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t doff = (uint32_t) p[5] << 24 | p[6] << 16 | p[7] <<8 | p[8];
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	3305      	adds	r3, #5
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	061b      	lsls	r3, r3, #24
 800d19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d19c:	3206      	adds	r2, #6
 800d19e:	7812      	ldrb	r2, [r2, #0]
 800d1a0:	0412      	lsls	r2, r2, #16
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a6:	3207      	adds	r2, #7
 800d1a8:	7812      	ldrb	r2, [r2, #0]
 800d1aa:	0212      	lsls	r2, r2, #8
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1b0:	3208      	adds	r2, #8
 800d1b2:	7812      	ldrb	r2, [r2, #0]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t mode = p[9];
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	7a5b      	ldrb	r3, [r3, #9]
 800d1bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t in = p[10];
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	7a9b      	ldrb	r3, [r3, #10]
 800d1c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	create_fb_cycle(rst,in, don,doff,mode);
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800d1ce:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800d1d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	f000 f8cb 	bl	800d378 <create_fb_cycle>
	return 0;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3740      	adds	r7, #64	; 0x40
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <fb_cycle>:

void fb_cycle(uint8_t p){
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b08e      	sub	sp, #56	; 0x38
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
	int32_t delta_time = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	637b      	str	r3, [r7, #52]	; 0x34

	s_Param* pAddrTable = get_paramAddrTable();
 800d1fa:	f7fe ff7b 	bl	800c0f4 <get_paramAddrTable>
 800d1fe:	6338      	str	r0, [r7, #48]	; 0x30
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d212:	4413      	add	r3, r2
 800d214:	3304      	adds	r3, #4
 800d216:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 800d218:	79fb      	ldrb	r3, [r7, #7]
 800d21a:	3301      	adds	r3, #1
 800d21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d22c:	4413      	add	r3, r2
 800d22e:	3304      	adds	r3, #4
 800d230:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* don = &pAddrTable->value[pAddrTable->addr[p+2]];
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	3302      	adds	r3, #2
 800d236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d246:	4413      	add	r3, r2
 800d248:	3304      	adds	r3, #4
 800d24a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
 800d24c:	79fb      	ldrb	r3, [r7, #7]
 800d24e:	3303      	adds	r3, #3
 800d250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d260:	4413      	add	r3, r2
 800d262:	3304      	adds	r3, #4
 800d264:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	3304      	adds	r3, #4
 800d26a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d27a:	4413      	add	r3, r2
 800d27c:	3304      	adds	r3, #4
 800d27e:	61fb      	str	r3, [r7, #28]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	3305      	adds	r3, #5
 800d284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d294:	4413      	add	r3, r2
 800d296:	3304      	adds	r3, #4
 800d298:	61bb      	str	r3, [r7, #24]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800d29a:	79fb      	ldrb	r3, [r7, #7]
 800d29c:	3306      	adds	r3, #6
 800d29e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	617b      	str	r3, [r7, #20]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800d2b4:	79fb      	ldrb	r3, [r7, #7]
 800d2b6:	3307      	adds	r3, #7
 800d2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2c8:	4413      	add	r3, r2
 800d2ca:	3304      	adds	r3, #4
 800d2cc:	613b      	str	r3, [r7, #16]
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+8]];
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	3308      	adds	r3, #8
 800d2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e2:	4413      	add	r3, r2
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	60fb      	str	r3, [r7, #12]

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f0:	d10b      	bne.n	800d30a <fb_cycle+0x11e>
	{
		*cycle_counter = hal_get_tick();
 800d2f2:	f7f3 fa27 	bl	8000744 <hal_get_tick>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	601a      	str	r2, [r3, #0]
		*val = 0;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	2200      	movs	r2, #0
 800d300:	601a      	str	r2, [r3, #0]
		*out = 0;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
		else{
			*cycle_counter = hal_get_tick(); //resample again
			*val = *val + 1;
		}
	}
}
 800d308:	e031      	b.n	800d36e <fb_cycle+0x182>
		delta_time = hal_get_tick() - *cycle_counter;
 800d30a:	f7f3 fa1b 	bl	8000744 <hal_get_tick>
 800d30e:	4602      	mov	r2, r0
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < 0){
 800d318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	da08      	bge.n	800d330 <fb_cycle+0x144>
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 800d31e:	f7f3 fa11 	bl	8000744 <hal_get_tick>
 800d322:	4603      	mov	r3, r0
 800d324:	461a      	mov	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	3b01      	subs	r3, #1
 800d32e:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < *doff){
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d336:	429a      	cmp	r2, r3
 800d338:	da03      	bge.n	800d342 <fb_cycle+0x156>
			*out = 0;
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	2200      	movs	r2, #0
 800d33e:	601a      	str	r2, [r3, #0]
}
 800d340:	e015      	b.n	800d36e <fb_cycle+0x182>
		else if(delta_time < *doff + *don){
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4413      	add	r3, r2
 800d34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d34e:	429a      	cmp	r2, r3
 800d350:	da03      	bge.n	800d35a <fb_cycle+0x16e>
			*out = 1;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	2201      	movs	r2, #1
 800d356:	601a      	str	r2, [r3, #0]
}
 800d358:	e009      	b.n	800d36e <fb_cycle+0x182>
			*cycle_counter = hal_get_tick(); //resample again
 800d35a:	f7f3 f9f3 	bl	8000744 <hal_get_tick>
 800d35e:	4602      	mov	r2, r0
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	601a      	str	r2, [r3, #0]
			*val = *val + 1;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	601a      	str	r2, [r3, #0]
}
 800d36e:	bf00      	nop
 800d370:	3738      	adds	r7, #56	; 0x38
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint8_t rst,
								uint8_t in,
									uint32_t don,
										uint32_t doff,
											uint8_t mode){
 800d378:	b5b0      	push	{r4, r5, r7, lr}
 800d37a:	b090      	sub	sp, #64	; 0x40
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	607b      	str	r3, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	72fb      	strb	r3, [r7, #11]
 800d386:	4613      	mov	r3, r2
 800d388:	72bb      	strb	r3, [r7, #10]
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800d38a:	f7fe feb3 	bl	800c0f4 <get_paramAddrTable>
 800d38e:	63f8      	str	r0, [r7, #60]	; 0x3c

	fb.startParamIndex = pAddrTable->currentIndex;
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.rst = createParameter(rst);
 800d396:	7afb      	ldrb	r3, [r7, #11]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe fed9 	bl	800c150 <createParameter>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	61bb      	str	r3, [r7, #24]
	fb.fp.in = createParameter(in);
 800d3a2:	7abb      	ldrb	r3, [r7, #10]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fed3 	bl	800c150 <createParameter>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	61fb      	str	r3, [r7, #28]
	fb.fp.don = createParameter(don);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fe fecd 	bl	800c150 <createParameter>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	623b      	str	r3, [r7, #32]
	fb.fp.doff = createParameter(doff);
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fe fec7 	bl	800c150 <createParameter>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.mode = createParameter(mode);
 800d3c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fec0 	bl	800c150 <createParameter>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	62bb      	str	r3, [r7, #40]	; 0x28

	//output ports
	fb.fp.out = createParameter(0);
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	f7fe febb 	bl	800c150 <createParameter>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800d3de:	2000      	movs	r0, #0
 800d3e0:	f7fe feb6 	bl	800c150 <createParameter>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.val = createParameter(0);
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	f7fe feb1 	bl	800c150 <createParameter>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	637b      	str	r3, [r7, #52]	; 0x34

	//internal parameters
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f6:	f7fe feab 	bl	800c150 <createParameter>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	63bb      	str	r3, [r7, #56]	; 0x38

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 800d3fe:	7d7b      	ldrb	r3, [r7, #21]
 800d400:	4619      	mov	r1, r3
 800d402:	480a      	ldr	r0, [pc, #40]	; (800d42c <create_fb_cycle+0xb4>)
 800d404:	f7fe fe80 	bl	800c108 <writeToFBTable>
 800d408:	4603      	mov	r3, r0
 800d40a:	753b      	strb	r3, [r7, #20]

	return fb;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	461d      	mov	r5, r3
 800d410:	f107 0414 	add.w	r4, r7, #20
 800d414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d41a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d41c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d420:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	3740      	adds	r7, #64	; 0x40
 800d428:	46bd      	mov	sp, r7
 800d42a:	bdb0      	pop	{r4, r5, r7, pc}
 800d42c:	0800d1ed 	.word	0x0800d1ed

0800d430 <fb_encoder_parser>:
#include "mcCore.h"
#include "fb_encoder.h"
#include "adaptor.h"

//cyclic event fb
uint8_t fb_encoder_parser(uint8_t* p){
 800d430:	b580      	push	{r7, lr}
 800d432:	b08a      	sub	sp, #40	; 0x28
 800d434:	af00      	add	r7, sp, #0
 800d436:	6278      	str	r0, [r7, #36]	; 0x24
	create_fb_encoder(p[0],p[1]);
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	7819      	ldrb	r1, [r3, #0]
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	3301      	adds	r3, #1
 800d440:	781a      	ldrb	r2, [r3, #0]
 800d442:	463b      	mov	r3, r7
 800d444:	4618      	mov	r0, r3
 800d446:	f000 f87d 	bl	800d544 <create_fb_encoder>
	return 0;
 800d44a:	2300      	movs	r3, #0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3728      	adds	r7, #40	; 0x28
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <fb_encoder>:

void fb_encoder(uint8_t p){
 800d454:	b580      	push	{r7, lr}
 800d456:	b08a      	sub	sp, #40	; 0x28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	71fb      	strb	r3, [r7, #7]
	int32_t newtimer;
	s_Param* pAddrTable = get_paramAddrTable();
 800d45e:	f7fe fe49 	bl	800c0f4 <get_paramAddrTable>
 800d462:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d476:	4413      	add	r3, r2
 800d478:	3304      	adds	r3, #4
 800d47a:	623b      	str	r3, [r7, #32]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p+1]];
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	3301      	adds	r3, #1
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d490:	4413      	add	r3, r2
 800d492:	3304      	adds	r3, #4
 800d494:	61fb      	str	r3, [r7, #28]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	3302      	adds	r3, #2
 800d49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4413      	add	r3, r2
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4aa:	4413      	add	r3, r2
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+3]];
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	3303      	adds	r3, #3
 800d4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c4:	4413      	add	r3, r2
 800d4c6:	3304      	adds	r3, #4
 800d4c8:	617b      	str	r3, [r7, #20]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4413      	add	r3, r2
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4de:	4413      	add	r3, r2
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	613b      	str	r3, [r7, #16]
	int32_t* oldtimer = &pAddrTable->value[pAddrTable->addr[p+5]];
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	3305      	adds	r3, #5
 800d4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f8:	4413      	add	r3, r2
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	60fb      	str	r3, [r7, #12]

	newtimer = hal_get_encoder_value(*ch);
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4618      	mov	r0, r3
 800d504:	f7f3 fa66 	bl	80009d4 <hal_get_encoder_value>
 800d508:	60b8      	str	r0, [r7, #8]

	if(newtimer != *oldtimer){
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	429a      	cmp	r2, r3
 800d512:	d00b      	beq.n	800d52c <fb_encoder+0xd8>
		*val = *val + (newtimer-*oldtimer);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68b9      	ldr	r1, [r7, #8]
 800d51e:	1acb      	subs	r3, r1, r3
 800d520:	441a      	add	r2, r3
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	601a      	str	r2, [r3, #0]
		*oldtimer = newtimer;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	601a      	str	r2, [r3, #0]
	}

	if(*rst == 1){
 800d52c:	6a3b      	ldr	r3, [r7, #32]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d102      	bne.n	800d53a <fb_encoder+0xe6>
		*val = 0;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
	}

}
 800d53a:	bf00      	nop
 800d53c:	3728      	adds	r7, #40	; 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
	...

0800d544 <create_fb_encoder>:

type_fb_encoder create_fb_encoder(uint8_t ch,
									uint8_t mode){
 800d544:	b5b0      	push	{r4, r5, r7, lr}
 800d546:	b08a      	sub	sp, #40	; 0x28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
 800d550:	4613      	mov	r3, r2
 800d552:	70bb      	strb	r3, [r7, #2]
	type_fb_encoder fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800d554:	f7fe fdce 	bl	800c0f4 <get_paramAddrTable>
 800d558:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 800d55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.rst = createParameter(0);
 800d560:	2000      	movs	r0, #0
 800d562:	f7fe fdf5 	bl	800c150 <createParameter>
 800d566:	4603      	mov	r3, r0
 800d568:	60fb      	str	r3, [r7, #12]
	fb.fp.ch = createParameter(ch);
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fe fdef 	bl	800c150 <createParameter>
 800d572:	4603      	mov	r3, r0
 800d574:	613b      	str	r3, [r7, #16]
	fb.fp.mode = createParameter(mode);
 800d576:	78bb      	ldrb	r3, [r7, #2]
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fe fde9 	bl	800c150 <createParameter>
 800d57e:	4603      	mov	r3, r0
 800d580:	617b      	str	r3, [r7, #20]

	//output ports
	fb.fp.val = createParameter(0);
 800d582:	2000      	movs	r0, #0
 800d584:	f7fe fde4 	bl	800c150 <createParameter>
 800d588:	4603      	mov	r3, r0
 800d58a:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 800d58c:	2000      	movs	r0, #0
 800d58e:	f7fe fddf 	bl	800c150 <createParameter>
 800d592:	4603      	mov	r3, r0
 800d594:	61fb      	str	r3, [r7, #28]

	//internal parameters
	fb.fp.oldtimer = createParameter(0);
 800d596:	2000      	movs	r0, #0
 800d598:	f7fe fdda 	bl	800c150 <createParameter>
 800d59c:	4603      	mov	r3, r0
 800d59e:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_encoder, fb.startParamIndex);
 800d5a0:	7a7b      	ldrb	r3, [r7, #9]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	4809      	ldr	r0, [pc, #36]	; (800d5cc <create_fb_encoder+0x88>)
 800d5a6:	f7fe fdaf 	bl	800c108 <writeToFBTable>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	723b      	strb	r3, [r7, #8]

	return fb;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	461d      	mov	r5, r3
 800d5b2:	f107 0408 	add.w	r4, r7, #8
 800d5b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d5be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	3728      	adds	r7, #40	; 0x28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	0800d455 	.word	0x0800d455

0800d5d0 <fb_gui_display_parser>:
#include "utility.h"
#include "fb_gui_display.h"


//gui_display fb
uint8_t fb_gui_display_parser(uint8_t* p){
 800d5d0:	b590      	push	{r4, r7, lr}
 800d5d2:	b09b      	sub	sp, #108	; 0x6c
 800d5d4:	af06      	add	r7, sp, #24
 800d5d6:	6378      	str	r0, [r7, #52]	; 0x34
	uint16_t index = 0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	87bb      	strh	r3, [r7, #60]	; 0x3c

	uint16_t startX = get_uint16(p, &index);
 800d5dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5e4:	f001 f971 	bl	800e8ca <get_uint16>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t startY = get_uint16(p, &index);
 800d5ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5f6:	f001 f968 	bl	800e8ca <get_uint16>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t width = get_uint16(p, &index);
 800d600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d604:	4619      	mov	r1, r3
 800d606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d608:	f001 f95f 	bl	800e8ca <get_uint16>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t height = get_uint16(p, &index);
 800d612:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d616:	4619      	mov	r1, r3
 800d618:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d61a:	f001 f956 	bl	800e8ca <get_uint16>
 800d61e:	4603      	mov	r3, r0
 800d620:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint8_t attr = get_uint8(p, &index);
 800d624:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d628:	4619      	mov	r1, r3
 800d62a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d62c:	f001 f934 	bl	800e898 <get_uint8>
 800d630:	4603      	mov	r3, r0
 800d632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t val = get_uint32(p, &index);
 800d636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d63a:	4619      	mov	r1, r3
 800d63c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d63e:	f001 f968 	bl	800e912 <get_uint32>
 800d642:	6438      	str	r0, [r7, #64]	; 0x40
	uint8_t mode = get_uint8(p, &index);
 800d644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d648:	4619      	mov	r1, r3
 800d64a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d64c:	f001 f924 	bl	800e898 <get_uint8>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t mid = get_uint8(p, &index);
 800d656:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d65a:	4619      	mov	r1, r3
 800d65c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d65e:	f001 f91b 	bl	800e898 <get_uint8>
 800d662:	4603      	mov	r3, r0
 800d664:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	create_fb_gui_display(startX, startY, width, height, attr, val, mode, mid);
 800d668:	4638      	mov	r0, r7
 800d66a:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 800d66e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800d672:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800d676:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d67a:	9304      	str	r3, [sp, #16]
 800d67c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d684:	9302      	str	r3, [sp, #8]
 800d686:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	4623      	mov	r3, r4
 800d694:	f000 f932 	bl	800d8fc <create_fb_gui_display>

	return 0;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3754      	adds	r7, #84	; 0x54
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd90      	pop	{r4, r7, pc}

0800d6a2 <fb_gui_display>:

void fb_gui_display(uint8_t p){
 800d6a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6a4:	b097      	sub	sp, #92	; 0x5c
 800d6a6:	af04      	add	r7, sp, #16
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	71fb      	strb	r3, [r7, #7]
	uint32_t time, delta;
	char* text_str;
	uint16_t text_len;

	s_Param* pAddrTable = get_paramAddrTable();
 800d6ac:	f7fe fd22 	bl	800c0f4 <get_paramAddrTable>
 800d6b0:	6438      	str	r0, [r7, #64]	; 0x40
	int32_t* startX = &pAddrTable->value[pAddrTable->addr[p]];
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6c4:	4413      	add	r3, r2
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t* startY = &pAddrTable->value[pAddrTable->addr[p+1]];
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4413      	add	r3, r2
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6de:	4413      	add	r3, r2
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t* width = &pAddrTable->value[pAddrTable->addr[p+2]];
 800d6e4:	79fb      	ldrb	r3, [r7, #7]
 800d6e6:	3302      	adds	r3, #2
 800d6e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6f8:	4413      	add	r3, r2
 800d6fa:	3304      	adds	r3, #4
 800d6fc:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t* height = &pAddrTable->value[pAddrTable->addr[p+3]];
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	3303      	adds	r3, #3
 800d702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4413      	add	r3, r2
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d712:	4413      	add	r3, r2
 800d714:	3304      	adds	r3, #4
 800d716:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t* attr = &pAddrTable->value[pAddrTable->addr[p+4]];
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	3304      	adds	r3, #4
 800d71c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d72c:	4413      	add	r3, r2
 800d72e:	3304      	adds	r3, #4
 800d730:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+5]];
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	3305      	adds	r3, #5
 800d736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d746:	4413      	add	r3, r2
 800d748:	3304      	adds	r3, #4
 800d74a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+6]];
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	3306      	adds	r3, #6
 800d750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4413      	add	r3, r2
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d760:	4413      	add	r3, r2
 800d762:	3304      	adds	r3, #4
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* mid = &pAddrTable->value[pAddrTable->addr[p+7]];
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	3307      	adds	r3, #7
 800d76a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d77a:	4413      	add	r3, r2
 800d77c:	3304      	adds	r3, #4
 800d77e:	623b      	str	r3, [r7, #32]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	3308      	adds	r3, #8
 800d784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d794:	4413      	add	r3, r2
 800d796:	3304      	adds	r3, #4
 800d798:	61fb      	str	r3, [r7, #28]
	int32_t* old_val = &pAddrTable->value[pAddrTable->addr[p+9]];
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	3309      	adds	r3, #9
 800d79e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ae:	4413      	add	r3, r2
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	61bb      	str	r3, [r7, #24]
	int32_t* old_time = &pAddrTable->value[pAddrTable->addr[p+10]];
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	330a      	adds	r3, #10
 800d7b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7c8:	4413      	add	r3, r2
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	617b      	str	r3, [r7, #20]

	if(*old_val != *val){
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	f000 808c 	beq.w	800d8f4 <fb_gui_display+0x252>
		time = hal_get_tick();
 800d7dc:	f7f2 ffb2 	bl	8000744 <hal_get_tick>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	613b      	str	r3, [r7, #16]

		if(time > *old_time){
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d906      	bls.n	800d7fe <fb_gui_display+0x15c>
			delta = time - (uint32_t) *old_time;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	647b      	str	r3, [r7, #68]	; 0x44
 800d7fc:	e006      	b.n	800d80c <fb_gui_display+0x16a>
		}

		else{
			delta = time + (0xFFFFFFFF - *old_time);
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	461a      	mov	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	3b01      	subs	r3, #1
 800d80a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		if(delta > 1000){ //1000ms'den önce refresh işlemi yapma
 800d80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d80e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d812:	d96f      	bls.n	800d8f4 <fb_gui_display+0x252>
			*old_val = *val;
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	601a      	str	r2, [r3, #0]
			*old_time = time;
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	601a      	str	r2, [r3, #0]
			if(*mode == DISP_ELEM_TEXT_MODE){ //text mode
 800d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d120      	bne.n	800d86c <fb_gui_display+0x1ca>
				if(get_text_element(*val, &text_str, &text_len) == 0){ //text_str -> pointer of pointer(**) !!
 800d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	f107 020a 	add.w	r2, r7, #10
 800d834:	f107 010c 	add.w	r1, r7, #12
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fe fe5b 	bl	800c4f4 <get_text_element>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d157      	bne.n	800d8f4 <fb_gui_display+0x252>
					Display_String(*startX, *startY, *width, *height, *attr, text_str, text_len);
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	6818      	ldr	r0, [r3, #0]
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	6819      	ldr	r1, [r3, #0]
 800d84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d84e:	681c      	ldr	r4, [r3, #0]
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	681d      	ldr	r5, [r3, #0]
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	897e      	ldrh	r6, [r7, #10]
 800d85c:	9602      	str	r6, [sp, #8]
 800d85e:	9201      	str	r2, [sp, #4]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	462b      	mov	r3, r5
 800d864:	4622      	mov	r2, r4
 800d866:	f7f3 f8cd 	bl	8000a04 <Display_String>
			else if(*mode == DISP_ELEM_ANALOGBAR_MODE){ //image mode
				Display_AnalogBar(*startX, *startY, *width, *height, *attr, *val);
			}
		}
	}
}
 800d86a:	e043      	b.n	800d8f4 <fb_gui_display+0x252>
			else if(*mode == DISP_ELEM_NUMBER_MODE){ //number mode
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d112      	bne.n	800d89a <fb_gui_display+0x1f8>
				Display_Number(*startX, *startY, *width, *height, *attr, *val);
 800d874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d876:	6818      	ldr	r0, [r3, #0]
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	6819      	ldr	r1, [r3, #0]
 800d87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87e:	681c      	ldr	r4, [r3, #0]
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	681d      	ldr	r5, [r3, #0]
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d88a:	6812      	ldr	r2, [r2, #0]
 800d88c:	9201      	str	r2, [sp, #4]
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	462b      	mov	r3, r5
 800d892:	4622      	mov	r2, r4
 800d894:	f7f3 f8d4 	bl	8000a40 <Display_Number>
}
 800d898:	e02c      	b.n	800d8f4 <fb_gui_display+0x252>
			else if(*mode == DISP_ELEM_IMAGE_MODE){ //image mode
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d112      	bne.n	800d8c8 <fb_gui_display+0x226>
				Display_Image(*startX, *startY, *width, *height, *attr, *val);
 800d8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a4:	6818      	ldr	r0, [r3, #0]
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a8:	6819      	ldr	r1, [r3, #0]
 800d8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ac:	681c      	ldr	r4, [r3, #0]
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b8:	6812      	ldr	r2, [r2, #0]
 800d8ba:	9201      	str	r2, [sp, #4]
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	462b      	mov	r3, r5
 800d8c0:	4622      	mov	r2, r4
 800d8c2:	f7f3 f8f1 	bl	8000aa8 <Display_Image>
}
 800d8c6:	e015      	b.n	800d8f4 <fb_gui_display+0x252>
			else if(*mode == DISP_ELEM_ANALOGBAR_MODE){ //image mode
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	d111      	bne.n	800d8f4 <fb_gui_display+0x252>
				Display_AnalogBar(*startX, *startY, *width, *height, *attr, *val);
 800d8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d2:	6818      	ldr	r0, [r3, #0]
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	6819      	ldr	r1, [r3, #0]
 800d8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8da:	681c      	ldr	r4, [r3, #0]
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	681d      	ldr	r5, [r3, #0]
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e6:	6812      	ldr	r2, [r2, #0]
 800d8e8:	9201      	str	r2, [sp, #4]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	462b      	mov	r3, r5
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	f7f3 f94c 	bl	8000b8c <Display_AnalogBar>
}
 800d8f4:	bf00      	nop
 800d8f6:	374c      	adds	r7, #76	; 0x4c
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8fc <create_fb_gui_display>:

type_fb_gui_display create_fb_gui_display(uint16_t startX, uint16_t startY,
											uint16_t width, uint16_t height,
												uint8_t attr, uint32_t val,
													uint8_t mode, uint8_t mid)
{
 800d8fc:	b5b0      	push	{r4, r5, r7, lr}
 800d8fe:	b092      	sub	sp, #72	; 0x48
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	4608      	mov	r0, r1
 800d906:	4611      	mov	r1, r2
 800d908:	461a      	mov	r2, r3
 800d90a:	4603      	mov	r3, r0
 800d90c:	817b      	strh	r3, [r7, #10]
 800d90e:	460b      	mov	r3, r1
 800d910:	813b      	strh	r3, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	80fb      	strh	r3, [r7, #6]
	
	type_fb_gui_display fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800d916:	f7fe fbed 	bl	800c0f4 <get_paramAddrTable>
 800d91a:	6478      	str	r0, [r7, #68]	; 0x44

	fb.startParamIndex = pAddrTable->currentIndex;
 800d91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.startX = createParameter(startX);
 800d922:	897b      	ldrh	r3, [r7, #10]
 800d924:	4618      	mov	r0, r3
 800d926:	f7fe fc13 	bl	800c150 <createParameter>
 800d92a:	4603      	mov	r3, r0
 800d92c:	61bb      	str	r3, [r7, #24]
	fb.fp.startY = createParameter(startY);
 800d92e:	893b      	ldrh	r3, [r7, #8]
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fc0d 	bl	800c150 <createParameter>
 800d936:	4603      	mov	r3, r0
 800d938:	61fb      	str	r3, [r7, #28]
	fb.fp.width = createParameter(width);
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fe fc07 	bl	800c150 <createParameter>
 800d942:	4603      	mov	r3, r0
 800d944:	623b      	str	r3, [r7, #32]
	fb.fp.height = createParameter(height);
 800d946:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe fc00 	bl	800c150 <createParameter>
 800d950:	4603      	mov	r3, r0
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.attr = createParameter(attr);
 800d954:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe fbf9 	bl	800c150 <createParameter>
 800d95e:	4603      	mov	r3, r0
 800d960:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(val);
 800d962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d964:	4618      	mov	r0, r3
 800d966:	f7fe fbf3 	bl	800c150 <createParameter>
 800d96a:	4603      	mov	r3, r0
 800d96c:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.mode = createParameter(mode);
 800d96e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d972:	4618      	mov	r0, r3
 800d974:	f7fe fbec 	bl	800c150 <createParameter>
 800d978:	4603      	mov	r3, r0
 800d97a:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.mid = createParameter(mid);
 800d97c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800d980:	4618      	mov	r0, r3
 800d982:	f7fe fbe5 	bl	800c150 <createParameter>
 800d986:	4603      	mov	r3, r0
 800d988:	637b      	str	r3, [r7, #52]	; 0x34

	//output ports
	fb.fp.stat = createParameter(0);
 800d98a:	2000      	movs	r0, #0
 800d98c:	f7fe fbe0 	bl	800c150 <createParameter>
 800d990:	4603      	mov	r3, r0
 800d992:	63bb      	str	r3, [r7, #56]	; 0x38

	//internal parameters
	fb.fp.old_val = createParameter(-1);
 800d994:	f04f 30ff 	mov.w	r0, #4294967295
 800d998:	f7fe fbda 	bl	800c150 <createParameter>
 800d99c:	4603      	mov	r3, r0
 800d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
	fb.fp.old_time = createParameter(0);
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	f7fe fbd5 	bl	800c150 <createParameter>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	643b      	str	r3, [r7, #64]	; 0x40

	fb.fb_index = writeToFBTable(fb_gui_display, fb.startParamIndex);
 800d9aa:	7d7b      	ldrb	r3, [r7, #21]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	480a      	ldr	r0, [pc, #40]	; (800d9d8 <create_fb_gui_display+0xdc>)
 800d9b0:	f7fe fbaa 	bl	800c108 <writeToFBTable>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	753b      	strb	r3, [r7, #20]

	return fb;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	461d      	mov	r5, r3
 800d9bc:	f107 0414 	add.w	r4, r7, #20
 800d9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d9cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	3748      	adds	r7, #72	; 0x48
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d9d8:	0800d6a3 	.word	0x0800d6a3

0800d9dc <fb_inputpin_parser>:

/*--------------------------------------------------------------------------------------
						Function Block Functions
----------------------------------------------------------------------------------------*/

uint8_t fb_inputpin_parser(uint8_t* p){
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08a      	sub	sp, #40	; 0x28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	785b      	ldrb	r3, [r3, #1]
 800d9f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_inputpin(ch, mode);
 800d9f4:	463b      	mov	r3, r7
 800d9f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d9fa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 f84c 	bl	800da9c <create_fb_inputpin>
	return 0;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3728      	adds	r7, #40	; 0x28
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <fb_inputpin>:

void fb_inputpin(uint8_t p){
 800da0e:	b580      	push	{r7, lr}
 800da10:	b088      	sub	sp, #32
 800da12:	af00      	add	r7, sp, #0
 800da14:	4603      	mov	r3, r0
 800da16:	71fb      	strb	r3, [r7, #7]

	s_Param* pAddrTable = get_paramAddrTable();
 800da18:	f7fe fb6c 	bl	800c0f4 <get_paramAddrTable>
 800da1c:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 800da1e:	79fb      	ldrb	r3, [r7, #7]
 800da20:	69fa      	ldr	r2, [r7, #28]
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4413      	add	r3, r2
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	4413      	add	r3, r2
 800da32:	3304      	adds	r3, #4
 800da34:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 800da36:	79fb      	ldrb	r3, [r7, #7]
 800da38:	3301      	adds	r3, #1
 800da3a:	69fa      	ldr	r2, [r7, #28]
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4413      	add	r3, r2
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	69fa      	ldr	r2, [r7, #28]
 800da4a:	4413      	add	r3, r2
 800da4c:	3304      	adds	r3, #4
 800da4e:	617b      	str	r3, [r7, #20]
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
 800da50:	79fb      	ldrb	r3, [r7, #7]
 800da52:	3302      	adds	r3, #2
 800da54:	69fa      	ldr	r2, [r7, #28]
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	69fa      	ldr	r2, [r7, #28]
 800da64:	4413      	add	r3, r2
 800da66:	3304      	adds	r3, #4
 800da68:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800da6a:	79fb      	ldrb	r3, [r7, #7]
 800da6c:	3303      	adds	r3, #3
 800da6e:	69fa      	ldr	r2, [r7, #28]
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4413      	add	r3, r2
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	69fa      	ldr	r2, [r7, #28]
 800da7e:	4413      	add	r3, r2
 800da80:	3304      	adds	r3, #4
 800da82:	60fb      	str	r3, [r7, #12]

	*q =  hal_gpio_read_pin((uint32_t)*ch);
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f2 fddf 	bl	800064c <hal_gpio_read_pin>
 800da8e:	4602      	mov	r2, r0
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	601a      	str	r2, [r3, #0]
}
 800da94:	bf00      	nop
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t ch, uint8_t mode){
 800da9c:	b5b0      	push	{r4, r5, r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
 800daa8:	4613      	mov	r3, r2
 800daaa:	70bb      	strb	r3, [r7, #2]
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800daac:	f7fe fb22 	bl	800c0f4 <get_paramAddrTable>
 800dab0:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	727b      	strb	r3, [r7, #9]

	fb.fp.ch = createParameter(ch); //input
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fe fb48 	bl	800c150 <createParameter>
 800dac0:	4603      	mov	r3, r0
 800dac2:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode); //pin
 800dac4:	78bb      	ldrb	r3, [r7, #2]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe fb42 	bl	800c150 <createParameter>
 800dacc:	4603      	mov	r3, r0
 800dace:	613b      	str	r3, [r7, #16]
	fb.fp.q = createParameter(0);
 800dad0:	2000      	movs	r0, #0
 800dad2:	f7fe fb3d 	bl	800c150 <createParameter>
 800dad6:	4603      	mov	r3, r0
 800dad8:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800dada:	2000      	movs	r0, #0
 800dadc:	f7fe fb38 	bl	800c150 <createParameter>
 800dae0:	4603      	mov	r3, r0
 800dae2:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 800dae4:	7a7b      	ldrb	r3, [r7, #9]
 800dae6:	4619      	mov	r1, r3
 800dae8:	4808      	ldr	r0, [pc, #32]	; (800db0c <create_fb_inputpin+0x70>)
 800daea:	f7fe fb0d 	bl	800c108 <writeToFBTable>
 800daee:	4603      	mov	r3, r0
 800daf0:	723b      	strb	r3, [r7, #8]

	return fb;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	461d      	mov	r5, r3
 800daf6:	f107 0408 	add.w	r4, r7, #8
 800dafa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dafc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	602b      	str	r3, [r5, #0]
}
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	3720      	adds	r7, #32
 800db06:	46bd      	mov	sp, r7
 800db08:	bdb0      	pop	{r4, r5, r7, pc}
 800db0a:	bf00      	nop
 800db0c:	0800da0f 	.word	0x0800da0f

0800db10 <fb_jy_parser>:
#include "fb_jy.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_jy_parser(uint8_t* p){
 800db10:	b590      	push	{r4, r7, lr}
 800db12:	b08f      	sub	sp, #60	; 0x3c
 800db14:	af02      	add	r7, sp, #8
 800db16:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_jy(p[0],p[1], p[2],p[3]);
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	7819      	ldrb	r1, [r3, #0]
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	3301      	adds	r3, #1
 800db20:	781a      	ldrb	r2, [r3, #0]
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	3302      	adds	r3, #2
 800db26:	781c      	ldrb	r4, [r3, #0]
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2a:	3303      	adds	r3, #3
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	4638      	mov	r0, r7
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	4623      	mov	r3, r4
 800db34:	f000 f890 	bl	800dc58 <create_fb_jy>
	return 0;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3734      	adds	r7, #52	; 0x34
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd90      	pop	{r4, r7, pc}

0800db42 <fb_jy>:

void fb_jy(uint8_t p){
 800db42:	b580      	push	{r7, lr}
 800db44:	b08c      	sub	sp, #48	; 0x30
 800db46:	af00      	add	r7, sp, #0
 800db48:	4603      	mov	r3, r0
 800db4a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800db4c:	f7fe fad2 	bl	800c0f4 <get_paramAddrTable>
 800db50:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* ch_x = &pAddrTable->value[pAddrTable->addr[p]];
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db64:	4413      	add	r3, r2
 800db66:	3304      	adds	r3, #4
 800db68:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch_y = &pAddrTable->value[pAddrTable->addr[p+1]];
 800db6a:	79fb      	ldrb	r3, [r7, #7]
 800db6c:	3301      	adds	r3, #1
 800db6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	4413      	add	r3, r2
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db7e:	4413      	add	r3, r2
 800db80:	3304      	adds	r3, #4
 800db82:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch_btn = &pAddrTable->value[pAddrTable->addr[p+2]];
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	3302      	adds	r3, #2
 800db88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db98:	4413      	add	r3, r2
 800db9a:	3304      	adds	r3, #4
 800db9c:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	3303      	adds	r3, #3
 800dba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4413      	add	r3, r2
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbb2:	4413      	add	r3, r2
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	61fb      	str	r3, [r7, #28]
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	3304      	adds	r3, #4
 800dbbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbcc:	4413      	add	r3, r2
 800dbce:	3304      	adds	r3, #4
 800dbd0:	61bb      	str	r3, [r7, #24]
	int32_t* y = &pAddrTable->value[pAddrTable->addr[p+5]];
 800dbd2:	79fb      	ldrb	r3, [r7, #7]
 800dbd4:	3305      	adds	r3, #5
 800dbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbe6:	4413      	add	r3, r2
 800dbe8:	3304      	adds	r3, #4
 800dbea:	617b      	str	r3, [r7, #20]
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	3306      	adds	r3, #6
 800dbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc00:	4413      	add	r3, r2
 800dc02:	3304      	adds	r3, #4
 800dc04:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+7]];
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	3307      	adds	r3, #7
 800dc0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc1a:	4413      	add	r3, r2
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	60fb      	str	r3, [r7, #12]

	*x = hal_read_analog_ch(*ch_x);
 800dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7f2 fd2b 	bl	8000680 <hal_read_analog_ch>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	601a      	str	r2, [r3, #0]
	*y = hal_read_analog_ch(*ch_y);
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7f2 fd23 	bl	8000680 <hal_read_analog_ch>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	601a      	str	r2, [r3, #0]
	*btn = hal_gpio_read_pin(*ch_btn);
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f2 fd01 	bl	800064c <hal_gpio_read_pin>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	601a      	str	r2, [r3, #0]
}
 800dc50:	bf00      	nop
 800dc52:	3730      	adds	r7, #48	; 0x30
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <create_fb_jy>:

type_fb_jy create_fb_jy(uint8_t ch_x,
								uint8_t ch_y,
									uint8_t ch_btn,
											uint8_t mode){
 800dc58:	b5b0      	push	{r4, r5, r7, lr}
 800dc5a:	b08c      	sub	sp, #48	; 0x30
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	4608      	mov	r0, r1
 800dc62:	4611      	mov	r1, r2
 800dc64:	461a      	mov	r2, r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	70fb      	strb	r3, [r7, #3]
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	70bb      	strb	r3, [r7, #2]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	707b      	strb	r3, [r7, #1]
	type_fb_jy fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800dc72:	f7fe fa3f 	bl	800c0f4 <get_paramAddrTable>
 800dc76:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.ch_x = createParameter(ch_x);
 800dc7e:	78fb      	ldrb	r3, [r7, #3]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe fa65 	bl	800c150 <createParameter>
 800dc86:	4603      	mov	r3, r0
 800dc88:	60fb      	str	r3, [r7, #12]
	fb.fp.ch_y = createParameter(ch_y);
 800dc8a:	78bb      	ldrb	r3, [r7, #2]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fe fa5f 	bl	800c150 <createParameter>
 800dc92:	4603      	mov	r3, r0
 800dc94:	613b      	str	r3, [r7, #16]
	fb.fp.ch_btn = createParameter(ch_btn);
 800dc96:	787b      	ldrb	r3, [r7, #1]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fe fa59 	bl	800c150 <createParameter>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 800dca2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fa52 	bl	800c150 <createParameter>
 800dcac:	4603      	mov	r3, r0
 800dcae:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.x = createParameter(0);
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	f7fe fa4d 	bl	800c150 <createParameter>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	61fb      	str	r3, [r7, #28]
	fb.fp.y = createParameter(0);
 800dcba:	2000      	movs	r0, #0
 800dcbc:	f7fe fa48 	bl	800c150 <createParameter>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	623b      	str	r3, [r7, #32]
	fb.fp.btn = createParameter(0);
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f7fe fa43 	bl	800c150 <createParameter>
 800dcca:	4603      	mov	r3, r0
 800dccc:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.stat = createParameter(0);
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f7fe fa3e 	bl	800c150 <createParameter>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	62bb      	str	r3, [r7, #40]	; 0x28

	//internal parameters

	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 800dcd8:	7a7b      	ldrb	r3, [r7, #9]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4809      	ldr	r0, [pc, #36]	; (800dd04 <create_fb_jy+0xac>)
 800dcde:	f7fe fa13 	bl	800c108 <writeToFBTable>
 800dce2:	4603      	mov	r3, r0
 800dce4:	723b      	strb	r3, [r7, #8]

	return fb;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	461d      	mov	r5, r3
 800dcea:	f107 0408 	add.w	r4, r7, #8
 800dcee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dcf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	602b      	str	r3, [r5, #0]
}
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	3730      	adds	r7, #48	; 0x30
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bdb0      	pop	{r4, r5, r7, pc}
 800dd02:	bf00      	nop
 800dd04:	0800db43 	.word	0x0800db43

0800dd08 <fb_number_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_number.h"

//output fb
uint8_t fb_number_parser(uint8_t* p){
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
	uint16_t value = (uint16_t) p[0] <<8 | p[1];
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	021b      	lsls	r3, r3, #8
 800dd16:	b21a      	sxth	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	b21b      	sxth	r3, r3
 800dd20:	4313      	orrs	r3, r2
 800dd22:	b21b      	sxth	r3, r3
 800dd24:	81fb      	strh	r3, [r7, #14]
	create_fb_number(value);
 800dd26:	89fb      	ldrh	r3, [r7, #14]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 f811 	bl	800dd50 <create_fb_number>
	return 0;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <fb_number>:

void fb_number(uint8_t p){
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	71fb      	strb	r3, [r7, #7]
}
 800dd42:	bf00      	nop
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
	...

0800dd50 <create_fb_number>:

type_fb_number create_fb_number(uint16_t value){
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	80fb      	strh	r3, [r7, #6]
	type_fb_number fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800dd5a:	f7fe f9cb 	bl	800c0f4 <get_paramAddrTable>
 800dd5e:	6178      	str	r0, [r7, #20]

	fb.startParamIndex = pAddrTable->currentIndex;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	737b      	strb	r3, [r7, #13]

	fb.value = createParameter(value);
 800dd66:	88fb      	ldrh	r3, [r7, #6]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fe f9f1 	bl	800c150 <createParameter>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	81fb      	strh	r3, [r7, #14]

	fb.fb_index = writeToFBTable(fb_number, fb.startParamIndex);
 800dd74:	7b7b      	ldrb	r3, [r7, #13]
 800dd76:	4619      	mov	r1, r3
 800dd78:	4808      	ldr	r0, [pc, #32]	; (800dd9c <create_fb_number+0x4c>)
 800dd7a:	f7fe f9c5 	bl	800c108 <writeToFBTable>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	733b      	strb	r3, [r7, #12]
	return fb;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	613b      	str	r3, [r7, #16]
 800dd86:	2300      	movs	r3, #0
 800dd88:	8a3a      	ldrh	r2, [r7, #16]
 800dd8a:	f362 030f 	bfi	r3, r2, #0, #16
 800dd8e:	8a7a      	ldrh	r2, [r7, #18]
 800dd90:	f362 431f 	bfi	r3, r2, #16, #16
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	0800dd39 	.word	0x0800dd39

0800dda0 <fb_output_pin_parser>:
#include "fb_outputpin.h"
#include "adaptor.h"


//output fb
uint8_t fb_output_pin_parser(uint8_t* p){
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08a      	sub	sp, #40	; 0x28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t val = p[1];
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	785b      	ldrb	r3, [r3, #1]
 800ddb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t mode = p[2];
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	789b      	ldrb	r3, [r3, #2]
 800ddbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	create_fb_outputpin(ch, val, mode);
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ddc6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ddca:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800ddce:	f000 f86d 	bl	800deac <create_fb_outputpin>
	return 0;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3728      	adds	r7, #40	; 0x28
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <fb_outputpin>:

void fb_outputpin(uint8_t p){
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	4603      	mov	r3, r0
 800dde4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800dde6:	f7fe f985 	bl	800c0f4 <get_paramAddrTable>
 800ddea:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 800ddec:	79fb      	ldrb	r3, [r7, #7]
 800ddee:	69fa      	ldr	r2, [r7, #28]
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4413      	add	r3, r2
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	69fa      	ldr	r2, [r7, #28]
 800ddfe:	4413      	add	r3, r2
 800de00:	3304      	adds	r3, #4
 800de02:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+1]];
 800de04:	79fb      	ldrb	r3, [r7, #7]
 800de06:	3301      	adds	r3, #1
 800de08:	69fa      	ldr	r2, [r7, #28]
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	4413      	add	r3, r2
 800de1a:	3304      	adds	r3, #4
 800de1c:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800de1e:	79fb      	ldrb	r3, [r7, #7]
 800de20:	3302      	adds	r3, #2
 800de22:	69fa      	ldr	r2, [r7, #28]
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	4413      	add	r3, r2
 800de34:	3304      	adds	r3, #4
 800de36:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	3303      	adds	r3, #3
 800de3c:	69fa      	ldr	r2, [r7, #28]
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	69fa      	ldr	r2, [r7, #28]
 800de4c:	4413      	add	r3, r2
 800de4e:	3304      	adds	r3, #4
 800de50:	60fb      	str	r3, [r7, #12]
	int32_t* last_val = &pAddrTable->value[pAddrTable->addr[p+4]];
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	3304      	adds	r3, #4
 800de56:	69fa      	ldr	r2, [r7, #28]
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	69fa      	ldr	r2, [r7, #28]
 800de66:	4413      	add	r3, r2
 800de68:	3304      	adds	r3, #4
 800de6a:	60bb      	str	r3, [r7, #8]

	if ( *val != *last_val){
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	429a      	cmp	r2, r3
 800de76:	d015      	beq.n	800dea4 <fb_outputpin+0xc8>
		*last_val = *val;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	601a      	str	r2, [r3, #0]
		if(*val >1) *val = 1;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b01      	cmp	r3, #1
 800de86:	dd02      	ble.n	800de8e <fb_outputpin+0xb2>
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	2201      	movs	r2, #1
 800de8c:	601a      	str	r2, [r3, #0]

		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	b29b      	uxth	r3, r3
 800de94:	461a      	mov	r2, r3
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	4619      	mov	r1, r3
 800de9e:	4610      	mov	r0, r2
 800dea0:	f7f2 fbb6 	bl	8000610 <hal_gpio_write_pin>
	}
}
 800dea4:	bf00      	nop
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t ch, uint8_t val, uint8_t mode){
 800deac:	b5b0      	push	{r4, r5, r7, lr}
 800deae:	b08a      	sub	sp, #40	; 0x28
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	4608      	mov	r0, r1
 800deb6:	4611      	mov	r1, r2
 800deb8:	461a      	mov	r2, r3
 800deba:	4603      	mov	r3, r0
 800debc:	70fb      	strb	r3, [r7, #3]
 800debe:	460b      	mov	r3, r1
 800dec0:	70bb      	strb	r3, [r7, #2]
 800dec2:	4613      	mov	r3, r2
 800dec4:	707b      	strb	r3, [r7, #1]
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800dec6:	f7fe f915 	bl	800c0f4 <get_paramAddrTable>
 800deca:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.ch = createParameter(ch); //output
 800ded2:	78fb      	ldrb	r3, [r7, #3]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe f93b 	bl	800c150 <createParameter>
 800deda:	4603      	mov	r3, r0
 800dedc:	613b      	str	r3, [r7, #16]
	fb.fp.val = createParameter(val); //pin
 800dede:	78bb      	ldrb	r3, [r7, #2]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe f935 	bl	800c150 <createParameter>
 800dee6:	4603      	mov	r3, r0
 800dee8:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //pin
 800deea:	787b      	ldrb	r3, [r7, #1]
 800deec:	4618      	mov	r0, r3
 800deee:	f7fe f92f 	bl	800c150 <createParameter>
 800def2:	4603      	mov	r3, r0
 800def4:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.stat = createParameter(0);
 800def6:	2000      	movs	r0, #0
 800def8:	f7fe f92a 	bl	800c150 <createParameter>
 800defc:	4603      	mov	r3, r0
 800defe:	61fb      	str	r3, [r7, #28]

	//internal values
	fb.fp.last_val = createParameter(-1);
 800df00:	f04f 30ff 	mov.w	r0, #4294967295
 800df04:	f7fe f924 	bl	800c150 <createParameter>
 800df08:	4603      	mov	r3, r0
 800df0a:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 800df0c:	7b7b      	ldrb	r3, [r7, #13]
 800df0e:	4619      	mov	r1, r3
 800df10:	4809      	ldr	r0, [pc, #36]	; (800df38 <create_fb_outputpin+0x8c>)
 800df12:	f7fe f8f9 	bl	800c108 <writeToFBTable>
 800df16:	4603      	mov	r3, r0
 800df18:	733b      	strb	r3, [r7, #12]
	return fb;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	461d      	mov	r5, r3
 800df1e:	f107 040c 	add.w	r4, r7, #12
 800df22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df26:	e894 0003 	ldmia.w	r4, {r0, r1}
 800df2a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	3728      	adds	r7, #40	; 0x28
 800df32:	46bd      	mov	sp, r7
 800df34:	bdb0      	pop	{r4, r5, r7, pc}
 800df36:	bf00      	nop
 800df38:	0800dddd 	.word	0x0800dddd

0800df3c <init_record_memory>:
#include "fb_record.h"
#include "memory_buffer.h"
#include "memory_service.h"
#include "adaptor.h"

uint8_t init_record_memory(uint16_t* pcmem_id, uint32_t scbuf){
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
	if(runtime_malloc_memory(
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	2100      	movs	r1, #0
 800df4a:	6838      	ldr	r0, [r7, #0]
 800df4c:	f7fe ffa0 	bl	800ce90 <runtime_malloc_memory>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <init_record_memory+0x1e>
        scbuf,
            MEM_TYPE_CYCLIC_FIFO, 
                pcmem_id) == 0){
		return 0; //success
 800df56:	2300      	movs	r3, #0
 800df58:	e000      	b.n	800df5c <init_record_memory+0x20>
	}
	return 1; //error, cannot malloc memory
 800df5a:	2301      	movs	r3, #1
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <fb_record_parser>:

//cyclic event fb
uint8_t fb_record_parser(uint8_t* p){
 800df64:	b580      	push	{r7, lr}
 800df66:	b092      	sub	sp, #72	; 0x48
 800df68:	af00      	add	r7, sp, #0
 800df6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t id = p[0];
 800df6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint32_t scbuf = (uint32_t) p[1] << 24 | p[2] << 16 | p[3] <<8 | p[4];
 800df74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df76:	3301      	adds	r3, #1
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	061b      	lsls	r3, r3, #24
 800df7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df7e:	3202      	adds	r2, #2
 800df80:	7812      	ldrb	r2, [r2, #0]
 800df82:	0412      	lsls	r2, r2, #16
 800df84:	4313      	orrs	r3, r2
 800df86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df88:	3203      	adds	r2, #3
 800df8a:	7812      	ldrb	r2, [r2, #0]
 800df8c:	0212      	lsls	r2, r2, #8
 800df8e:	4313      	orrs	r3, r2
 800df90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df92:	3204      	adds	r2, #4
 800df94:	7812      	ldrb	r2, [r2, #0]
 800df96:	4313      	orrs	r3, r2
 800df98:	647b      	str	r3, [r7, #68]	; 0x44

	//don't allow scbuf to be greater than the quarter of MEMORY_SERVICE_TOTAL_MEMORY
	if(scbuf > MEMORY_SERVICE_TOTAL_MEMORY>>2) scbuf = MEMORY_SERVICE_TOTAL_MEMORY>>2;
 800df9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfa0:	d902      	bls.n	800dfa8 <fb_record_parser+0x44>
 800dfa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfa6:	647b      	str	r3, [r7, #68]	; 0x44

	create_fb_record(id, scbuf);
 800dfa8:	463b      	mov	r3, r7
 800dfaa:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800dfae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 f97d 	bl	800e2b0 <create_fb_record>

	return 0;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3748      	adds	r7, #72	; 0x48
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <fb_record>:

void fb_record(uint8_t p){
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b092      	sub	sp, #72	; 0x48
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	71fb      	strb	r3, [r7, #7]
        WAIT_REC0,WAIT_REC1, WR_TO_MEDIA, MEDIA_ERROR, NO_FREE_SPACE_ERROR};

    uint32_t buf_len;
    uint8_t* valbuf;

	s_Param* pAddrTable = get_paramAddrTable();
 800dfca:	f7fe f893 	bl	800c0f4 <get_paramAddrTable>
 800dfce:	6438      	str	r0, [r7, #64]	; 0x40

	uint32_t* rst = &pAddrTable->value[pAddrTable->addr[p++]];
 800dfd0:	79fb      	ldrb	r3, [r7, #7]
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	71fa      	strb	r2, [r7, #7]
 800dfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfe6:	4413      	add	r3, r2
 800dfe8:	3304      	adds	r3, #4
 800dfea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t* id = &pAddrTable->value[pAddrTable->addr[p++]];
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	71fa      	strb	r2, [r7, #7]
 800dff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e002:	4413      	add	r3, r2
 800e004:	3304      	adds	r3, #4
 800e006:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t* din = &pAddrTable->value[pAddrTable->addr[p++]];
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	71fa      	strb	r2, [r7, #7]
 800e00e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e01e:	4413      	add	r3, r2
 800e020:	3304      	adds	r3, #4
 800e022:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p++]];
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	1c5a      	adds	r2, r3, #1
 800e028:	71fa      	strb	r2, [r7, #7]
 800e02a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e03a:	4413      	add	r3, r2
 800e03c:	3304      	adds	r3, #4
 800e03e:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t* rec = &pAddrTable->value[pAddrTable->addr[p++]];
 800e040:	79fb      	ldrb	r3, [r7, #7]
 800e042:	1c5a      	adds	r2, r3, #1
 800e044:	71fa      	strb	r2, [r7, #7]
 800e046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e056:	4413      	add	r3, r2
 800e058:	3304      	adds	r3, #4
 800e05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t* scbuf = &pAddrTable->value[pAddrTable->addr[p++]];
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	71fa      	strb	r2, [r7, #7]
 800e062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e072:	4413      	add	r3, r2
 800e074:	3304      	adds	r3, #4
 800e076:	62bb      	str	r3, [r7, #40]	; 0x28

    uint32_t* status = &pAddrTable->value[pAddrTable->addr[p++]];
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	71fa      	strb	r2, [r7, #7]
 800e07e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e08e:	4413      	add	r3, r2
 800e090:	3304      	adds	r3, #4
 800e092:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t* error = &pAddrTable->value[pAddrTable->addr[p++]];
 800e094:	79fb      	ldrb	r3, [r7, #7]
 800e096:	1c5a      	adds	r2, r3, #1
 800e098:	71fa      	strb	r2, [r7, #7]
 800e09a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4413      	add	r3, r2
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0aa:	4413      	add	r3, r2
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t* freespace = &pAddrTable->value[pAddrTable->addr[p++]];
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	1c5a      	adds	r2, r3, #1
 800e0b4:	71fa      	strb	r2, [r7, #7]
 800e0b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0c6:	4413      	add	r3, r2
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	623b      	str	r3, [r7, #32]

    uint32_t* cmem_id = &pAddrTable->value[pAddrTable->addr[p++]];
 800e0cc:	79fb      	ldrb	r3, [r7, #7]
 800e0ce:	1c5a      	adds	r2, r3, #1
 800e0d0:	71fa      	strb	r2, [r7, #7]
 800e0d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4413      	add	r3, r2
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	61fb      	str	r3, [r7, #28]
	uint32_t* cbuf_state = &pAddrTable->value[pAddrTable->addr[p++]];
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	71fa      	strb	r2, [r7, #7]
 800e0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0fe:	4413      	add	r3, r2
 800e100:	3304      	adds	r3, #4
 800e102:	61bb      	str	r3, [r7, #24]
    uint32_t* rec_state = &pAddrTable->value[pAddrTable->addr[p++]];
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	71fa      	strb	r2, [r7, #7]
 800e10a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e11a:	4413      	add	r3, r2
 800e11c:	3304      	adds	r3, #4
 800e11e:	617b      	str	r3, [r7, #20]

    switch(*cbuf_state){
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b04      	cmp	r3, #4
 800e126:	d838      	bhi.n	800e19a <fb_record+0x1da>
 800e128:	a201      	add	r2, pc, #4	; (adr r2, 800e130 <fb_record+0x170>)
 800e12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12e:	bf00      	nop
 800e130:	0800e145 	.word	0x0800e145
 800e134:	0800e14d 	.word	0x0800e14d
 800e138:	0800e15d 	.word	0x0800e15d
 800e13c:	0800e16d 	.word	0x0800e16d
 800e140:	0800e187 	.word	0x0800e187
        case CBUF_INIT_STATE: //init state
            *cbuf_state = WAIT_WREN0;
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	2201      	movs	r2, #1
 800e148:	601a      	str	r2, [r3, #0]
            //no initialization routine yet
            break;
 800e14a:	e026      	b.n	800e19a <fb_record+0x1da>

		case WAIT_WREN0:
			if(*wren == 0) *cbuf_state = WAIT_WREN1;
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d11f      	bne.n	800e194 <fb_record+0x1d4>
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	2202      	movs	r2, #2
 800e158:	601a      	str	r2, [r3, #0]
			break;
 800e15a:	e01b      	b.n	800e194 <fb_record+0x1d4>

		case WAIT_WREN1:
			if(*wren == 1) *cbuf_state = WR_TO_CBUF;
 800e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d119      	bne.n	800e198 <fb_record+0x1d8>
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	2203      	movs	r2, #3
 800e168:	601a      	str	r2, [r3, #0]
			break;
 800e16a:	e015      	b.n	800e198 <fb_record+0x1d8>

		case WR_TO_CBUF:
			//write to register
			writesingle_to_file_32b(*cmem_id, *din); //*din data type?????
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	b29a      	uxth	r2, r3
 800e172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4619      	mov	r1, r3
 800e178:	4610      	mov	r0, r2
 800e17a:	f7fe ffbd 	bl	800d0f8 <writesingle_to_file_32b>
			*cbuf_state = WAIT_WREN0;
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	2201      	movs	r2, #1
 800e182:	601a      	str	r2, [r3, #0]
			break;
 800e184:	e009      	b.n	800e19a <fb_record+0x1da>

        case CBUF_ERROR:
        	*error = 1;
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	2201      	movs	r2, #1
 800e18a:	601a      	str	r2, [r3, #0]
            status += FB_RECORD_STAT_CMEM_ERROR;
 800e18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e18e:	3308      	adds	r3, #8
 800e190:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 800e192:	e002      	b.n	800e19a <fb_record+0x1da>
			break;
 800e194:	bf00      	nop
 800e196:	e000      	b.n	800e19a <fb_record+0x1da>
			break;
 800e198:	bf00      	nop
    }

    switch(*rec_state){
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b05      	cmp	r3, #5
 800e1a0:	f200 8082 	bhi.w	800e2a8 <fb_record+0x2e8>
 800e1a4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <fb_record+0x1ec>)
 800e1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1aa:	bf00      	nop
 800e1ac:	0800e1c5 	.word	0x0800e1c5
 800e1b0:	0800e1cd 	.word	0x0800e1cd
 800e1b4:	0800e1dd 	.word	0x0800e1dd
 800e1b8:	0800e1ed 	.word	0x0800e1ed
 800e1bc:	0800e287 	.word	0x0800e287
 800e1c0:	0800e295 	.word	0x0800e295
        case REC_INIT_STATE: //init state
            *rec_state = WAIT_REC0;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]
            //no initialization routine yet
            break;
 800e1ca:	e06d      	b.n	800e2a8 <fb_record+0x2e8>

		case WAIT_REC0:
			if(*rec == 0) *rec_state = WAIT_REC1;
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d166      	bne.n	800e2a2 <fb_record+0x2e2>
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	2202      	movs	r2, #2
 800e1d8:	601a      	str	r2, [r3, #0]
			break;
 800e1da:	e062      	b.n	800e2a2 <fb_record+0x2e2>

		case WAIT_REC1:
			if(*rec == 1) *rec_state = WR_TO_MEDIA;
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d160      	bne.n	800e2a6 <fb_record+0x2e6>
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2203      	movs	r2, #3
 800e1e8:	601a      	str	r2, [r3, #0]
			break;
 800e1ea:	e05c      	b.n	800e2a6 <fb_record+0x2e6>

		case WR_TO_MEDIA:
			//id is limited to 0xFF
			if(*id > 0xFF) *id = 0xFF;
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2bff      	cmp	r3, #255	; 0xff
 800e1f2:	d902      	bls.n	800e1fa <fb_record+0x23a>
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f6:	22ff      	movs	r2, #255	; 0xff
 800e1f8:	601a      	str	r2, [r3, #0]

			//get cbuf current size information
			get_file_size(*cmem_id, &buf_len); //returns byte count
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	f107 020c 	add.w	r2, r7, #12
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fe9e 	bl	800cf48 <get_file_size>
			buf_len = buf_len >> 2; //device for 4 to find element count
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	089b      	lsrs	r3, r3, #2
 800e210:	60fb      	str	r3, [r7, #12]

			if(buf_len > 0){ //if there are new data to record
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d032      	beq.n	800e27e <fb_record+0x2be>
				//malloc memory
				valbuf = malloc(buf_len*sizeof(MBUF_DATA_T_32b));
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4618      	mov	r0, r3
 800e21e:	f002 faff 	bl	8010820 <malloc>
 800e222:	4603      	mov	r3, r0
 800e224:	613b      	str	r3, [r7, #16]

				//fill write buf with cbuf data
				readbuf_from_file_32b(*cmem_id, valbuf, buf_len);
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	6939      	ldr	r1, [r7, #16]
 800e230:	4618      	mov	r0, r3
 800e232:	f7fe fef7 	bl	800d024 <readbuf_from_file_32b>

				if(*freespace > buf_len){ //if there is available space
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d917      	bls.n	800e270 <fb_record+0x2b0>
					//send memory to sdwrite
					if(SDCard_WriteFile(*id, valbuf, buf_len, freespace) != 0){
 800e240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e242:	6818      	ldr	r0, [r3, #0]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	6939      	ldr	r1, [r7, #16]
 800e24a:	f7fe fd98 	bl	800cd7e <SDCard_WriteFile>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d006      	beq.n	800e262 <fb_record+0x2a2>
						//there is an error at sdcard writing then media recording disabling
						//by jumping the MEDIA ERROR state
						//user can determine this error by watching status port
						*rec_state = MEDIA_ERROR;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2204      	movs	r2, #4
 800e258:	601a      	str	r2, [r3, #0]
						free(valbuf);
 800e25a:	6938      	ldr	r0, [r7, #16]
 800e25c:	f002 fae8 	bl	8010830 <free>
				}
			}
			else{
				*rec_state = WAIT_REC0;
			}
			break;
 800e260:	e022      	b.n	800e2a8 <fb_record+0x2e8>
						*rec_state = WAIT_REC0;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2201      	movs	r2, #1
 800e266:	601a      	str	r2, [r3, #0]
						free(valbuf);
 800e268:	6938      	ldr	r0, [r7, #16]
 800e26a:	f002 fae1 	bl	8010830 <free>
			break;
 800e26e:	e01b      	b.n	800e2a8 <fb_record+0x2e8>
					*rec_state = NO_FREE_SPACE_ERROR;
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	2205      	movs	r2, #5
 800e274:	601a      	str	r2, [r3, #0]
					free(valbuf);
 800e276:	6938      	ldr	r0, [r7, #16]
 800e278:	f002 fada 	bl	8010830 <free>
			break;
 800e27c:	e014      	b.n	800e2a8 <fb_record+0x2e8>
				*rec_state = WAIT_REC0;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2201      	movs	r2, #1
 800e282:	601a      	str	r2, [r3, #0]
			break;
 800e284:	e010      	b.n	800e2a8 <fb_record+0x2e8>

        case MEDIA_ERROR:
        	*error = 1;
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	2201      	movs	r2, #1
 800e28a:	601a      	str	r2, [r3, #0]
            status += FB_RECORD_STAT_MEDIA_ERROR;
 800e28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e28e:	3304      	adds	r3, #4
 800e290:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 800e292:	e009      	b.n	800e2a8 <fb_record+0x2e8>

        case NO_FREE_SPACE_ERROR:
        	*error = 1;
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	2201      	movs	r2, #1
 800e298:	601a      	str	r2, [r3, #0]
            status += FB_RECORD_STAT_MEDIA_NO_FREE_SPACEERROR;
 800e29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e29c:	3310      	adds	r3, #16
 800e29e:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 800e2a0:	e002      	b.n	800e2a8 <fb_record+0x2e8>
			break;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <fb_record+0x2e8>
			break;
 800e2a6:	bf00      	nop
    }    
}
 800e2a8:	bf00      	nop
 800e2aa:	3748      	adds	r7, #72	; 0x48
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <create_fb_record>:

type_fb_record create_fb_record(uint8_t id, uint32_t scbuf){
 800e2b0:	b5b0      	push	{r4, r5, r7, lr}
 800e2b2:	b094      	sub	sp, #80	; 0x50
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	72fb      	strb	r3, [r7, #11]
	type_fb_record fb;
    uint16_t cmem_id;

	s_Param* pAddrTable = get_paramAddrTable();
 800e2be:	f7fd ff19 	bl	800c0f4 <get_paramAddrTable>
 800e2c2:	64f8      	str	r0, [r7, #76]	; 0x4c

    if(init_record_memory(&cmem_id, scbuf) != 0) {
 800e2c4:	f107 0316 	add.w	r3, r7, #22
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff fe36 	bl	800df3c <init_record_memory>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00e      	beq.n	800e2f4 <create_fb_record+0x44>
        fb.error = ERR_FB_RECORD_NO_MEM;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	76bb      	strb	r3, [r7, #26]
        return fb;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	461d      	mov	r5, r3
 800e2de:	f107 0418 	add.w	r4, r7, #24
 800e2e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e2ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	602b      	str	r3, [r5, #0]
 800e2f2:	e057      	b.n	800e3a4 <create_fb_record+0xf4>
    }

	fb.startParamIndex = pAddrTable->currentIndex;
 800e2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	767b      	strb	r3, [r7, #25]
    fb.error = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	76bb      	strb	r3, [r7, #26]

	//input ports
    fb.fp.rst = createParameter(0);
 800e2fe:	2000      	movs	r0, #0
 800e300:	f7fd ff26 	bl	800c150 <createParameter>
 800e304:	4603      	mov	r3, r0
 800e306:	61fb      	str	r3, [r7, #28]
	fb.fp.id = createParameter(id);
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fd ff20 	bl	800c150 <createParameter>
 800e310:	4603      	mov	r3, r0
 800e312:	623b      	str	r3, [r7, #32]
    fb.fp.din = createParameter(0);
 800e314:	2000      	movs	r0, #0
 800e316:	f7fd ff1b 	bl	800c150 <createParameter>
 800e31a:	4603      	mov	r3, r0
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
    fb.fp.wren = createParameter(0);
 800e31e:	2000      	movs	r0, #0
 800e320:	f7fd ff16 	bl	800c150 <createParameter>
 800e324:	4603      	mov	r3, r0
 800e326:	62bb      	str	r3, [r7, #40]	; 0x28
    fb.fp.rec = createParameter(0);
 800e328:	2000      	movs	r0, #0
 800e32a:	f7fd ff11 	bl	800c150 <createParameter>
 800e32e:	4603      	mov	r3, r0
 800e330:	62fb      	str	r3, [r7, #44]	; 0x2c
    fb.fp.scbuf = createParameter(scbuf);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4618      	mov	r0, r3
 800e336:	f7fd ff0b 	bl	800c150 <createParameter>
 800e33a:	4603      	mov	r3, r0
 800e33c:	633b      	str	r3, [r7, #48]	; 0x30

	//output ports
    fb.fp.status = createParameter(0);
 800e33e:	2000      	movs	r0, #0
 800e340:	f7fd ff06 	bl	800c150 <createParameter>
 800e344:	4603      	mov	r3, r0
 800e346:	643b      	str	r3, [r7, #64]	; 0x40
    fb.fp.error = createParameter(0);
 800e348:	2000      	movs	r0, #0
 800e34a:	f7fd ff01 	bl	800c150 <createParameter>
 800e34e:	4603      	mov	r3, r0
 800e350:	647b      	str	r3, [r7, #68]	; 0x44
    fb.fp.freespace = createParameter(0xFFFFFFFF);
 800e352:	f04f 30ff 	mov.w	r0, #4294967295
 800e356:	f7fd fefb 	bl	800c150 <createParameter>
 800e35a:	4603      	mov	r3, r0
 800e35c:	64bb      	str	r3, [r7, #72]	; 0x48

	//internal parameters
	fb.fp.cmem_id = createParameter(cmem_id);
 800e35e:	8afb      	ldrh	r3, [r7, #22]
 800e360:	4618      	mov	r0, r3
 800e362:	f7fd fef5 	bl	800c150 <createParameter>
 800e366:	4603      	mov	r3, r0
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
    fb.fp.cbuf_state = createParameter(0);
 800e36a:	2000      	movs	r0, #0
 800e36c:	f7fd fef0 	bl	800c150 <createParameter>
 800e370:	4603      	mov	r3, r0
 800e372:	63bb      	str	r3, [r7, #56]	; 0x38
    fb.fp.rec_state = createParameter(0);
 800e374:	2000      	movs	r0, #0
 800e376:	f7fd feeb 	bl	800c150 <createParameter>
 800e37a:	4603      	mov	r3, r0
 800e37c:	63fb      	str	r3, [r7, #60]	; 0x3c


	fb.fb_index = writeToFBTable(fb_record, fb.startParamIndex);
 800e37e:	7e7b      	ldrb	r3, [r7, #25]
 800e380:	4619      	mov	r1, r3
 800e382:	480a      	ldr	r0, [pc, #40]	; (800e3ac <create_fb_record+0xfc>)
 800e384:	f7fd fec0 	bl	800c108 <writeToFBTable>
 800e388:	4603      	mov	r3, r0
 800e38a:	763b      	strb	r3, [r7, #24]

	return fb;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	461d      	mov	r5, r3
 800e390:	f107 0418 	add.w	r4, r7, #24
 800e394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e39a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e39c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e39e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	602b      	str	r3, [r5, #0]
}
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	3750      	adds	r7, #80	; 0x50
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ac:	0800dfc1 	.word	0x0800dfc1

0800e3b0 <fb_text_parser>:
#include "utility.h"
#include "text_table.h"
#include "fb_text.h"

//output fb
uint8_t fb_text_parser(uint8_t* p){
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6178      	str	r0, [r7, #20]
	uint16_t index = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	83bb      	strh	r3, [r7, #28]
	uint8_t len = get_uint8(p, &index);
 800e3bc:	f107 031c 	add.w	r3, r7, #28
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6978      	ldr	r0, [r7, #20]
 800e3c4:	f000 fa68 	bl	800e898 <get_uint8>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	77fb      	strb	r3, [r7, #31]

	create_fb_text(len, &p[index]);
 800e3cc:	8bbb      	ldrh	r3, [r7, #28]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	441a      	add	r2, r3
 800e3d4:	463b      	mov	r3, r7
 800e3d6:	7ff9      	ldrb	r1, [r7, #31]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 f811 	bl	800e400 <create_fb_text>
	return 0;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3720      	adds	r7, #32
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <fb_text>:

void fb_text(uint8_t p){
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	71fb      	strb	r3, [r7, #7]
}
 800e3f2:	bf00      	nop
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
	...

0800e400 <create_fb_text>:

type_fb_text create_fb_text(uint8_t len, char* str){
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b08b      	sub	sp, #44	; 0x2c
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	460b      	mov	r3, r1
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	72fb      	strb	r3, [r7, #11]
	type_fb_text fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800e40e:	f7fd fe71 	bl	800c0f4 <get_paramAddrTable>
 800e412:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t text_table_index;

	fb.startParamIndex = pAddrTable->currentIndex;
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	757b      	strb	r3, [r7, #21]

	//not creating a parameter for str, instead of this create an entry to the global text table
	text_table_index = create_text_table_entry(len, str);
 800e41a:	7afb      	ldrb	r3, [r7, #11]
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fe f88e 	bl	800c540 <create_text_table_entry>
 800e424:	4603      	mov	r3, r0
 800e426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(text_table_index ==2){
 800e42a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d100      	bne.n	800e434 <create_fb_text+0x34>
		asm("nop");
 800e432:	bf00      	nop
	}

	fb.fp.stat = createParameter(0);
 800e434:	2000      	movs	r0, #0
 800e436:	f7fd fe8b 	bl	800c150 <createParameter>
 800e43a:	4603      	mov	r3, r0
 800e43c:	61bb      	str	r3, [r7, #24]
	fb.fp.val = createParameter(text_table_index);
 800e43e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e442:	4618      	mov	r0, r3
 800e444:	f7fd fe84 	bl	800c150 <createParameter>
 800e448:	4603      	mov	r3, r0
 800e44a:	61fb      	str	r3, [r7, #28]

	fb.fb_index = writeToFBTable(fb_text, fb.startParamIndex);
 800e44c:	7d7b      	ldrb	r3, [r7, #21]
 800e44e:	4619      	mov	r1, r3
 800e450:	4808      	ldr	r0, [pc, #32]	; (800e474 <create_fb_text+0x74>)
 800e452:	f7fd fe59 	bl	800c108 <writeToFBTable>
 800e456:	4603      	mov	r3, r0
 800e458:	753b      	strb	r3, [r7, #20]
	return fb;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	461c      	mov	r4, r3
 800e45e:	f107 0314 	add.w	r3, r7, #20
 800e462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	372c      	adds	r7, #44	; 0x2c
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd90      	pop	{r4, r7, pc}
 800e472:	bf00      	nop
 800e474:	0800e3e9 	.word	0x0800e3e9

0800e478 <parser_create_connection>:
		fb_comp_maxmin_parser,
		fb_mod_parser,
		0
};

uint8_t parser_create_connection(uint8_t* p){
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
	make_connection(p[0], p[1]); //dest,src
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3301      	adds	r3, #1
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f7fd fe86 	bl	800c1a0 <make_connection>
	return 2;
 800e494:	2302      	movs	r3, #2
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <Parser_Modbus_GetState>:

uint8_t Parser_Modbus_GetState(){
 800e4a0:	b480      	push	{r7}
 800e4a2:	af00      	add	r7, sp, #0
	return parser_modbus_state;
 800e4a4:	4b03      	ldr	r3, [pc, #12]	; (800e4b4 <Parser_Modbus_GetState+0x14>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	200005f6 	.word	0x200005f6

0800e4b8 <Parser_Modbus>:

//This parser will parse the deployment data coming from modbus
uint8_t Parser_Modbus(uint8_t* buf, uint8_t len){
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	70fb      	strb	r3, [r7, #3]
	uint16_t parser_id;
	uint16_t cmd = modbus_byte2word(&buf[0]) ; //function
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7fe f937 	bl	800c738 <modbus_byte2word>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	81fb      	strh	r3, [r7, #14]

	switch (cmd)
 800e4ce:	89fb      	ldrh	r3, [r7, #14]
 800e4d0:	3b65      	subs	r3, #101	; 0x65
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d82b      	bhi.n	800e52e <Parser_Modbus+0x76>
 800e4d6:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <Parser_Modbus+0x24>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e4ed 	.word	0x0800e4ed
 800e4e0:	0800e513 	.word	0x0800e513
 800e4e4:	0800e51f 	.word	0x0800e51f
 800e4e8:	0800e527 	.word	0x0800e527
	{
	case CMD_CREATE_FB: //FBTYPE-PARAMS
		parser_id = modbus_byte2word(&buf[2]) ;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3302      	adds	r3, #2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe f921 	bl	800c738 <modbus_byte2word>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	81bb      	strh	r3, [r7, #12]
		if(parser_id<FB_PARSERS_SIZE){
 800e4fa:	89bb      	ldrh	r3, [r7, #12]
 800e4fc:	2b17      	cmp	r3, #23
 800e4fe:	d818      	bhi.n	800e532 <Parser_Modbus+0x7a>
			fb_parsers[parser_id](&buf[4]);
 800e500:	89bb      	ldrh	r3, [r7, #12]
 800e502:	4a11      	ldr	r2, [pc, #68]	; (800e548 <Parser_Modbus+0x90>)
 800e504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	3204      	adds	r2, #4
 800e50c:	4610      	mov	r0, r2
 800e50e:	4798      	blx	r3
		}
		break;
 800e510:	e00f      	b.n	800e532 <Parser_Modbus+0x7a>
	case CMD_CREATE_CONN: //DEST-SRC
		parser_create_connection(&buf[2]);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	3302      	adds	r3, #2
 800e516:	4618      	mov	r0, r3
 800e518:	f7ff ffae 	bl	800e478 <parser_create_connection>
		break;
 800e51c:	e00a      	b.n	800e534 <Parser_Modbus+0x7c>
	case CMD_RUN:
		//set state value to inform mccore state machine
		parser_modbus_state = CMD_RUN;
 800e51e:	4b0b      	ldr	r3, [pc, #44]	; (800e54c <Parser_Modbus+0x94>)
 800e520:	2267      	movs	r2, #103	; 0x67
 800e522:	701a      	strb	r2, [r3, #0]
		break;
 800e524:	e006      	b.n	800e534 <Parser_Modbus+0x7c>
	case CMD_KILL:
		//set state value to inform mccore state machine
		parser_modbus_state = CMD_KILL;
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <Parser_Modbus+0x94>)
 800e528:	2268      	movs	r2, #104	; 0x68
 800e52a:	701a      	strb	r2, [r3, #0]
		break;
 800e52c:	e002      	b.n	800e534 <Parser_Modbus+0x7c>

	default:
		return 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	e006      	b.n	800e540 <Parser_Modbus+0x88>
		break;
 800e532:	bf00      	nop
	}

	application_record(cmd, buf, len);
 800e534:	78fa      	ldrb	r2, [r7, #3]
 800e536:	89fb      	ldrh	r3, [r7, #14]
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 f8da 	bl	800e6f4 <application_record>
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	2000009c 	.word	0x2000009c
 800e54c:	200005f6 	.word	0x200005f6

0800e550 <init_application>:
extern const uint8_t (*fb_parsers[FB_PARSERS_SIZE])(uint8_t* p);

/*
 * Allocates memory for application record and load processes
 */
uint8_t init_application(){
 800e550:	b580      	push	{r7, lr}
 800e552:	af00      	add	r7, sp, #0
	if(runtime_malloc_memory(APPLICATION_FILE_MEMORY_SIZE, MEM_TYPE_CYCLIC_FIFO, &application_file) == 1){
 800e554:	4a06      	ldr	r2, [pc, #24]	; (800e570 <init_application+0x20>)
 800e556:	2100      	movs	r1, #0
 800e558:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e55c:	f7fe fc98 	bl	800ce90 <runtime_malloc_memory>
 800e560:	4603      	mov	r3, r0
 800e562:	2b01      	cmp	r3, #1
 800e564:	d101      	bne.n	800e56a <init_application+0x1a>
		return 0; //success
 800e566:	2300      	movs	r3, #0
 800e568:	e000      	b.n	800e56c <init_application+0x1c>
	}
	return 1; //error, cannot malloc memory
 800e56a:	2301      	movs	r3, #1
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20002774 	.word	0x20002774

0800e574 <application_record2flash>:

static void application_record2flash(){
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
	memory_file_t* file = get_file_pointer(application_file);
 800e57a:	4b0c      	ldr	r3, [pc, #48]	; (800e5ac <application_record2flash+0x38>)
 800e57c:	881b      	ldrh	r3, [r3, #0]
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fcc6 	bl	800cf10 <get_file_pointer>
 800e584:	4603      	mov	r3, r0
 800e586:	60fb      	str	r3, [r7, #12]
	memory_buf_t* buf = (file->mbuf);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	60bb      	str	r3, [r7, #8]
	uint32_t len = sizeof(MBUF_DATA_T)*buf->head;
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	889b      	ldrh	r3, [r3, #4]
 800e592:	607b      	str	r3, [r7, #4]

	write_flash_data((uint8_t*)buf->buffer, len , APPLICATION_MEMORY_ID);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2200      	movs	r2, #0
 800e59a:	6879      	ldr	r1, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 fa73 	bl	800ea88 <write_flash_data>
}
 800e5a2:	bf00      	nop
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	20002774 	.word	0x20002774

0800e5b0 <save2ram_application_data>:

static uint8_t save2ram_application_data(uint8_t* buf, uint32_t len){
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
	writesingle_to_file(application_file, len);
 800e5ba:	4b0a      	ldr	r3, [pc, #40]	; (800e5e4 <save2ram_application_data+0x34>)
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	b2d2      	uxtb	r2, r2
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fe fd79 	bl	800d0bc <writesingle_to_file>
	writebuf_to_file(application_file, buf, len);
 800e5ca:	4b06      	ldr	r3, [pc, #24]	; (800e5e4 <save2ram_application_data+0x34>)
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe fcfc 	bl	800cfd0 <writebuf_to_file>
}
 800e5d8:	bf00      	nop
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20002774 	.word	0x20002774

0800e5e8 <application_load_fromflash>:

static uint8_t application_load_fromflash(uint8_t* buf, uint32_t len){
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
	uint8_t ret = RET_APP_ERROR_ABNORMAL_DATA, app_load_finish = 0;
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	75fb      	strb	r3, [r7, #23]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	75bb      	strb	r3, [r7, #22]
	uint32_t index = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60fb      	str	r3, [r7, #12]
	uint16_t parser_id;
	uint8_t cmd, cmdbuflen;
	uint16_t next_cmd_index = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	82bb      	strh	r3, [r7, #20]

	while(app_load_finish == 0){
 800e602:	e057      	b.n	800e6b4 <application_load_fromflash+0xcc>
		index = next_cmd_index;
 800e604:	8abb      	ldrh	r3, [r7, #20]
 800e606:	60fb      	str	r3, [r7, #12]
		if(index > len) {
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	683a      	ldr	r2, [r7, #0]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d203      	bcs.n	800e618 <application_load_fromflash+0x30>
			app_load_finish = 1;
 800e610:	2301      	movs	r3, #1
 800e612:	75bb      	strb	r3, [r7, #22]
			ret = RET_APP_ERROR_OVERFLOW; //overflow error
 800e614:	2301      	movs	r3, #1
 800e616:	75fb      	strb	r3, [r7, #23]
		}
		cmdbuflen = get_uint8(buf, &index);
 800e618:	f107 030c 	add.w	r3, r7, #12
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f93a 	bl	800e898 <get_uint8>
 800e624:	4603      	mov	r3, r0
 800e626:	74fb      	strb	r3, [r7, #19]
		next_cmd_index = index + cmdbuflen;
 800e628:	7cfb      	ldrb	r3, [r7, #19]
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	4413      	add	r3, r2
 800e632:	82bb      	strh	r3, [r7, #20]

		cmd = get_uint16(buf, &index);
 800e634:	f107 030c 	add.w	r3, r7, #12
 800e638:	4619      	mov	r1, r3
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f945 	bl	800e8ca <get_uint16>
 800e640:	4603      	mov	r3, r0
 800e642:	74bb      	strb	r3, [r7, #18]
		switch (cmd)
 800e644:	7cbb      	ldrb	r3, [r7, #18]
 800e646:	3b65      	subs	r3, #101	; 0x65
 800e648:	2b03      	cmp	r3, #3
 800e64a:	d82f      	bhi.n	800e6ac <application_load_fromflash+0xc4>
 800e64c:	a201      	add	r2, pc, #4	; (adr r2, 800e654 <application_load_fromflash+0x6c>)
 800e64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e652:	bf00      	nop
 800e654:	0800e665 	.word	0x0800e665
 800e658:	0800e68f 	.word	0x0800e68f
 800e65c:	0800e69d 	.word	0x0800e69d
 800e660:	0800e6a7 	.word	0x0800e6a7
		{
		case CMD_CREATE_FB: //FBTYPE-PARAMS
			parser_id = get_uint16(buf, &index) ;
 800e664:	f107 030c 	add.w	r3, r7, #12
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f92d 	bl	800e8ca <get_uint16>
 800e670:	4603      	mov	r3, r0
 800e672:	823b      	strh	r3, [r7, #16]
			if(parser_id<FB_PARSERS_SIZE){
 800e674:	8a3b      	ldrh	r3, [r7, #16]
 800e676:	2b17      	cmp	r3, #23
 800e678:	d81c      	bhi.n	800e6b4 <application_load_fromflash+0xcc>
				fb_parsers[parser_id](&buf[index]);
 800e67a:	8a3b      	ldrh	r3, [r7, #16]
 800e67c:	4a11      	ldr	r2, [pc, #68]	; (800e6c4 <application_load_fromflash+0xdc>)
 800e67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	440a      	add	r2, r1
 800e688:	4610      	mov	r0, r2
 800e68a:	4798      	blx	r3
			}
			break;
 800e68c:	e012      	b.n	800e6b4 <application_load_fromflash+0xcc>
		case CMD_CREATE_CONN: //DEST-SRC
			parser_create_connection(&buf[index]);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	4413      	add	r3, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff feef 	bl	800e478 <parser_create_connection>
			break;
 800e69a:	e00b      	b.n	800e6b4 <application_load_fromflash+0xcc>
		case CMD_RUN:
			//set state value to inform mccore state machine
			app_load_finish = 1;
 800e69c:	2301      	movs	r3, #1
 800e69e:	75bb      	strb	r3, [r7, #22]
			ret = 0; //load succeed
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	75fb      	strb	r3, [r7, #23]
			break;
 800e6a4:	e006      	b.n	800e6b4 <application_load_fromflash+0xcc>
		case CMD_KILL:
			initiate_mccore();
 800e6a6:	f7fd fd93 	bl	800c1d0 <initiate_mccore>
			break;
 800e6aa:	e003      	b.n	800e6b4 <application_load_fromflash+0xcc>

		default:
			ret = RET_APP_ERROR_ABNORMAL_DATA;
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	75fb      	strb	r3, [r7, #23]
			app_load_finish = 1;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	75bb      	strb	r3, [r7, #22]
	while(app_load_finish == 0){
 800e6b4:	7dbb      	ldrb	r3, [r7, #22]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0a4      	beq.n	800e604 <application_load_fromflash+0x1c>
		}
	}

	return ret;
 800e6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	2000009c 	.word	0x2000009c

0800e6c8 <check_flash_memory>:

static uint8_t check_flash_memory(){
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, APPLICATION_MEMORY_ID);
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	1d3b      	adds	r3, r7, #4
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f2 f90b 	bl	80008f0 <get_flash_memory_info>

	if(mem_start_address == 0)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d102      	bne.n	800e6e6 <check_flash_memory+0x1e>
		application_flash_error = RET_APP_ERROR_FLASHHAL;
 800e6e0:	4b03      	ldr	r3, [pc, #12]	; (800e6f0 <check_flash_memory+0x28>)
 800e6e2:	2204      	movs	r2, #4
 800e6e4:	701a      	strb	r2, [r3, #0]
}
 800e6e6:	bf00      	nop
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	200005f7 	.word	0x200005f7

0800e6f4 <application_record>:
	application_load_fromflash(apptestbuf, sizeof(apptestbuf));
}
*/

void application_record(uint16_t cmd, uint8_t* buf, uint8_t len)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	6039      	str	r1, [r7, #0]
 800e6fe:	80fb      	strh	r3, [r7, #6]
 800e700:	4613      	mov	r3, r2
 800e702:	717b      	strb	r3, [r7, #5]
	//If flash error flag setted than do nothing related to flash
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 800e704:	4b13      	ldr	r3, [pc, #76]	; (800e754 <application_record+0x60>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d11e      	bne.n	800e74a <application_record+0x56>

	switch (cmd){
 800e70c:	88fb      	ldrh	r3, [r7, #6]
 800e70e:	2b68      	cmp	r3, #104	; 0x68
 800e710:	d009      	beq.n	800e726 <application_record+0x32>
 800e712:	2b68      	cmp	r3, #104	; 0x68
 800e714:	dc1a      	bgt.n	800e74c <application_record+0x58>
 800e716:	2b66      	cmp	r3, #102	; 0x66
 800e718:	dc02      	bgt.n	800e720 <application_record+0x2c>
 800e71a:	2b65      	cmp	r3, #101	; 0x65
 800e71c:	da03      	bge.n	800e726 <application_record+0x32>
 800e71e:	e015      	b.n	800e74c <application_record+0x58>
 800e720:	2b67      	cmp	r3, #103	; 0x67
 800e722:	d006      	beq.n	800e732 <application_record+0x3e>
 800e724:	e012      	b.n	800e74c <application_record+0x58>
	case CMD_CREATE_FB:
	case CMD_CREATE_CONN:
	case CMD_KILL:
		save2ram_application_data(buf, len);
 800e726:	797b      	ldrb	r3, [r7, #5]
 800e728:	4619      	mov	r1, r3
 800e72a:	6838      	ldr	r0, [r7, #0]
 800e72c:	f7ff ff40 	bl	800e5b0 <save2ram_application_data>
		break;
 800e730:	e00c      	b.n	800e74c <application_record+0x58>
	case CMD_RUN:
		hal_disable_interrupts();
 800e732:	f7f2 fb59 	bl	8000de8 <hal_disable_interrupts>
		save2ram_application_data(buf, len);
 800e736:	797b      	ldrb	r3, [r7, #5]
 800e738:	4619      	mov	r1, r3
 800e73a:	6838      	ldr	r0, [r7, #0]
 800e73c:	f7ff ff38 	bl	800e5b0 <save2ram_application_data>
		application_record2flash();
 800e740:	f7ff ff18 	bl	800e574 <application_record2flash>
		hal_enable_interrupts();
 800e744:	f7f2 fb59 	bl	8000dfa <hal_enable_interrupts>
		break;
 800e748:	e000      	b.n	800e74c <application_record+0x58>
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 800e74a:	bf00      	nop
	}
}
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	200005f7 	.word	0x200005f7

0800e758 <application_load>:

uint8_t application_load(){
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0

	//Application load is fired at power-up.
	//So it is the first called functions from application domain
	//We are checking flash here and if an error detected
	//disable all the activities related to flash
	check_flash_memory();
 800e75e:	f7ff ffb3 	bl	800e6c8 <check_flash_memory>

	//Check Flash if everything OK then continue
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 800e762:	4b10      	ldr	r3, [pc, #64]	; (800e7a4 <application_load+0x4c>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d001      	beq.n	800e76e <application_load+0x16>
 800e76a:	2304      	movs	r3, #4
 800e76c:	e016      	b.n	800e79c <application_load+0x44>

	Flash_Block* app_flash = get_flash_data(APPLICATION_MEMORY_ID);
 800e76e:	2000      	movs	r0, #0
 800e770:	f000 f9c6 	bl	800eb00 <get_flash_data>
 800e774:	60f8      	str	r0, [r7, #12]
	//init_application();

	if(app_flash->block_start_marker1 == BLOCK_START_MAGIC1){
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a0b      	ldr	r2, [pc, #44]	; (800e7a8 <application_load+0x50>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d10c      	bne.n	800e79a <application_load+0x42>
		uint8_t* p_flash = (uint8_t*)app_flash + FLASHBLOCK_HEADER_SIZE;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	3308      	adds	r3, #8
 800e784:	60bb      	str	r3, [r7, #8]

		ret = application_load_fromflash(p_flash, app_flash->length);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	4619      	mov	r1, r3
 800e78c:	68b8      	ldr	r0, [r7, #8]
 800e78e:	f7ff ff2b 	bl	800e5e8 <application_load_fromflash>
 800e792:	4603      	mov	r3, r0
 800e794:	71fb      	strb	r3, [r7, #7]
		return ret;
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	e000      	b.n	800e79c <application_load+0x44>
	}

	else
		return RET_APP_ERROR_NORECORDING;
 800e79a:	2303      	movs	r3, #3
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	200005f7 	.word	0x200005f7
 800e7a8:	01234567 	.word	0x01234567

0800e7ac <get_deployment_ch>:
#include "modbus_slave.h"
#include "deployment.h"

Communication_Ch deployment_ch = {.fdata_ready=0,.rx_data_cntr=0};

Communication_Ch* get_deployment_ch(){
 800e7ac:	b480      	push	{r7}
 800e7ae:	af00      	add	r7, sp, #0
	return &deployment_ch;
 800e7b0:	4b02      	ldr	r3, [pc, #8]	; (800e7bc <get_deployment_ch+0x10>)
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	200005f8 	.word	0x200005f8

0800e7c0 <deployment_data_validity_check>:

uint8_t deployment_data_validity_check()
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	af00      	add	r7, sp, #0
	if(deployment_ch.rx_data_cntr <2) {
 800e7c4:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <deployment_data_validity_check+0x2c>)
 800e7c6:	795b      	ldrb	r3, [r3, #5]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d809      	bhi.n	800e7e0 <deployment_data_validity_check+0x20>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 800e7cc:	4b07      	ldr	r3, [pc, #28]	; (800e7ec <deployment_data_validity_check+0x2c>)
 800e7ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	b2da      	uxtb	r2, r3
 800e7d6:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <deployment_data_validity_check+0x2c>)
 800e7d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e000      	b.n	800e7e2 <deployment_data_validity_check+0x22>
	}
	else{
		return 0;
 800e7e0:	2300      	movs	r3, #0
	}
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	200005f8 	.word	0x200005f8

0800e7f0 <init_deployment_ch>:

void init_deployment_ch(){
 800e7f0:	b480      	push	{r7}
 800e7f2:	af00      	add	r7, sp, #0
	deployment_ch.process_callback = modbus_slave_rx;
 800e7f4:	4b05      	ldr	r3, [pc, #20]	; (800e80c <init_deployment_ch+0x1c>)
 800e7f6:	4a06      	ldr	r2, [pc, #24]	; (800e810 <init_deployment_ch+0x20>)
 800e7f8:	649a      	str	r2, [r3, #72]	; 0x48
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 800e7fa:	4b04      	ldr	r3, [pc, #16]	; (800e80c <init_deployment_ch+0x1c>)
 800e7fc:	4a05      	ldr	r2, [pc, #20]	; (800e814 <init_deployment_ch+0x24>)
 800e7fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800e800:	bf00      	nop
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	200005f8 	.word	0x200005f8
 800e810:	0800cbd9 	.word	0x0800cbd9
 800e814:	0800e7c1 	.word	0x0800e7c1

0800e818 <get_watch_value>:
#include "mcCore.h"
#include "mcCore_Watch.h"


uint16_t get_watch_value(uint16_t param_index)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	4603      	mov	r3, r0
 800e820:	80fb      	strh	r3, [r7, #6]
	uint16_t value16 = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	83fb      	strh	r3, [r7, #30]
	s_Param* pAddrTable = get_paramAddrTable();
 800e826:	f7fd fc65 	bl	800c0f4 <get_paramAddrTable>
 800e82a:	61b8      	str	r0, [r7, #24]

	uint32_t value_index = pAddrTable->addr[param_index >> 1]; //take half of the incoming param_index
 800e82c:	88fb      	ldrh	r3, [r7, #6]
 800e82e:	085b      	lsrs	r3, r3, #1
 800e830:	b29b      	uxth	r3, r3
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4413      	add	r3, r2
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	617b      	str	r3, [r7, #20]
	uint32_t value = pAddrTable->value[value_index];
 800e83c:	69ba      	ldr	r2, [r7, #24]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	60fb      	str	r3, [r7, #12]
	uint8_t* p = (uint8_t*) (&value);
 800e84c:	f107 030c 	add.w	r3, r7, #12
 800e850:	613b      	str	r3, [r7, #16]

	if(param_index % 2 == 0){
 800e852:	88fb      	ldrh	r3, [r7, #6]
 800e854:	f003 0301 	and.w	r3, r3, #1
 800e858:	b29b      	uxth	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10b      	bne.n	800e876 <get_watch_value+0x5e>
		value16 = ((uint16_t)p[0]<<8) + (uint16_t)p[1];
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	b29b      	uxth	r3, r3
 800e864:	021b      	lsls	r3, r3, #8
 800e866:	b29a      	uxth	r2, r3
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	3301      	adds	r3, #1
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	4413      	add	r3, r2
 800e872:	83fb      	strh	r3, [r7, #30]
 800e874:	e00b      	b.n	800e88e <get_watch_value+0x76>
	}
	else{
		value16 = ((uint16_t)p[2]<<8) + (uint16_t)p[3];
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	3302      	adds	r3, #2
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	021b      	lsls	r3, r3, #8
 800e880:	b29a      	uxth	r2, r3
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	3303      	adds	r3, #3
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	b29b      	uxth	r3, r3
 800e88a:	4413      	add	r3, r2
 800e88c:	83fb      	strh	r3, [r7, #30]
	}

	return value16;
 800e88e:	8bfb      	ldrh	r3, [r7, #30]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3720      	adds	r7, #32
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <get_uint8>:

/*
 * Utility Functions
 */
uint8_t get_uint8(uint8_t*p, uint16_t* index)
{
 800e898:	b480      	push	{r7}
 800e89a:	b085      	sub	sp, #20
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	ret = (uint16_t) p[*index];
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	881b      	ldrh	r3, [r3, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	73fb      	strb	r3, [r7, #15]
	*index += 1;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	801a      	strh	r2, [r3, #0]
	return ret;
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <get_uint16>:

uint16_t get_uint16(uint8_t*p, uint16_t* index)
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b085      	sub	sp, #20
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
 800e8d2:	6039      	str	r1, [r7, #0]
	uint16_t ret;
	ret = (uint16_t) p[*index] <<8 | p[*index+1];
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4413      	add	r3, r2
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	021b      	lsls	r3, r3, #8
 800e8e2:	b21a      	sxth	r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	881b      	ldrh	r3, [r3, #0]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	440b      	add	r3, r1
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	b21b      	sxth	r3, r3
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	b21b      	sxth	r3, r3
 800e8f6:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	3302      	adds	r3, #2
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	801a      	strh	r2, [r3, #0]
	return ret;
 800e904:	89fb      	ldrh	r3, [r7, #14]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <get_uint32>:

uint32_t get_uint32(uint8_t*p, uint16_t* index)
{
 800e912:	b480      	push	{r7}
 800e914:	b085      	sub	sp, #20
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	ret = (uint32_t) p[*index] << 24 | p[*index+1]<< 16 | p[*index+2] <<8 | p[*index+3];
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	461a      	mov	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4413      	add	r3, r2
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	061b      	lsls	r3, r3, #24
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	8812      	ldrh	r2, [r2, #0]
 800e92e:	3201      	adds	r2, #1
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	440a      	add	r2, r1
 800e934:	7812      	ldrb	r2, [r2, #0]
 800e936:	0412      	lsls	r2, r2, #16
 800e938:	4313      	orrs	r3, r2
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	8812      	ldrh	r2, [r2, #0]
 800e93e:	3202      	adds	r2, #2
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	440a      	add	r2, r1
 800e944:	7812      	ldrb	r2, [r2, #0]
 800e946:	0212      	lsls	r2, r2, #8
 800e948:	4313      	orrs	r3, r2
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	8812      	ldrh	r2, [r2, #0]
 800e94e:	3203      	adds	r2, #3
 800e950:	6879      	ldr	r1, [r7, #4]
 800e952:	440a      	add	r2, r1
 800e954:	7812      	ldrb	r2, [r2, #0]
 800e956:	4313      	orrs	r3, r2
 800e958:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	881b      	ldrh	r3, [r3, #0]
 800e95e:	3304      	adds	r3, #4
 800e960:	b29a      	uxth	r2, r3
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	801a      	strh	r2, [r3, #0]
	return ret;
 800e966:	68fb      	ldr	r3, [r7, #12]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3714      	adds	r7, #20
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <check_for_available_memory>:
 */

#include "stdint.h"
#include "fcb.h"

static uint8_t check_for_available_memory(uint32_t start_addr, uint32_t datalen, uint8_t mem_id){
 800e974:	b580      	push	{r7, lr}
 800e976:	b088      	sub	sp, #32
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	4613      	mov	r3, r2
 800e980:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start, mem_end, mem_size;
	get_flash_memory_info(&mem_start, &mem_size, mem_id);
 800e982:	79fa      	ldrb	r2, [r7, #7]
 800e984:	f107 0114 	add.w	r1, r7, #20
 800e988:	f107 0318 	add.w	r3, r7, #24
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7f1 ffaf 	bl	80008f0 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 800e992:	69ba      	ldr	r2, [r7, #24]
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	4413      	add	r3, r2
 800e998:	61fb      	str	r3, [r7, #28]

	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	4413      	add	r3, r2
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d201      	bcs.n	800e9ac <check_for_available_memory+0x38>
		return 0; //no available memory
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	e000      	b.n	800e9ae <check_for_available_memory+0x3a>
	}

	return 1;
 800e9ac:	2301      	movs	r3, #1
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3720      	adds	r7, #32
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
	...

0800e9b8 <write_flash_block>:

static uint32_t write_flash_block(uint32_t start_addr, uint8_t* data, uint32_t datalen, uint8_t mem_id)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	70fb      	strb	r3, [r7, #3]
	//first control for the available space if there is no space then return error
	if(check_for_available_memory(start_addr, datalen, mem_id) == 1){
 800e9c6:	78fb      	ldrb	r3, [r7, #3]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f7ff ffd1 	bl	800e974 <check_for_available_memory>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d116      	bne.n	800ea06 <write_flash_block+0x4e>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 800e9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ea10 <write_flash_block+0x58>)
 800e9da:	613b      	str	r3, [r7, #16]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	617b      	str	r3, [r7, #20]

		//write header
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 800e9e0:	f107 0310 	add.w	r3, r7, #16
 800e9e4:	2208      	movs	r2, #8
 800e9e6:	68f9      	ldr	r1, [r7, #12]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7f1 ff95 	bl	8000918 <write_to_flash>

		//write data
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3308      	adds	r3, #8
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	68b8      	ldr	r0, [r7, #8]
 800e9f8:	f7f1 ff8e 	bl	8000918 <write_to_flash>

		return start_addr+FLASHBLOCK_HEADER_SIZE+datalen; //return the finish address of the block
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4413      	add	r3, r2
 800ea02:	3308      	adds	r3, #8
 800ea04:	e000      	b.n	800ea08 <write_flash_block+0x50>
	}

	return 0; //no available memory
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	01234567 	.word	0x01234567

0800ea14 <get_current_address>:

//search all flash to find the end of record
//last record: when doing search if you need the address of the last record function returns this value from the last_record
static Get_Current_Addr_Data get_current_address(uint32_t start_address, uint32_t memory_size){
 800ea14:	b480      	push	{r7}
 800ea16:	b08b      	sub	sp, #44	; 0x2c
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
	uint32_t* pflash_data;
	uint32_t flashptr, inc = 1;
 800ea20:	2301      	movs	r3, #1
 800ea22:	623b      	str	r3, [r7, #32]
	Flash_Block* temp_fb = (Flash_Block*) start_address;
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	61fb      	str	r3, [r7, #28]
	Get_Current_Addr_Data ret;

	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	617b      	str	r3, [r7, #20]

	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea30:	e010      	b.n	800ea54 <get_current_address+0x40>
	{
		temp_fb = (Flash_Block*) flashptr;
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	61fb      	str	r3, [r7, #28]

		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a12      	ldr	r2, [pc, #72]	; (800ea84 <get_current_address+0x70>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d110      	bne.n	800ea62 <get_current_address+0x4e>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	3308      	adds	r3, #8
 800ea46:	623b      	str	r3, [r7, #32]
			ret.last_record_fb = temp_fb;
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	617b      	str	r3, [r7, #20]
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800ea4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	4413      	add	r3, r2
 800ea52:	627b      	str	r3, [r7, #36]	; 0x24
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4413      	add	r3, r2
 800ea5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d3e8      	bcc.n	800ea32 <get_current_address+0x1e>
 800ea60:	e000      	b.n	800ea64 <get_current_address+0x50>
		}
		else{
			break;
 800ea62:	bf00      	nop
		}
	}
	ret.flash_pointer = flashptr;
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	61bb      	str	r3, [r7, #24]

	return ret;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	f107 0314 	add.w	r3, r7, #20
 800ea70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea74:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	372c      	adds	r7, #44	; 0x2c
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	01234567 	.word	0x01234567

0800ea88 <write_flash_data>:
//mem_id: 0 -> Function Blocks
//mem_id: 1 -> Static Parameters
//mem_id: 2 -> Dynamic Parameters
//mem_id: 3 -> Circular FIFO (Data Storage)

uint32_t write_flash_data(uint8_t* data, uint32_t length, uint8_t mem_id){
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b088      	sub	sp, #32
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start_address, mem_size;

	//Its very important length to be multiply of 4
	if(length%4 != 0){
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	f003 0303 	and.w	r3, r3, #3
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d004      	beq.n	800eaaa <write_flash_data+0x22>
		length = length + 4 - (length %4);
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	f023 0303 	bic.w	r3, r3, #3
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	60bb      	str	r3, [r7, #8]
	}

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, mem_id);
 800eaaa:	79fa      	ldrb	r2, [r7, #7]
 800eaac:	f107 0118 	add.w	r1, r7, #24
 800eab0:	f107 031c 	add.w	r3, r7, #28
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f1 ff1b 	bl	80008f0 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800eaba:	69f9      	ldr	r1, [r7, #28]
 800eabc:	69ba      	ldr	r2, [r7, #24]
 800eabe:	f107 0310 	add.w	r3, r7, #16
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7ff ffa6 	bl	800ea14 <get_current_address>

	if(check_for_available_memory(lastrecord_info.flash_pointer, length, mem_id) == 0){
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	79fa      	ldrb	r2, [r7, #7]
 800eacc:	68b9      	ldr	r1, [r7, #8]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff ff50 	bl	800e974 <check_for_available_memory>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d107      	bne.n	800eaea <write_flash_data+0x62>
		erase_flash(mem_start_address, mem_id);
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	79fa      	ldrb	r2, [r7, #7]
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7f1 ff4d 	bl	8000980 <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	617b      	str	r3, [r7, #20]
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length, mem_id);
 800eaea:	6978      	ldr	r0, [r7, #20]
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	68f9      	ldr	r1, [r7, #12]
 800eaf2:	f7ff ff61 	bl	800e9b8 <write_flash_block>
 800eaf6:	4603      	mov	r3, r0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3720      	adds	r7, #32
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <get_flash_data>:

Flash_Block* get_flash_data(uint8_t mem_id){
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b086      	sub	sp, #24
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	4603      	mov	r3, r0
 800eb08:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, mem_id);
 800eb0a:	79fa      	ldrb	r2, [r7, #7]
 800eb0c:	f107 0110 	add.w	r1, r7, #16
 800eb10:	f107 0314 	add.w	r3, r7, #20
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7f1 feeb 	bl	80008f0 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800eb1a:	6979      	ldr	r1, [r7, #20]
 800eb1c:	693a      	ldr	r2, [r7, #16]
 800eb1e:	f107 0308 	add.w	r3, r7, #8
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7ff ff76 	bl	800ea14 <get_current_address>

	return lastrecord_info.last_record_fb;
 800eb28:	68bb      	ldr	r3, [r7, #8]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
	...

0800eb34 <memory_buf_init>:

// The hidden definition of our memory buffer structure


mbuf_handle_t memory_buf_init(MBUF_DATA_T* buffer, mbuf_size_t size, memory_type_t type)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	807b      	strh	r3, [r7, #2]
 800eb40:	4613      	mov	r3, r2
 800eb42:	707b      	strb	r3, [r7, #1]
	assert(buffer && size);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <memory_buf_init+0x1c>
 800eb4a:	887b      	ldrh	r3, [r7, #2]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d105      	bne.n	800eb5c <memory_buf_init+0x28>
 800eb50:	4b18      	ldr	r3, [pc, #96]	; (800ebb4 <memory_buf_init+0x80>)
 800eb52:	4a19      	ldr	r2, [pc, #100]	; (800ebb8 <memory_buf_init+0x84>)
 800eb54:	2110      	movs	r1, #16
 800eb56:	4819      	ldr	r0, [pc, #100]	; (800ebbc <memory_buf_init+0x88>)
 800eb58:	f001 fdee 	bl	8010738 <__assert_func>

	mbuf_handle_t mbuf = malloc(sizeof(memory_buf_t));
 800eb5c:	200c      	movs	r0, #12
 800eb5e:	f001 fe5f 	bl	8010820 <malloc>
 800eb62:	4603      	mov	r3, r0
 800eb64:	60fb      	str	r3, [r7, #12]
	assert(mbuf);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d105      	bne.n	800eb78 <memory_buf_init+0x44>
 800eb6c:	4b14      	ldr	r3, [pc, #80]	; (800ebc0 <memory_buf_init+0x8c>)
 800eb6e:	4a12      	ldr	r2, [pc, #72]	; (800ebb8 <memory_buf_init+0x84>)
 800eb70:	2113      	movs	r1, #19
 800eb72:	4812      	ldr	r0, [pc, #72]	; (800ebbc <memory_buf_init+0x88>)
 800eb74:	f001 fde0 	bl	8010738 <__assert_func>

	mbuf->memory_type = type;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	787a      	ldrb	r2, [r7, #1]
 800eb7c:	72da      	strb	r2, [r3, #11]
	mbuf->buffer = buffer;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	601a      	str	r2, [r3, #0]
	mbuf->max = size;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	887a      	ldrh	r2, [r7, #2]
 800eb88:	811a      	strh	r2, [r3, #8]
	memory_buf_reset(mbuf);
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f000 f81c 	bl	800ebc8 <memory_buf_reset>

	assert(memory_buf_empty(mbuf));
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f000 f839 	bl	800ec08 <memory_buf_empty>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d105      	bne.n	800eba8 <memory_buf_init+0x74>
 800eb9c:	4b09      	ldr	r3, [pc, #36]	; (800ebc4 <memory_buf_init+0x90>)
 800eb9e:	4a06      	ldr	r2, [pc, #24]	; (800ebb8 <memory_buf_init+0x84>)
 800eba0:	211a      	movs	r1, #26
 800eba2:	4806      	ldr	r0, [pc, #24]	; (800ebbc <memory_buf_init+0x88>)
 800eba4:	f001 fdc8 	bl	8010738 <__assert_func>

	return mbuf;
 800eba8:	68fb      	ldr	r3, [r7, #12]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08011814 	.word	0x08011814
 800ebb8:	0801c150 	.word	0x0801c150
 800ebbc:	08011824 	.word	0x08011824
 800ebc0:	08011840 	.word	0x08011840
 800ebc4:	08011848 	.word	0x08011848

0800ebc8 <memory_buf_reset>:

void memory_buf_reset(mbuf_handle_t mbuf)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
    assert(mbuf);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d105      	bne.n	800ebe2 <memory_buf_reset+0x1a>
 800ebd6:	4b09      	ldr	r3, [pc, #36]	; (800ebfc <memory_buf_reset+0x34>)
 800ebd8:	4a09      	ldr	r2, [pc, #36]	; (800ec00 <memory_buf_reset+0x38>)
 800ebda:	2121      	movs	r1, #33	; 0x21
 800ebdc:	4809      	ldr	r0, [pc, #36]	; (800ec04 <memory_buf_reset+0x3c>)
 800ebde:	f001 fdab 	bl	8010738 <__assert_func>

    mbuf->head = 0;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	809a      	strh	r2, [r3, #4]
    mbuf->tail = 0;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	80da      	strh	r2, [r3, #6]
    mbuf->full = 0;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	729a      	strb	r2, [r3, #10]
}
 800ebf4:	bf00      	nop
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	08011840 	.word	0x08011840
 800ec00:	0801c160 	.word	0x0801c160
 800ec04:	08011824 	.word	0x08011824

0800ec08 <memory_buf_empty>:
	assert(mbuf);
	free(mbuf);
}

uint8_t memory_buf_empty(mbuf_handle_t mbuf)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d105      	bne.n	800ec22 <memory_buf_empty+0x1a>
 800ec16:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <memory_buf_empty+0x40>)
 800ec18:	4a0c      	ldr	r2, [pc, #48]	; (800ec4c <memory_buf_empty+0x44>)
 800ec1a:	2137      	movs	r1, #55	; 0x37
 800ec1c:	480c      	ldr	r0, [pc, #48]	; (800ec50 <memory_buf_empty+0x48>)
 800ec1e:	f001 fd8b 	bl	8010738 <__assert_func>

	return (!mbuf->full && (mbuf->head == mbuf->tail));
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	7a9b      	ldrb	r3, [r3, #10]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d107      	bne.n	800ec3a <memory_buf_empty+0x32>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	889a      	ldrh	r2, [r3, #4]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	88db      	ldrh	r3, [r3, #6]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d101      	bne.n	800ec3a <memory_buf_empty+0x32>
 800ec36:	2301      	movs	r3, #1
 800ec38:	e000      	b.n	800ec3c <memory_buf_empty+0x34>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	b2db      	uxtb	r3, r3
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	08011840 	.word	0x08011840
 800ec4c:	0801c174 	.word	0x0801c174
 800ec50:	08011824 	.word	0x08011824

0800ec54 <advance_pointer>:

	return size;
}

static void advance_pointer(mbuf_handle_t mbuf)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d105      	bne.n	800ec6e <advance_pointer+0x1a>
 800ec62:	4b1e      	ldr	r3, [pc, #120]	; (800ecdc <advance_pointer+0x88>)
 800ec64:	4a1e      	ldr	r2, [pc, #120]	; (800ece0 <advance_pointer+0x8c>)
 800ec66:	215a      	movs	r1, #90	; 0x5a
 800ec68:	481e      	ldr	r0, [pc, #120]	; (800ece4 <advance_pointer+0x90>)
 800ec6a:	f001 fd65 	bl	8010738 <__assert_func>

	if(mbuf->memory_type == MEM_TYPE_FLAT_FIFO){
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	7adb      	ldrb	r3, [r3, #11]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d02d      	beq.n	800ecd2 <advance_pointer+0x7e>

	}

	else{ //MEM_TYPE_CYCLIC_FIFO
		if(mbuf->full)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	7a9b      	ldrb	r3, [r3, #10]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00e      	beq.n	800ec9c <advance_pointer+0x48>
		{
			if (++(mbuf->tail) == mbuf->max)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	88db      	ldrh	r3, [r3, #6]
 800ec82:	3301      	adds	r3, #1
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	80da      	strh	r2, [r3, #6]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	88da      	ldrh	r2, [r3, #6]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	891b      	ldrh	r3, [r3, #8]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d102      	bne.n	800ec9c <advance_pointer+0x48>
			{
				mbuf->tail = 0;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	80da      	strh	r2, [r3, #6]
			}
		}

		if (++(mbuf->head) == mbuf->max) //head is inceremented here
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	889b      	ldrh	r3, [r3, #4]
 800eca0:	3301      	adds	r3, #1
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	809a      	strh	r2, [r3, #4]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	889a      	ldrh	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	891b      	ldrh	r3, [r3, #8]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d102      	bne.n	800ecba <advance_pointer+0x66>
		{
			mbuf->head = 0;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	809a      	strh	r2, [r3, #4]
		}
		mbuf->full = (mbuf->head == mbuf->tail);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	889a      	ldrh	r2, [r3, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	88db      	ldrh	r3, [r3, #6]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	bf0c      	ite	eq
 800ecc6:	2301      	moveq	r3, #1
 800ecc8:	2300      	movne	r3, #0
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	461a      	mov	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	729a      	strb	r2, [r3, #10]
	}
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	08011840 	.word	0x08011840
 800ece0:	0801c188 	.word	0x0801c188
 800ece4:	08011824 	.word	0x08011824

0800ece8 <retreat_pointer>:

static void retreat_pointer(mbuf_handle_t mbuf)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d105      	bne.n	800ed02 <retreat_pointer+0x1a>
 800ecf6:	4b10      	ldr	r3, [pc, #64]	; (800ed38 <retreat_pointer+0x50>)
 800ecf8:	4a10      	ldr	r2, [pc, #64]	; (800ed3c <retreat_pointer+0x54>)
 800ecfa:	2173      	movs	r1, #115	; 0x73
 800ecfc:	4810      	ldr	r0, [pc, #64]	; (800ed40 <retreat_pointer+0x58>)
 800ecfe:	f001 fd1b 	bl	8010738 <__assert_func>

	if(mbuf->memory_type == MEM_TYPE_FLAT_FIFO){
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7adb      	ldrb	r3, [r3, #11]
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d011      	beq.n	800ed2e <retreat_pointer+0x46>

	}

	else{ //MEM_TYPE_CYCLIC_FIFO
		mbuf->full = 0;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	729a      	strb	r2, [r3, #10]
		if (++(mbuf->tail) == mbuf->max)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	88db      	ldrh	r3, [r3, #6]
 800ed14:	3301      	adds	r3, #1
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	80da      	strh	r2, [r3, #6]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	88da      	ldrh	r2, [r3, #6]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	891b      	ldrh	r3, [r3, #8]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d102      	bne.n	800ed2e <retreat_pointer+0x46>
		{
			mbuf->tail = 0;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	80da      	strh	r2, [r3, #6]
		}
	}
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	08011840 	.word	0x08011840
 800ed3c:	0801c198 	.word	0x0801c198
 800ed40:	08011824 	.word	0x08011824

0800ed44 <memory_buf_put>:

void memory_buf_put(mbuf_handle_t mbuf, MBUF_DATA_T data)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	70fb      	strb	r3, [r7, #3]
	assert(mbuf && mbuf->buffer);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <memory_buf_put+0x1a>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d105      	bne.n	800ed6a <memory_buf_put+0x26>
 800ed5e:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <memory_buf_put+0x44>)
 800ed60:	4a0a      	ldr	r2, [pc, #40]	; (800ed8c <memory_buf_put+0x48>)
 800ed62:	2184      	movs	r1, #132	; 0x84
 800ed64:	480a      	ldr	r0, [pc, #40]	; (800ed90 <memory_buf_put+0x4c>)
 800ed66:	f001 fce7 	bl	8010738 <__assert_func>

    mbuf->buffer[mbuf->head] = data;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	8892      	ldrh	r2, [r2, #4]
 800ed72:	4413      	add	r3, r2
 800ed74:	78fa      	ldrb	r2, [r7, #3]
 800ed76:	701a      	strb	r2, [r3, #0]

    advance_pointer(mbuf);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff ff6b 	bl	800ec54 <advance_pointer>
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	08011860 	.word	0x08011860
 800ed8c:	0801c1a8 	.word	0x0801c1a8
 800ed90:	08011824 	.word	0x08011824

0800ed94 <memory_buf_get>:

int memory_buf_get(mbuf_handle_t mbuf, MBUF_DATA_T * data)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
    assert(mbuf && data && mbuf->buffer);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d006      	beq.n	800edb2 <memory_buf_get+0x1e>
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <memory_buf_get+0x1e>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <memory_buf_get+0x2a>
 800edb2:	4b10      	ldr	r3, [pc, #64]	; (800edf4 <memory_buf_get+0x60>)
 800edb4:	4a10      	ldr	r2, [pc, #64]	; (800edf8 <memory_buf_get+0x64>)
 800edb6:	218d      	movs	r1, #141	; 0x8d
 800edb8:	4810      	ldr	r0, [pc, #64]	; (800edfc <memory_buf_get+0x68>)
 800edba:	f001 fcbd 	bl	8010738 <__assert_func>

    int r = 1;
 800edbe:	2301      	movs	r3, #1
 800edc0:	60fb      	str	r3, [r7, #12]

    if(!memory_buf_empty(mbuf))
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff ff20 	bl	800ec08 <memory_buf_empty>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10c      	bne.n	800ede8 <memory_buf_get+0x54>
    {
        *data = mbuf->buffer[mbuf->tail];
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	88d2      	ldrh	r2, [r2, #6]
 800edd6:	4413      	add	r3, r2
 800edd8:	781a      	ldrb	r2, [r3, #0]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	701a      	strb	r2, [r3, #0]
        retreat_pointer(mbuf);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7ff ff82 	bl	800ece8 <retreat_pointer>

        r = 0;
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800ede8:	68fb      	ldr	r3, [r7, #12]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	08011878 	.word	0x08011878
 800edf8:	0801c1b8 	.word	0x0801c1b8
 800edfc:	08011824 	.word	0x08011824

0800ee00 <fb_and_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_and.h"

uint8_t fb_and_parser(uint8_t* p){
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08c      	sub	sp, #48	; 0x30
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_and(type);
 800ee10:	463b      	mov	r3, r7
 800ee12:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ee16:	4611      	mov	r1, r2
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f000 f893 	bl	800ef44 <create_fb_and>
	return 0;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3730      	adds	r7, #48	; 0x30
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <fb_and>:

void fb_and(uint8_t p){
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08a      	sub	sp, #40	; 0x28
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ee32:	f7fd f95f 	bl	800c0f4 <get_paramAddrTable>
 800ee36:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	4413      	add	r3, r2
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee4a:	4413      	add	r3, r2
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ee50:	79fb      	ldrb	r3, [r7, #7]
 800ee52:	3301      	adds	r3, #1
 800ee54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee64:	4413      	add	r3, r2
 800ee66:	3304      	adds	r3, #4
 800ee68:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	3302      	adds	r3, #2
 800ee6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee7e:	4413      	add	r3, r2
 800ee80:	3304      	adds	r3, #4
 800ee82:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ee84:	79fb      	ldrb	r3, [r7, #7]
 800ee86:	3303      	adds	r3, #3
 800ee88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	4413      	add	r3, r2
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee98:	4413      	add	r3, r2
 800ee9a:	3304      	adds	r3, #4
 800ee9c:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	3304      	adds	r3, #4
 800eea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	4413      	add	r3, r2
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb2:	4413      	add	r3, r2
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
 800eeba:	3305      	adds	r3, #5
 800eebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eecc:	4413      	add	r3, r2
 800eece:	3304      	adds	r3, #4
 800eed0:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	3306      	adds	r3, #6
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee6:	4413      	add	r3, r2
 800eee8:	3304      	adds	r3, #4
 800eeea:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800eeec:	6a3b      	ldr	r3, [r7, #32]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d10d      	bne.n	800ef10 <fb_and+0xe8>
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	401a      	ands	r2, r3
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	401a      	ands	r2, r3
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	401a      	ands	r2, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
	}

}
 800ef0e:	e014      	b.n	800ef3a <fb_and+0x112>
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00d      	beq.n	800ef34 <fb_and+0x10c>
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d009      	beq.n	800ef34 <fb_and+0x10c>
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d005      	beq.n	800ef34 <fb_and+0x10c>
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <fb_and+0x10c>
 800ef30:	2201      	movs	r2, #1
 800ef32:	e000      	b.n	800ef36 <fb_and+0x10e>
 800ef34:	2200      	movs	r2, #0
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	601a      	str	r2, [r3, #0]
}
 800ef3a:	bf00      	nop
 800ef3c:	3728      	adds	r7, #40	; 0x28
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
	...

0800ef44 <create_fb_and>:

type_fb_and create_fb_and(uint8_t type){
 800ef44:	b5b0      	push	{r4, r5, r7, lr}
 800ef46:	b08c      	sub	sp, #48	; 0x30
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800ef50:	f7fd f8d0 	bl	800c0f4 <get_paramAddrTable>
 800ef54:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_and fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800ef5c:	78fb      	ldrb	r3, [r7, #3]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fd f8f6 	bl	800c150 <createParameter>
 800ef64:	4603      	mov	r3, r0
 800ef66:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 800ef68:	2001      	movs	r0, #1
 800ef6a:	f7fd f8f1 	bl	800c150 <createParameter>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 800ef72:	2001      	movs	r0, #1
 800ef74:	f7fd f8ec 	bl	800c150 <createParameter>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f7fd f8e7 	bl	800c150 <createParameter>
 800ef82:	4603      	mov	r3, r0
 800ef84:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 800ef86:	2001      	movs	r0, #1
 800ef88:	f7fd f8e2 	bl	800c150 <createParameter>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(1); //output
 800ef90:	2001      	movs	r0, #1
 800ef92:	f7fd f8dd 	bl	800c150 <createParameter>
 800ef96:	4603      	mov	r3, r0
 800ef98:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	f7fd f8d8 	bl	800c150 <createParameter>
 800efa0:	4603      	mov	r3, r0
 800efa2:	62bb      	str	r3, [r7, #40]	; 0x28



	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 800efa4:	7b7b      	ldrb	r3, [r7, #13]
 800efa6:	4619      	mov	r1, r3
 800efa8:	4809      	ldr	r0, [pc, #36]	; (800efd0 <create_fb_and+0x8c>)
 800efaa:	f7fd f8ad 	bl	800c108 <writeToFBTable>
 800efae:	4603      	mov	r3, r0
 800efb0:	733b      	strb	r3, [r7, #12]

	return fb;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	461d      	mov	r5, r3
 800efb6:	f107 040c 	add.w	r4, r7, #12
 800efba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800efc2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	3730      	adds	r7, #48	; 0x30
 800efca:	46bd      	mov	sp, r7
 800efcc:	bdb0      	pop	{r4, r5, r7, pc}
 800efce:	bf00      	nop
 800efd0:	0800ee29 	.word	0x0800ee29

0800efd4 <fb_nand_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_nand.h"

uint8_t fb_nand_parser(uint8_t* p){
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08c      	sub	sp, #48	; 0x30
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_nand(type);
 800efe4:	463b      	mov	r3, r7
 800efe6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800efea:	4611      	mov	r1, r2
 800efec:	4618      	mov	r0, r3
 800efee:	f000 f893 	bl	800f118 <create_fb_nand>
	return 0;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3730      	adds	r7, #48	; 0x30
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <fb_nand>:

void fb_nand(uint8_t p){
 800effc:	b580      	push	{r7, lr}
 800effe:	b08a      	sub	sp, #40	; 0x28
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800f006:	f7fd f875 	bl	800c0f4 <get_paramAddrTable>
 800f00a:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	4413      	add	r3, r2
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f01e:	4413      	add	r3, r2
 800f020:	3304      	adds	r3, #4
 800f022:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	3301      	adds	r3, #1
 800f028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f038:	4413      	add	r3, r2
 800f03a:	3304      	adds	r3, #4
 800f03c:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800f03e:	79fb      	ldrb	r3, [r7, #7]
 800f040:	3302      	adds	r3, #2
 800f042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f052:	4413      	add	r3, r2
 800f054:	3304      	adds	r3, #4
 800f056:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800f058:	79fb      	ldrb	r3, [r7, #7]
 800f05a:	3303      	adds	r3, #3
 800f05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4413      	add	r3, r2
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f06c:	4413      	add	r3, r2
 800f06e:	3304      	adds	r3, #4
 800f070:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800f072:	79fb      	ldrb	r3, [r7, #7]
 800f074:	3304      	adds	r3, #4
 800f076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4413      	add	r3, r2
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f086:	4413      	add	r3, r2
 800f088:	3304      	adds	r3, #4
 800f08a:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800f08c:	79fb      	ldrb	r3, [r7, #7]
 800f08e:	3305      	adds	r3, #5
 800f090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0a0:	4413      	add	r3, r2
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800f0a6:	79fb      	ldrb	r3, [r7, #7]
 800f0a8:	3306      	adds	r3, #6
 800f0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	4413      	add	r3, r2
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ba:	4413      	add	r3, r2
 800f0bc:	3304      	adds	r3, #4
 800f0be:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800f0c0:	6a3b      	ldr	r3, [r7, #32]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d10e      	bne.n	800f0e6 <fb_nand+0xea>
		*output =  ~((*input1)&(*input2)&(*input3)&(*input4));
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	401a      	ands	r2, r3
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	401a      	ands	r2, r3
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4013      	ands	r3, r2
 800f0de:	43da      	mvns	r2, r3
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
	}
}
 800f0e4:	e014      	b.n	800f110 <fb_nand+0x114>
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00b      	beq.n	800f106 <fb_nand+0x10a>
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d007      	beq.n	800f106 <fb_nand+0x10a>
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <fb_nand+0x10a>
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d101      	bne.n	800f10a <fb_nand+0x10e>
 800f106:	2201      	movs	r2, #1
 800f108:	e000      	b.n	800f10c <fb_nand+0x110>
 800f10a:	2200      	movs	r2, #0
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	601a      	str	r2, [r3, #0]
}
 800f110:	bf00      	nop
 800f112:	3728      	adds	r7, #40	; 0x28
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <create_fb_nand>:

type_fb_nand create_fb_nand(uint8_t type){
 800f118:	b5b0      	push	{r4, r5, r7, lr}
 800f11a:	b08c      	sub	sp, #48	; 0x30
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800f124:	f7fc ffe6 	bl	800c0f4 <get_paramAddrTable>
 800f128:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_nand fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	4618      	mov	r0, r3
 800f134:	f7fd f80c 	bl	800c150 <createParameter>
 800f138:	4603      	mov	r3, r0
 800f13a:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 800f13c:	2001      	movs	r0, #1
 800f13e:	f7fd f807 	bl	800c150 <createParameter>
 800f142:	4603      	mov	r3, r0
 800f144:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 800f146:	2001      	movs	r0, #1
 800f148:	f7fd f802 	bl	800c150 <createParameter>
 800f14c:	4603      	mov	r3, r0
 800f14e:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800f150:	2001      	movs	r0, #1
 800f152:	f7fc fffd 	bl	800c150 <createParameter>
 800f156:	4603      	mov	r3, r0
 800f158:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 800f15a:	2001      	movs	r0, #1
 800f15c:	f7fc fff8 	bl	800c150 <createParameter>
 800f160:	4603      	mov	r3, r0
 800f162:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 800f164:	2000      	movs	r0, #0
 800f166:	f7fc fff3 	bl	800c150 <createParameter>
 800f16a:	4603      	mov	r3, r0
 800f16c:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0);
 800f16e:	2000      	movs	r0, #0
 800f170:	f7fc ffee 	bl	800c150 <createParameter>
 800f174:	4603      	mov	r3, r0
 800f176:	62bb      	str	r3, [r7, #40]	; 0x28


	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 800f178:	7b7b      	ldrb	r3, [r7, #13]
 800f17a:	4619      	mov	r1, r3
 800f17c:	4809      	ldr	r0, [pc, #36]	; (800f1a4 <create_fb_nand+0x8c>)
 800f17e:	f7fc ffc3 	bl	800c108 <writeToFBTable>
 800f182:	4603      	mov	r3, r0
 800f184:	733b      	strb	r3, [r7, #12]

	return fb;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	461d      	mov	r5, r3
 800f18a:	f107 040c 	add.w	r4, r7, #12
 800f18e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f192:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f196:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	3730      	adds	r7, #48	; 0x30
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	0800effd 	.word	0x0800effd

0800f1a8 <fb_nor_parser>:
#include "logic/fb_nor.h"



//logic fb
uint8_t fb_nor_parser(uint8_t* p){
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08a      	sub	sp, #40	; 0x28
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6278      	str	r0, [r7, #36]	; 0x24
	create_fb_nor();
 800f1b0:	463b      	mov	r3, r7
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 f872 	bl	800f29c <create_fb_nor>
	return 0;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3728      	adds	r7, #40	; 0x28
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <fb_nor>:
void fb_nor(uint8_t p){
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b08a      	sub	sp, #40	; 0x28
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800f1cc:	f7fc ff92 	bl	800c0f4 <get_paramAddrTable>
 800f1d0:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1e4:	4413      	add	r3, r2
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	623b      	str	r3, [r7, #32]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	4413      	add	r3, r2
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1fe:	4413      	add	r3, r2
 800f200:	3304      	adds	r3, #4
 800f202:	61fb      	str	r3, [r7, #28]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800f204:	79fb      	ldrb	r3, [r7, #7]
 800f206:	3302      	adds	r3, #2
 800f208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f218:	4413      	add	r3, r2
 800f21a:	3304      	adds	r3, #4
 800f21c:	61bb      	str	r3, [r7, #24]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800f21e:	79fb      	ldrb	r3, [r7, #7]
 800f220:	3303      	adds	r3, #3
 800f222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f232:	4413      	add	r3, r2
 800f234:	3304      	adds	r3, #4
 800f236:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
 800f238:	79fb      	ldrb	r3, [r7, #7]
 800f23a:	3304      	adds	r3, #4
 800f23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	4413      	add	r3, r2
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f24c:	4413      	add	r3, r2
 800f24e:	3304      	adds	r3, #4
 800f250:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+5]];
 800f252:	79fb      	ldrb	r3, [r7, #7]
 800f254:	3305      	adds	r3, #5
 800f256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4413      	add	r3, r2
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f266:	4413      	add	r3, r2
 800f268:	3304      	adds	r3, #4
 800f26a:	60fb      	str	r3, [r7, #12]


	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	431a      	orrs	r2, r3
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	431a      	orrs	r2, r3
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4313      	orrs	r3, r2
 800f282:	2b00      	cmp	r3, #0
 800f284:	bf0c      	ite	eq
 800f286:	2301      	moveq	r3, #1
 800f288:	2300      	movne	r3, #0
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	461a      	mov	r2, r3
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	601a      	str	r2, [r3, #0]

}
 800f292:	bf00      	nop
 800f294:	3728      	adds	r7, #40	; 0x28
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
	...

0800f29c <create_fb_nor>:


type_fb_nor create_fb_nor(void){
 800f29c:	b5b0      	push	{r4, r5, r7, lr}
 800f29e:	b08a      	sub	sp, #40	; 0x28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800f2a4:	f7fc ff26 	bl	800c0f4 <get_paramAddrTable>
 800f2a8:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_nor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	727b      	strb	r3, [r7, #9]


	fb.fp.input1 = createParameter(0); //in1
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	f7fc ff4d 	bl	800c150 <createParameter>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	613b      	str	r3, [r7, #16]
	fb.fp.input2 = createParameter(0); //in2
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	f7fc ff48 	bl	800c150 <createParameter>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	617b      	str	r3, [r7, #20]
	fb.fp.input3 = createParameter(0); //in3
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	f7fc ff43 	bl	800c150 <createParameter>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	61bb      	str	r3, [r7, #24]
	fb.fp.input4 = createParameter(0); //in4
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	f7fc ff3e 	bl	800c150 <createParameter>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f7fc ff39 	bl	800c150 <createParameter>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0); //output
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	f7fc ff34 	bl	800c150 <createParameter>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	623b      	str	r3, [r7, #32]


	fb.fb_index = writeToFBTable(fb_nor, fb.startParamIndex);
 800f2ec:	7a7b      	ldrb	r3, [r7, #9]
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4809      	ldr	r0, [pc, #36]	; (800f318 <create_fb_nor+0x7c>)
 800f2f2:	f7fc ff09 	bl	800c108 <writeToFBTable>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	723b      	strb	r3, [r7, #8]

	return fb;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	461d      	mov	r5, r3
 800f2fe:	f107 0408 	add.w	r4, r7, #8
 800f302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f306:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f30a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	3728      	adds	r7, #40	; 0x28
 800f312:	46bd      	mov	sp, r7
 800f314:	bdb0      	pop	{r4, r5, r7, pc}
 800f316:	bf00      	nop
 800f318:	0800f1c3 	.word	0x0800f1c3

0800f31c <fb_not_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_not.h"

//logic fb
uint8_t fb_not_parser(uint8_t* p){
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08a      	sub	sp, #40	; 0x28
 800f320:	af00      	add	r7, sp, #0
 800f322:	61f8      	str	r0, [r7, #28]
	uint8_t type = p[0];
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t input = p[1];
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	785b      	ldrb	r3, [r3, #1]
 800f330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_not(type, input);
 800f334:	463b      	mov	r3, r7
 800f336:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f33a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 f858 	bl	800f3f4 <create_fb_not>
	return 0;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3728      	adds	r7, #40	; 0x28
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <fb_not>:

void fb_not(uint8_t p){
 800f34e:	b580      	push	{r7, lr}
 800f350:	b088      	sub	sp, #32
 800f352:	af00      	add	r7, sp, #0
 800f354:	4603      	mov	r3, r0
 800f356:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800f358:	f7fc fecc 	bl	800c0f4 <get_paramAddrTable>
 800f35c:	61f8      	str	r0, [r7, #28]
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	69fa      	ldr	r2, [r7, #28]
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4413      	add	r3, r2
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	69fa      	ldr	r2, [r7, #28]
 800f370:	4413      	add	r3, r2
 800f372:	3304      	adds	r3, #4
 800f374:	61bb      	str	r3, [r7, #24]
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p+1]];
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	3301      	adds	r3, #1
 800f37a:	69fa      	ldr	r2, [r7, #28]
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	4413      	add	r3, r2
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	69fa      	ldr	r2, [r7, #28]
 800f38a:	4413      	add	r3, r2
 800f38c:	3304      	adds	r3, #4
 800f38e:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+2]];
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	3302      	adds	r3, #2
 800f394:	69fa      	ldr	r2, [r7, #28]
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	69fa      	ldr	r2, [r7, #28]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800f3aa:	79fb      	ldrb	r3, [r7, #7]
 800f3ac:	3303      	adds	r3, #3
 800f3ae:	69fa      	ldr	r2, [r7, #28]
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4413      	add	r3, r2
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	69fa      	ldr	r2, [r7, #28]
 800f3be:	4413      	add	r3, r2
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	60fb      	str	r3, [r7, #12]

	// returns true if the conditions is false
	// else returns false

	if(*type == 1){
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d105      	bne.n	800f3d8 <fb_not+0x8a>
		*output =  ~(*input);
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	43da      	mvns	r2, r3
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !(*input);
	}

}
 800f3d6:	e009      	b.n	800f3ec <fb_not+0x9e>
		*output =  !(*input);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	bf0c      	ite	eq
 800f3e0:	2301      	moveq	r3, #1
 800f3e2:	2300      	movne	r3, #0
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	601a      	str	r2, [r3, #0]
}
 800f3ec:	bf00      	nop
 800f3ee:	3720      	adds	r7, #32
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <create_fb_not>:


type_fb_not create_fb_not(uint8_t type, uint8_t input){
 800f3f4:	b5b0      	push	{r4, r5, r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	70fb      	strb	r3, [r7, #3]
 800f400:	4613      	mov	r3, r2
 800f402:	70bb      	strb	r3, [r7, #2]
	s_Param* pAddrTable = get_paramAddrTable();
 800f404:	f7fc fe76 	bl	800c0f4 <get_paramAddrTable>
 800f408:	61f8      	str	r0, [r7, #28]
	type_fb_not fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	727b      	strb	r3, [r7, #9]

	//input not connected -> output = 1
	fb.fp.type = createParameter(type); //in
 800f410:	78fb      	ldrb	r3, [r7, #3]
 800f412:	4618      	mov	r0, r3
 800f414:	f7fc fe9c 	bl	800c150 <createParameter>
 800f418:	4603      	mov	r3, r0
 800f41a:	617b      	str	r3, [r7, #20]
	fb.fp.input = createParameter(input); //in
 800f41c:	78bb      	ldrb	r3, [r7, #2]
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fc fe96 	bl	800c150 <createParameter>
 800f424:	4603      	mov	r3, r0
 800f426:	613b      	str	r3, [r7, #16]
	fb.fp.output = createParameter(0); //output
 800f428:	2000      	movs	r0, #0
 800f42a:	f7fc fe91 	bl	800c150 <createParameter>
 800f42e:	4603      	mov	r3, r0
 800f430:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0);
 800f432:	2000      	movs	r0, #0
 800f434:	f7fc fe8c 	bl	800c150 <createParameter>
 800f438:	4603      	mov	r3, r0
 800f43a:	61bb      	str	r3, [r7, #24]



	fb.fb_index = writeToFBTable(fb_not, fb.startParamIndex);
 800f43c:	7a7b      	ldrb	r3, [r7, #9]
 800f43e:	4619      	mov	r1, r3
 800f440:	4808      	ldr	r0, [pc, #32]	; (800f464 <create_fb_not+0x70>)
 800f442:	f7fc fe61 	bl	800c108 <writeToFBTable>
 800f446:	4603      	mov	r3, r0
 800f448:	723b      	strb	r3, [r7, #8]

	return fb;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	461d      	mov	r5, r3
 800f44e:	f107 0408 	add.w	r4, r7, #8
 800f452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	602b      	str	r3, [r5, #0]
}
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	3720      	adds	r7, #32
 800f45e:	46bd      	mov	sp, r7
 800f460:	bdb0      	pop	{r4, r5, r7, pc}
 800f462:	bf00      	nop
 800f464:	0800f34f 	.word	0x0800f34f

0800f468 <fb_or_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_or.h"

uint8_t fb_or_parser(uint8_t* p){
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08c      	sub	sp, #48	; 0x30
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_or(type);
 800f478:	463b      	mov	r3, r7
 800f47a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f47e:	4611      	mov	r1, r2
 800f480:	4618      	mov	r0, r3
 800f482:	f000 f893 	bl	800f5ac <create_fb_or>
	return 0;
 800f486:	2300      	movs	r3, #0
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3730      	adds	r7, #48	; 0x30
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <fb_or>:

void fb_or(uint8_t p){
 800f490:	b580      	push	{r7, lr}
 800f492:	b08a      	sub	sp, #40	; 0x28
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800f49a:	f7fc fe2b 	bl	800c0f4 <get_paramAddrTable>
 800f49e:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800f4a0:	79fb      	ldrb	r3, [r7, #7]
 800f4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4b2:	4413      	add	r3, r2
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4413      	add	r3, r2
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4cc:	4413      	add	r3, r2
 800f4ce:	3304      	adds	r3, #4
 800f4d0:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	3302      	adds	r3, #2
 800f4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	4413      	add	r3, r2
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4e6:	4413      	add	r3, r2
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800f4ec:	79fb      	ldrb	r3, [r7, #7]
 800f4ee:	3303      	adds	r3, #3
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	4413      	add	r3, r2
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f500:	4413      	add	r3, r2
 800f502:	3304      	adds	r3, #4
 800f504:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	3304      	adds	r3, #4
 800f50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4413      	add	r3, r2
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f51a:	4413      	add	r3, r2
 800f51c:	3304      	adds	r3, #4
 800f51e:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	3305      	adds	r3, #5
 800f524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	4413      	add	r3, r2
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f534:	4413      	add	r3, r2
 800f536:	3304      	adds	r3, #4
 800f538:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800f53a:	79fb      	ldrb	r3, [r7, #7]
 800f53c:	3306      	adds	r3, #6
 800f53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4413      	add	r3, r2
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f54e:	4413      	add	r3, r2
 800f550:	3304      	adds	r3, #4
 800f552:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d10d      	bne.n	800f578 <fb_or+0xe8>
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	431a      	orrs	r2, r3
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	431a      	orrs	r2, r3
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	431a      	orrs	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	601a      	str	r2, [r3, #0]
	else{
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
	}


}
 800f576:	e014      	b.n	800f5a2 <fb_or+0x112>
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10b      	bne.n	800f598 <fb_or+0x108>
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d107      	bne.n	800f598 <fb_or+0x108>
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d103      	bne.n	800f598 <fb_or+0x108>
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <fb_or+0x10c>
 800f598:	2201      	movs	r2, #1
 800f59a:	e000      	b.n	800f59e <fb_or+0x10e>
 800f59c:	2200      	movs	r2, #0
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	601a      	str	r2, [r3, #0]
}
 800f5a2:	bf00      	nop
 800f5a4:	3728      	adds	r7, #40	; 0x28
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
	...

0800f5ac <create_fb_or>:


type_fb_or create_fb_or(uint8_t type){
 800f5ac:	b5b0      	push	{r4, r5, r7, lr}
 800f5ae:	b08c      	sub	sp, #48	; 0x30
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800f5b8:	f7fc fd9c 	bl	800c0f4 <get_paramAddrTable>
 800f5bc:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_or fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //type
 800f5c4:	78fb      	ldrb	r3, [r7, #3]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fc fdc2 	bl	800c150 <createParameter>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(0); //input1
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f7fc fdbd 	bl	800c150 <createParameter>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //input2
 800f5da:	2000      	movs	r0, #0
 800f5dc:	f7fc fdb8 	bl	800c150 <createParameter>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(0); //input3
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	f7fc fdb3 	bl	800c150 <createParameter>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(0); //input4
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	f7fc fdae 	bl	800c150 <createParameter>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	f7fc fda9 	bl	800c150 <createParameter>
 800f5fe:	4603      	mov	r3, r0
 800f600:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 800f602:	2000      	movs	r0, #0
 800f604:	f7fc fda4 	bl	800c150 <createParameter>
 800f608:	4603      	mov	r3, r0
 800f60a:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 800f60c:	7b7b      	ldrb	r3, [r7, #13]
 800f60e:	4619      	mov	r1, r3
 800f610:	4809      	ldr	r0, [pc, #36]	; (800f638 <create_fb_or+0x8c>)
 800f612:	f7fc fd79 	bl	800c108 <writeToFBTable>
 800f616:	4603      	mov	r3, r0
 800f618:	733b      	strb	r3, [r7, #12]

	return fb;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	461d      	mov	r5, r3
 800f61e:	f107 040c 	add.w	r4, r7, #12
 800f622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f626:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f62a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	3730      	adds	r7, #48	; 0x30
 800f632:	46bd      	mov	sp, r7
 800f634:	bdb0      	pop	{r4, r5, r7, pc}
 800f636:	bf00      	nop
 800f638:	0800f491 	.word	0x0800f491

0800f63c <fb_xor_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_xor.h"

//logic fb
uint8_t fb_xor_parser(uint8_t* p){
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b088      	sub	sp, #32
 800f640:	af00      	add	r7, sp, #0
 800f642:	61f8      	str	r0, [r7, #28]
	create_fb_xor();
 800f644:	463b      	mov	r3, r7
 800f646:	4618      	mov	r0, r3
 800f648:	f000 f858 	bl	800f6fc <create_fb_xor>
	return 0;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3720      	adds	r7, #32
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <fb_xor>:
void fb_xor(uint8_t p){
 800f656:	b580      	push	{r7, lr}
 800f658:	b088      	sub	sp, #32
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	4603      	mov	r3, r0
 800f65e:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800f660:	f7fc fd48 	bl	800c0f4 <get_paramAddrTable>
 800f664:	61f8      	str	r0, [r7, #28]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	69fa      	ldr	r2, [r7, #28]
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	69fa      	ldr	r2, [r7, #28]
 800f678:	4413      	add	r3, r2
 800f67a:	3304      	adds	r3, #4
 800f67c:	61bb      	str	r3, [r7, #24]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	3301      	adds	r3, #1
 800f682:	69fa      	ldr	r2, [r7, #28]
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	4413      	add	r3, r2
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	69fa      	ldr	r2, [r7, #28]
 800f692:	4413      	add	r3, r2
 800f694:	3304      	adds	r3, #4
 800f696:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800f698:	79fb      	ldrb	r3, [r7, #7]
 800f69a:	3302      	adds	r3, #2
 800f69c:	69fa      	ldr	r2, [r7, #28]
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	4413      	add	r3, r2
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	69fa      	ldr	r2, [r7, #28]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	3303      	adds	r3, #3
 800f6b6:	69fa      	ldr	r2, [r7, #28]
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	69fa      	ldr	r2, [r7, #28]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800f6cc:	79fb      	ldrb	r3, [r7, #7]
 800f6ce:	3304      	adds	r3, #4
 800f6d0:	69fa      	ldr	r2, [r7, #28]
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	4413      	add	r3, r2
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	69fa      	ldr	r2, [r7, #28]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	60bb      	str	r3, [r7, #8]

	*output =  (*input1)^(*input2);
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	405a      	eors	r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	601a      	str	r2, [r3, #0]
}
 800f6f4:	bf00      	nop
 800f6f6:	3720      	adds	r7, #32
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <create_fb_xor>:


type_fb_xor create_fb_xor(void){
 800f6fc:	b5b0      	push	{r4, r5, r7, lr}
 800f6fe:	b08a      	sub	sp, #40	; 0x28
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800f704:	f7fc fcf6 	bl	800c0f4 <get_paramAddrTable>
 800f708:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_xor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	737b      	strb	r3, [r7, #13]


	fb.fp.input1 = createParameter(0); //in
 800f710:	2000      	movs	r0, #0
 800f712:	f7fc fd1d 	bl	800c150 <createParameter>
 800f716:	4603      	mov	r3, r0
 800f718:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //in
 800f71a:	2000      	movs	r0, #0
 800f71c:	f7fc fd18 	bl	800c150 <createParameter>
 800f720:	4603      	mov	r3, r0
 800f722:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(0); //in
 800f724:	2000      	movs	r0, #0
 800f726:	f7fc fd13 	bl	800c150 <createParameter>
 800f72a:	4603      	mov	r3, r0
 800f72c:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800f72e:	2000      	movs	r0, #0
 800f730:	f7fc fd0e 	bl	800c150 <createParameter>
 800f734:	4603      	mov	r3, r0
 800f736:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //in
 800f738:	2000      	movs	r0, #0
 800f73a:	f7fc fd09 	bl	800c150 <createParameter>
 800f73e:	4603      	mov	r3, r0
 800f740:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_xor, fb.startParamIndex);
 800f742:	7b7b      	ldrb	r3, [r7, #13]
 800f744:	4619      	mov	r1, r3
 800f746:	4809      	ldr	r0, [pc, #36]	; (800f76c <create_fb_xor+0x70>)
 800f748:	f7fc fcde 	bl	800c108 <writeToFBTable>
 800f74c:	4603      	mov	r3, r0
 800f74e:	733b      	strb	r3, [r7, #12]

	return fb;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	461d      	mov	r5, r3
 800f754:	f107 040c 	add.w	r4, r7, #12
 800f758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f75a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f75c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f760:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	3728      	adds	r7, #40	; 0x28
 800f768:	46bd      	mov	sp, r7
 800f76a:	bdb0      	pop	{r4, r5, r7, pc}
 800f76c:	0800f657 	.word	0x0800f657

0800f770 <fb_comp_maxmin_parser>:
#include "mcCore.h"
#include "fb_comp_maxmin.h"

//fb_comp_maxmin
uint8_t fb_comp_maxmin_parser(uint8_t *p)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b08e      	sub	sp, #56	; 0x38
 800f774:	af00      	add	r7, sp, #0
 800f776:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t param = p[0];
 800f778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t max = (uint32_t)p[1] << 24 | p[2] << 16 | p[3] << 8 | p[4];
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	3301      	adds	r3, #1
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	061b      	lsls	r3, r3, #24
 800f788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f78a:	3202      	adds	r2, #2
 800f78c:	7812      	ldrb	r2, [r2, #0]
 800f78e:	0412      	lsls	r2, r2, #16
 800f790:	4313      	orrs	r3, r2
 800f792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f794:	3203      	adds	r2, #3
 800f796:	7812      	ldrb	r2, [r2, #0]
 800f798:	0212      	lsls	r2, r2, #8
 800f79a:	4313      	orrs	r3, r2
 800f79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f79e:	3204      	adds	r2, #4
 800f7a0:	7812      	ldrb	r2, [r2, #0]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t min = (uint32_t)p[5] << 24 | p[6] << 16 | p[7] << 8 | p[8];
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	3305      	adds	r3, #5
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	061b      	lsls	r3, r3, #24
 800f7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7b0:	3206      	adds	r2, #6
 800f7b2:	7812      	ldrb	r2, [r2, #0]
 800f7b4:	0412      	lsls	r2, r2, #16
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7ba:	3207      	adds	r2, #7
 800f7bc:	7812      	ldrb	r2, [r2, #0]
 800f7be:	0212      	lsls	r2, r2, #8
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c4:	3208      	adds	r2, #8
 800f7c6:	7812      	ldrb	r2, [r2, #0]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	create_fb_comp_maxmin(max, min, param);
 800f7cc:	4638      	mov	r0, r7
 800f7ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7d6:	f000 f8d9 	bl	800f98c <create_fb_comp_maxmin>
	return 0;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3738      	adds	r7, #56	; 0x38
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <fb_comp_maxmin>:

void fb_comp_maxmin(uint8_t p)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b08c      	sub	sp, #48	; 0x30
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	71fb      	strb	r3, [r7, #7]
	s_Param *pAddrTable = get_paramAddrTable();
 800f7ee:	f7fc fc81 	bl	800c0f4 <get_paramAddrTable>
 800f7f2:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t *val = &pAddrTable->value[pAddrTable->addr[p++]];
 800f7f4:	79fb      	ldrb	r3, [r7, #7]
 800f7f6:	1c5a      	adds	r2, r3, #1
 800f7f8:	71fa      	strb	r2, [r7, #7]
 800f7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	4413      	add	r3, r2
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f80a:	4413      	add	r3, r2
 800f80c:	3304      	adds	r3, #4
 800f80e:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t *min = &pAddrTable->value[pAddrTable->addr[p++]];
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	1c5a      	adds	r2, r3, #1
 800f814:	71fa      	strb	r2, [r7, #7]
 800f816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4413      	add	r3, r2
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f826:	4413      	add	r3, r2
 800f828:	3304      	adds	r3, #4
 800f82a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t *max = &pAddrTable->value[pAddrTable->addr[p++]];
 800f82c:	79fb      	ldrb	r3, [r7, #7]
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	71fa      	strb	r2, [r7, #7]
 800f832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f842:	4413      	add	r3, r2
 800f844:	3304      	adds	r3, #4
 800f846:	623b      	str	r3, [r7, #32]
	int32_t *param = &pAddrTable->value[pAddrTable->addr[p++]];
 800f848:	79fb      	ldrb	r3, [r7, #7]
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	71fa      	strb	r2, [r7, #7]
 800f84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4413      	add	r3, r2
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f85e:	4413      	add	r3, r2
 800f860:	3304      	adds	r3, #4
 800f862:	61fb      	str	r3, [r7, #28]
	int32_t *out = &pAddrTable->value[pAddrTable->addr[p++]];
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	71fa      	strb	r2, [r7, #7]
 800f86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	4413      	add	r3, r2
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f87a:	4413      	add	r3, r2
 800f87c:	3304      	adds	r3, #4
 800f87e:	61bb      	str	r3, [r7, #24]
	int32_t *perc = &pAddrTable->value[pAddrTable->addr[p++]];
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	1c5a      	adds	r2, r3, #1
 800f884:	71fa      	strb	r2, [r7, #7]
 800f886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f896:	4413      	add	r3, r2
 800f898:	3304      	adds	r3, #4
 800f89a:	617b      	str	r3, [r7, #20]
	int32_t *stat = &pAddrTable->value[pAddrTable->addr[p++]];
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	71fa      	strb	r2, [r7, #7]
 800f8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8b2:	4413      	add	r3, r2
 800f8b4:	3304      	adds	r3, #4
 800f8b6:	613b      	str	r3, [r7, #16]

	float temp1, temp2;

	switch (*stat)
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b02      	cmp	r3, #2
 800f8be:	d05c      	beq.n	800f97a <fb_comp_maxmin+0x196>
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	dc56      	bgt.n	800f972 <fb_comp_maxmin+0x18e>
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d002      	beq.n	800f8ce <fb_comp_maxmin+0xea>
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d007      	beq.n	800f8dc <fb_comp_maxmin+0xf8>
 800f8cc:	e051      	b.n	800f972 <fb_comp_maxmin+0x18e>
	{
	case 0: //init stat
		*stat = 1;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	601a      	str	r2, [r3, #0]
		*out = 1;
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	601a      	str	r2, [r3, #0]
		break;
 800f8da:	e051      	b.n	800f980 <fb_comp_maxmin+0x19c>
	case 1: //running stat

		if (*val > *max)
 800f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	dd06      	ble.n	800f8f6 <fb_comp_maxmin+0x112>
		{
			*out = 3; //error
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	2203      	movs	r2, #3
 800f8ec:	601a      	str	r2, [r3, #0]
			*perc = 100;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	2264      	movs	r2, #100	; 0x64
 800f8f2:	601a      	str	r2, [r3, #0]
		else
		{
			*out = 2; //warning
			*perc = 0;
		}
		break;
 800f8f4:	e043      	b.n	800f97e <fb_comp_maxmin+0x19a>
		else if (*val > *min)
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	dd30      	ble.n	800f964 <fb_comp_maxmin+0x180>
			*out = 1; //ok
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	2201      	movs	r2, #1
 800f906:	601a      	str	r2, [r3, #0]
			if(*max-*min > 0){
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	dd33      	ble.n	800f97e <fb_comp_maxmin+0x19a>
				temp1 = *val - *min;
 800f916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	ee07 3a90 	vmov	s15, r3
 800f924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f928:	edc7 7a03 	vstr	s15, [r7, #12]
				temp2 = *max-*min;
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	ee07 3a90 	vmov	s15, r3
 800f93a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f93e:	edc7 7a02 	vstr	s15, [r7, #8]
				*perc = (temp1/temp2) * 100.0f;
 800f942:	edd7 6a03 	vldr	s13, [r7, #12]
 800f946:	ed97 7a02 	vldr	s14, [r7, #8]
 800f94a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f94e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f988 <fb_comp_maxmin+0x1a4>
 800f952:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f95a:	ee17 2a90 	vmov	r2, s15
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	601a      	str	r2, [r3, #0]
		break;
 800f962:	e00c      	b.n	800f97e <fb_comp_maxmin+0x19a>
			*out = 2; //warning
 800f964:	69bb      	ldr	r3, [r7, #24]
 800f966:	2202      	movs	r2, #2
 800f968:	601a      	str	r2, [r3, #0]
			*perc = 0;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2200      	movs	r2, #0
 800f96e:	601a      	str	r2, [r3, #0]
		break;
 800f970:	e005      	b.n	800f97e <fb_comp_maxmin+0x19a>

	case 2: //error stat
		break;

	default:
		*stat = 2;
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	2202      	movs	r2, #2
 800f976:	601a      	str	r2, [r3, #0]
	}
}
 800f978:	e002      	b.n	800f980 <fb_comp_maxmin+0x19c>
		break;
 800f97a:	bf00      	nop
 800f97c:	e000      	b.n	800f980 <fb_comp_maxmin+0x19c>
		break;
 800f97e:	bf00      	nop
}
 800f980:	bf00      	nop
 800f982:	3730      	adds	r7, #48	; 0x30
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	42c80000 	.word	0x42c80000

0800f98c <create_fb_comp_maxmin>:

type_fb_comp_maxmin create_fb_comp_maxmin(uint32_t max, uint32_t min, uint8_t param)
{
 800f98c:	b5b0      	push	{r4, r5, r7, lr}
 800f98e:	b08e      	sub	sp, #56	; 0x38
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	70fb      	strb	r3, [r7, #3]
	s_Param *pAddrTable = get_paramAddrTable();
 800f99a:	f7fc fbab 	bl	800c0f4 <get_paramAddrTable>
 800f99e:	6378      	str	r0, [r7, #52]	; 0x34
	type_fb_comp_maxmin fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800f9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	757b      	strb	r3, [r7, #21]

	fb.fp.val = createParameter(0);
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	f7fc fbd2 	bl	800c150 <createParameter>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	61bb      	str	r3, [r7, #24]
	fb.fp.min = createParameter(min);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fc fbcc 	bl	800c150 <createParameter>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	61fb      	str	r3, [r7, #28]
	fb.fp.max = createParameter(max);
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fc fbc6 	bl	800c150 <createParameter>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	623b      	str	r3, [r7, #32]
	fb.fp.param = createParameter(param);
 800f9c8:	78fb      	ldrb	r3, [r7, #3]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fc fbc0 	bl	800c150 <createParameter>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.out = createParameter(0);
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	f7fc fbbb 	bl	800c150 <createParameter>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.perc = createParameter(0);
 800f9de:	2000      	movs	r0, #0
 800f9e0:	f7fc fbb6 	bl	800c150 <createParameter>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	f7fc fbb1 	bl	800c150 <createParameter>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	633b      	str	r3, [r7, #48]	; 0x30

	fb.fb_index = writeToFBTable(fb_comp_maxmin, fb.startParamIndex);
 800f9f2:	7d7b      	ldrb	r3, [r7, #21]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4809      	ldr	r0, [pc, #36]	; (800fa1c <create_fb_comp_maxmin+0x90>)
 800f9f8:	f7fc fb86 	bl	800c108 <writeToFBTable>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	753b      	strb	r3, [r7, #20]

	return fb;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	461d      	mov	r5, r3
 800fa04:	f107 0414 	add.w	r4, r7, #20
 800fa08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fa0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fa10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	3738      	adds	r7, #56	; 0x38
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bdb0      	pop	{r4, r5, r7, pc}
 800fa1c:	0800f7e5 	.word	0x0800f7e5

0800fa20 <fb_condition_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_condition.h"

//fb_condition
uint8_t fb_condition_parser(uint8_t* p){
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b08a      	sub	sp, #40	; 0x28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	61f8      	str	r0, [r7, #28]
	uint8_t mode = p[0];
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	create_fb_condition(mode);
 800fa30:	463b      	mov	r3, r7
 800fa32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 f8bd 	bl	800fbb8 <create_fb_condition>
	return 0;
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3728      	adds	r7, #40	; 0x28
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <fb_condition>:

void fb_condition(uint8_t p){
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b088      	sub	sp, #32
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800fa52:	f7fc fb4f 	bl	800c0f4 <get_paramAddrTable>
 800fa56:	61f8      	str	r0, [r7, #28]
	int32_t* in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800fa58:	79fb      	ldrb	r3, [r7, #7]
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4413      	add	r3, r2
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	69fa      	ldr	r2, [r7, #28]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	61bb      	str	r3, [r7, #24]
	int32_t* in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	3301      	adds	r3, #1
 800fa74:	69fa      	ldr	r2, [r7, #28]
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	4413      	add	r3, r2
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	69fa      	ldr	r2, [r7, #28]
 800fa84:	4413      	add	r3, r2
 800fa86:	3304      	adds	r3, #4
 800fa88:	617b      	str	r3, [r7, #20]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800fa8a:	79fb      	ldrb	r3, [r7, #7]
 800fa8c:	3302      	adds	r3, #2
 800fa8e:	69fa      	ldr	r2, [r7, #28]
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4413      	add	r3, r2
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	69fa      	ldr	r2, [r7, #28]
 800fa9e:	4413      	add	r3, r2
 800faa0:	3304      	adds	r3, #4
 800faa2:	613b      	str	r3, [r7, #16]
	uint32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800faa4:	79fb      	ldrb	r3, [r7, #7]
 800faa6:	3303      	adds	r3, #3
 800faa8:	69fa      	ldr	r2, [r7, #28]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4413      	add	r3, r2
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	69fa      	ldr	r2, [r7, #28]
 800fab8:	4413      	add	r3, r2
 800faba:	3304      	adds	r3, #4
 800fabc:	60fb      	str	r3, [r7, #12]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800fabe:	79fb      	ldrb	r3, [r7, #7]
 800fac0:	3304      	adds	r3, #4
 800fac2:	69fa      	ldr	r2, [r7, #28]
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	69fa      	ldr	r2, [r7, #28]
 800fad2:	4413      	add	r3, r2
 800fad4:	3304      	adds	r3, #4
 800fad6:	60bb      	str	r3, [r7, #8]

	switch ( *mode ){
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b05      	cmp	r3, #5
 800fade:	d863      	bhi.n	800fba8 <fb_condition+0x160>
 800fae0:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <fb_condition+0xa0>)
 800fae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae6:	bf00      	nop
 800fae8:	0800fb01 	.word	0x0800fb01
 800faec:	0800fb1d 	.word	0x0800fb1d
 800faf0:	0800fb39 	.word	0x0800fb39
 800faf4:	0800fb55 	.word	0x0800fb55
 800faf8:	0800fb71 	.word	0x0800fb71
 800fafc:	0800fb8d 	.word	0x0800fb8d
		case 0:
			if( *in1 > *in2)
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	dd03      	ble.n	800fb14 <fb_condition+0xcc>
				*output = 1;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800fb12:	e04d      	b.n	800fbb0 <fb_condition+0x168>
				*output = 0;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2200      	movs	r2, #0
 800fb18:	601a      	str	r2, [r3, #0]
			break;
 800fb1a:	e049      	b.n	800fbb0 <fb_condition+0x168>

		case 1:
			if( *in1 >= *in2)
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	db03      	blt.n	800fb30 <fb_condition+0xe8>
				*output = 1;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800fb2e:	e03f      	b.n	800fbb0 <fb_condition+0x168>
				*output = 0;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2200      	movs	r2, #0
 800fb34:	601a      	str	r2, [r3, #0]
			break;
 800fb36:	e03b      	b.n	800fbb0 <fb_condition+0x168>

		case 2:
			if( *in1 == *in2)
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d103      	bne.n	800fb4c <fb_condition+0x104>
				*output = 1;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800fb4a:	e031      	b.n	800fbb0 <fb_condition+0x168>
				*output = 0;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	601a      	str	r2, [r3, #0]
			break;
 800fb52:	e02d      	b.n	800fbb0 <fb_condition+0x168>

		case 3:
			if( *in1 != *in2)
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d003      	beq.n	800fb68 <fb_condition+0x120>
				*output = 1;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2201      	movs	r2, #1
 800fb64:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800fb66:	e023      	b.n	800fbb0 <fb_condition+0x168>
				*output = 0;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	601a      	str	r2, [r3, #0]
			break;
 800fb6e:	e01f      	b.n	800fbb0 <fb_condition+0x168>

		case 4:
			if( *in1 <= *in2)
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	dc03      	bgt.n	800fb84 <fb_condition+0x13c>
				*output = 1;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800fb82:	e015      	b.n	800fbb0 <fb_condition+0x168>
				*output = 0;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	601a      	str	r2, [r3, #0]
			break;
 800fb8a:	e011      	b.n	800fbb0 <fb_condition+0x168>

		case 5:
			if( *in1 < *in2)
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	da03      	bge.n	800fba0 <fb_condition+0x158>
				*output = 1;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800fb9e:	e007      	b.n	800fbb0 <fb_condition+0x168>
				*output = 0;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]
			break;
 800fba6:	e003      	b.n	800fbb0 <fb_condition+0x168>

		default:
			*output = 0;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	601a      	str	r2, [r3, #0]
	}

}
 800fbae:	bf00      	nop
 800fbb0:	bf00      	nop
 800fbb2:	3720      	adds	r7, #32
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <create_fb_condition>:


type_fb_condition create_fb_condition(uint8_t mode){
 800fbb8:	b5b0      	push	{r4, r5, r7, lr}
 800fbba:	b08a      	sub	sp, #40	; 0x28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800fbc4:	f7fc fa96 	bl	800c0f4 <get_paramAddrTable>
 800fbc8:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_condition fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	737b      	strb	r3, [r7, #13]


	fb.fp.in1 = createParameter(0); //in1
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	f7fc fabd 	bl	800c150 <createParameter>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	613b      	str	r3, [r7, #16]
	fb.fp.in2 = createParameter(0); //in2
 800fbda:	2000      	movs	r0, #0
 800fbdc:	f7fc fab8 	bl	800c150 <createParameter>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //op
 800fbe4:	78fb      	ldrb	r3, [r7, #3]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fc fab2 	bl	800c150 <createParameter>
 800fbec:	4603      	mov	r3, r0
 800fbee:	61bb      	str	r3, [r7, #24]
	fb.fp.out = createParameter(0); //output
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	f7fc faad 	bl	800c150 <createParameter>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	61fb      	str	r3, [r7, #28]
	fb.fp.stat = createParameter(0); //output
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	f7fc faa8 	bl	800c150 <createParameter>
 800fc00:	4603      	mov	r3, r0
 800fc02:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_condition, fb.startParamIndex);
 800fc04:	7b7b      	ldrb	r3, [r7, #13]
 800fc06:	4619      	mov	r1, r3
 800fc08:	4809      	ldr	r0, [pc, #36]	; (800fc30 <create_fb_condition+0x78>)
 800fc0a:	f7fc fa7d 	bl	800c108 <writeToFBTable>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	733b      	strb	r3, [r7, #12]

	return fb;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	461d      	mov	r5, r3
 800fc16:	f107 040c 	add.w	r4, r7, #12
 800fc1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc22:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	3728      	adds	r7, #40	; 0x28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	0800fa49 	.word	0x0800fa49

0800fc34 <fb_hsc_parser>:
#include "fb_hsc.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_hsc_parser(uint8_t* p){
 800fc34:	b590      	push	{r4, r7, lr}
 800fc36:	b091      	sub	sp, #68	; 0x44
 800fc38:	af02      	add	r7, sp, #8
 800fc3a:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t preset = (uint32_t) p[3] << 24 | p[4] << 16 | p[5] <<8 | p[6];
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	3303      	adds	r3, #3
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	061b      	lsls	r3, r3, #24
 800fc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc46:	3204      	adds	r2, #4
 800fc48:	7812      	ldrb	r2, [r2, #0]
 800fc4a:	0412      	lsls	r2, r2, #16
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc50:	3205      	adds	r2, #5
 800fc52:	7812      	ldrb	r2, [r2, #0]
 800fc54:	0212      	lsls	r2, r2, #8
 800fc56:	4313      	orrs	r3, r2
 800fc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc5a:	3206      	adds	r2, #6
 800fc5c:	7812      	ldrb	r2, [r2, #0]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	637b      	str	r3, [r7, #52]	; 0x34
	create_fb_hsc(p[0],p[1], p[2],preset);
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	7819      	ldrb	r1, [r3, #0]
 800fc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc68:	3301      	adds	r3, #1
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	3302      	adds	r3, #2
 800fc70:	781c      	ldrb	r4, [r3, #0]
 800fc72:	4638      	mov	r0, r7
 800fc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	4623      	mov	r3, r4
 800fc7a:	f000 f885 	bl	800fd88 <create_fb_hsc>
	return 0;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	373c      	adds	r7, #60	; 0x3c
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd90      	pop	{r4, r7, pc}

0800fc88 <fb_hsc>:

void fb_hsc(uint8_t p){
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08c      	sub	sp, #48	; 0x30
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	4603      	mov	r3, r0
 800fc90:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800fc92:	f7fc fa2f 	bl	800c0f4 <get_paramAddrTable>
 800fc96:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	4413      	add	r3, r2
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcaa:	4413      	add	r3, r2
 800fcac:	3304      	adds	r3, #4
 800fcae:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcc4:	4413      	add	r3, r2
 800fcc6:	3304      	adds	r3, #4
 800fcc8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800fcca:	79fb      	ldrb	r3, [r7, #7]
 800fccc:	3302      	adds	r3, #2
 800fcce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcde:	4413      	add	r3, r2
 800fce0:	3304      	adds	r3, #4
 800fce2:	623b      	str	r3, [r7, #32]
	int32_t* pf = &pAddrTable->value[pAddrTable->addr[p+3]];
 800fce4:	79fb      	ldrb	r3, [r7, #7]
 800fce6:	3303      	adds	r3, #3
 800fce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4413      	add	r3, r2
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf8:	4413      	add	r3, r2
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	61fb      	str	r3, [r7, #28]
	int32_t* preset = &pAddrTable->value[pAddrTable->addr[p+4]];
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	3304      	adds	r3, #4
 800fd02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	4413      	add	r3, r2
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd12:	4413      	add	r3, r2
 800fd14:	3304      	adds	r3, #4
 800fd16:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+5]];
 800fd18:	79fb      	ldrb	r3, [r7, #7]
 800fd1a:	3305      	adds	r3, #5
 800fd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4413      	add	r3, r2
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd2c:	4413      	add	r3, r2
 800fd2e:	3304      	adds	r3, #4
 800fd30:	617b      	str	r3, [r7, #20]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	3306      	adds	r3, #6
 800fd36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	4413      	add	r3, r2
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd46:	4413      	add	r3, r2
 800fd48:	3304      	adds	r3, #4
 800fd4a:	613b      	str	r3, [r7, #16]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	3307      	adds	r3, #7
 800fd50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd60:	4413      	add	r3, r2
 800fd62:	3304      	adds	r3, #4
 800fd64:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800fd66:	79fb      	ldrb	r3, [r7, #7]
 800fd68:	3308      	adds	r3, #8
 800fd6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4413      	add	r3, r2
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd7a:	4413      	add	r3, r2
 800fd7c:	3304      	adds	r3, #4
 800fd7e:	60bb      	str	r3, [r7, #8]

	//todo:implement
}
 800fd80:	bf00      	nop
 800fd82:	3730      	adds	r7, #48	; 0x30
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <create_fb_hsc>:

type_fb_hsc create_fb_hsc(uint8_t ch1,
								uint8_t ch2,
									uint8_t mode,
											uint32_t preset){
 800fd88:	b5b0      	push	{r4, r5, r7, lr}
 800fd8a:	b08e      	sub	sp, #56	; 0x38
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	4608      	mov	r0, r1
 800fd92:	4611      	mov	r1, r2
 800fd94:	461a      	mov	r2, r3
 800fd96:	4603      	mov	r3, r0
 800fd98:	70fb      	strb	r3, [r7, #3]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	70bb      	strb	r3, [r7, #2]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	707b      	strb	r3, [r7, #1]
	type_fb_hsc fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800fda2:	f7fc f9a7 	bl	800c0f4 <get_paramAddrTable>
 800fda6:	6378      	str	r0, [r7, #52]	; 0x34

	fb.startParamIndex = pAddrTable->currentIndex;
 800fda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.rst = createParameter(0);
 800fdae:	2000      	movs	r0, #0
 800fdb0:	f7fc f9ce 	bl	800c150 <createParameter>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	613b      	str	r3, [r7, #16]
	fb.fp.ch1 = createParameter(ch1);
 800fdb8:	78fb      	ldrb	r3, [r7, #3]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fc f9c8 	bl	800c150 <createParameter>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	617b      	str	r3, [r7, #20]
	fb.fp.ch2 = createParameter(ch2);
 800fdc4:	78bb      	ldrb	r3, [r7, #2]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fc f9c2 	bl	800c150 <createParameter>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	61bb      	str	r3, [r7, #24]
	fb.fp.pf = createParameter(0);
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	f7fc f9bd 	bl	800c150 <createParameter>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	61fb      	str	r3, [r7, #28]
	fb.fp.preset = createParameter(preset);
 800fdda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fc f9b7 	bl	800c150 <createParameter>
 800fde2:	4603      	mov	r3, r0
 800fde4:	623b      	str	r3, [r7, #32]
	fb.fp.mode = createParameter(mode);
 800fde6:	787b      	ldrb	r3, [r7, #1]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fc f9b1 	bl	800c150 <createParameter>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	627b      	str	r3, [r7, #36]	; 0x24

	//output ports
	fb.fp.out = createParameter(0);
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f7fc f9ac 	bl	800c150 <createParameter>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(0);
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	f7fc f9a7 	bl	800c150 <createParameter>
 800fe02:	4603      	mov	r3, r0
 800fe04:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800fe06:	2000      	movs	r0, #0
 800fe08:	f7fc f9a2 	bl	800c150 <createParameter>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	633b      	str	r3, [r7, #48]	; 0x30

	//internal parameters

	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 800fe10:	7b7b      	ldrb	r3, [r7, #13]
 800fe12:	4619      	mov	r1, r3
 800fe14:	480a      	ldr	r0, [pc, #40]	; (800fe40 <create_fb_hsc+0xb8>)
 800fe16:	f7fc f977 	bl	800c108 <writeToFBTable>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	733b      	strb	r3, [r7, #12]

	return fb;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	461d      	mov	r5, r3
 800fe22:	f107 040c 	add.w	r4, r7, #12
 800fe26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fe2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fe2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fe32:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	3738      	adds	r7, #56	; 0x38
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	0800fc89 	.word	0x0800fc89

0800fe44 <fb_mod_parser>:
#include "mcCore.h"
#include "fb_mod.h"

//fb_mod
uint8_t fb_mod_parser(uint8_t *p)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08a      	sub	sp, #40	; 0x28
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	61f8      	str	r0, [r7, #28]
	uint8_t mod = p[0];
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	create_fb_mod(mod);
 800fe54:	463b      	mov	r3, r7
 800fe56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fe5a:	4611      	mov	r1, r2
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 f875 	bl	800ff4c <create_fb_mod>
	return 0;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3728      	adds	r7, #40	; 0x28
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <fb_mod>:

void fb_mod(uint8_t p)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b088      	sub	sp, #32
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	71fb      	strb	r3, [r7, #7]
	s_Param *pAddrTable = get_paramAddrTable();
 800fe76:	f7fc f93d 	bl	800c0f4 <get_paramAddrTable>
 800fe7a:	61f8      	str	r0, [r7, #28]
	int32_t *val = &pAddrTable->value[pAddrTable->addr[p++]];
 800fe7c:	79fb      	ldrb	r3, [r7, #7]
 800fe7e:	1c5a      	adds	r2, r3, #1
 800fe80:	71fa      	strb	r2, [r7, #7]
 800fe82:	69fa      	ldr	r2, [r7, #28]
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	4413      	add	r3, r2
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	69fa      	ldr	r2, [r7, #28]
 800fe92:	4413      	add	r3, r2
 800fe94:	3304      	adds	r3, #4
 800fe96:	61bb      	str	r3, [r7, #24]
	uint32_t *mod = &pAddrTable->value[pAddrTable->addr[p++]];
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	71fa      	strb	r2, [r7, #7]
 800fe9e:	69fa      	ldr	r2, [r7, #28]
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	4413      	add	r3, r2
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	69fa      	ldr	r2, [r7, #28]
 800feae:	4413      	add	r3, r2
 800feb0:	3304      	adds	r3, #4
 800feb2:	617b      	str	r3, [r7, #20]
	uint32_t *out = &pAddrTable->value[pAddrTable->addr[p++]];
 800feb4:	79fb      	ldrb	r3, [r7, #7]
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	71fa      	strb	r2, [r7, #7]
 800feba:	69fa      	ldr	r2, [r7, #28]
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	4413      	add	r3, r2
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	69fa      	ldr	r2, [r7, #28]
 800feca:	4413      	add	r3, r2
 800fecc:	3304      	adds	r3, #4
 800fece:	613b      	str	r3, [r7, #16]
	uint32_t *stat = &pAddrTable->value[pAddrTable->addr[p++]];
 800fed0:	79fb      	ldrb	r3, [r7, #7]
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	71fa      	strb	r2, [r7, #7]
 800fed6:	69fa      	ldr	r2, [r7, #28]
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	4413      	add	r3, r2
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	69fa      	ldr	r2, [r7, #28]
 800fee6:	4413      	add	r3, r2
 800fee8:	3304      	adds	r3, #4
 800feea:	60fb      	str	r3, [r7, #12]

	switch (*stat)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b02      	cmp	r3, #2
 800fef2:	d025      	beq.n	800ff40 <fb_mod+0xd4>
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	d81f      	bhi.n	800ff38 <fb_mod+0xcc>
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <fb_mod+0x96>
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d007      	beq.n	800ff10 <fb_mod+0xa4>
 800ff00:	e01a      	b.n	800ff38 <fb_mod+0xcc>
	{
	case 0: //init stat
		*stat = 1;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2201      	movs	r2, #1
 800ff06:	601a      	str	r2, [r3, #0]
		*out = 0;
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	601a      	str	r2, [r3, #0]
		break;
 800ff0e:	e018      	b.n	800ff42 <fb_mod+0xd6>
	case 1: //running stat

		if (*mod <= 0)
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d102      	bne.n	800ff1e <fb_mod+0xb2>
			*mod = 1;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	601a      	str	r2, [r3, #0]
		*out = *val % *mod;
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	fbb2 f1f3 	udiv	r1, r2, r3
 800ff2c:	fb03 f301 	mul.w	r3, r3, r1
 800ff30:	1ad2      	subs	r2, r2, r3
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	601a      	str	r2, [r3, #0]

		break;
 800ff36:	e004      	b.n	800ff42 <fb_mod+0xd6>

	case 2: //error stat
		break;

	default:
		*stat = 2;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	601a      	str	r2, [r3, #0]
	}
}
 800ff3e:	e000      	b.n	800ff42 <fb_mod+0xd6>
		break;
 800ff40:	bf00      	nop
}
 800ff42:	bf00      	nop
 800ff44:	3720      	adds	r7, #32
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <create_fb_mod>:

type_fb_mod create_fb_mod(uint8_t mod)
{
 800ff4c:	b5b0      	push	{r4, r5, r7, lr}
 800ff4e:	b088      	sub	sp, #32
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	460b      	mov	r3, r1
 800ff56:	70fb      	strb	r3, [r7, #3]
	s_Param *pAddrTable = get_paramAddrTable();
 800ff58:	f7fc f8cc 	bl	800c0f4 <get_paramAddrTable>
 800ff5c:	61f8      	str	r0, [r7, #28]
	type_fb_mod fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	727b      	strb	r3, [r7, #9]

	fb.fp.val = createParameter(0);
 800ff64:	2000      	movs	r0, #0
 800ff66:	f7fc f8f3 	bl	800c150 <createParameter>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	60fb      	str	r3, [r7, #12]
	fb.fp.mod = createParameter(mod);
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fc f8ed 	bl	800c150 <createParameter>
 800ff76:	4603      	mov	r3, r0
 800ff78:	613b      	str	r3, [r7, #16]
	fb.fp.out = createParameter(0);
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	f7fc f8e8 	bl	800c150 <createParameter>
 800ff80:	4603      	mov	r3, r0
 800ff82:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800ff84:	2000      	movs	r0, #0
 800ff86:	f7fc f8e3 	bl	800c150 <createParameter>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_mod, fb.startParamIndex);
 800ff8e:	7a7b      	ldrb	r3, [r7, #9]
 800ff90:	4619      	mov	r1, r3
 800ff92:	4808      	ldr	r0, [pc, #32]	; (800ffb4 <create_fb_mod+0x68>)
 800ff94:	f7fc f8b8 	bl	800c108 <writeToFBTable>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	723b      	strb	r3, [r7, #8]

	return fb;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	461d      	mov	r5, r3
 800ffa0:	f107 0408 	add.w	r4, r7, #8
 800ffa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ffa8:	6823      	ldr	r3, [r4, #0]
 800ffaa:	602b      	str	r3, [r5, #0]
}
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	3720      	adds	r7, #32
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bdb0      	pop	{r4, r5, r7, pc}
 800ffb4:	0800fe6d 	.word	0x0800fe6d

0800ffb8 <fb_rmhr_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include <fb_rmhr.h>

//cyclic event fb
uint8_t fb_rmhr_parser(uint8_t* p){
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b08a      	sub	sp, #40	; 0x28
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	61f8      	str	r0, [r7, #28]
	uint8_t reg = p[0];
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	785b      	ldrb	r3, [r3, #1]
 800ffcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_rmhr(reg, mode);
 800ffd0:	463b      	mov	r3, r7
 800ffd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ffd6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 f852 	bl	8010084 <create_fb_rmhr>
	return 0;
 800ffe0:	2300      	movs	r3, #0
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3728      	adds	r7, #40	; 0x28
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <fb_rmhr>:

void fb_rmhr(uint8_t p){
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b088      	sub	sp, #32
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	4603      	mov	r3, r0
 800fff2:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800fff4:	f7fc f87e 	bl	800c0f4 <get_paramAddrTable>
 800fff8:	61f8      	str	r0, [r7, #28]
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800fffa:	79fb      	ldrb	r3, [r7, #7]
 800fffc:	69fa      	ldr	r2, [r7, #28]
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	4413      	add	r3, r2
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	69fa      	ldr	r2, [r7, #28]
 801000c:	4413      	add	r3, r2
 801000e:	3304      	adds	r3, #4
 8010010:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 8010012:	79fb      	ldrb	r3, [r7, #7]
 8010014:	3301      	adds	r3, #1
 8010016:	69fa      	ldr	r2, [r7, #28]
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4413      	add	r3, r2
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	69fa      	ldr	r2, [r7, #28]
 8010026:	4413      	add	r3, r2
 8010028:	3304      	adds	r3, #4
 801002a:	617b      	str	r3, [r7, #20]
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 801002c:	79fb      	ldrb	r3, [r7, #7]
 801002e:	3302      	adds	r3, #2
 8010030:	69fa      	ldr	r2, [r7, #28]
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	4413      	add	r3, r2
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	69fa      	ldr	r2, [r7, #28]
 8010040:	4413      	add	r3, r2
 8010042:	3304      	adds	r3, #4
 8010044:	613b      	str	r3, [r7, #16]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 8010046:	79fb      	ldrb	r3, [r7, #7]
 8010048:	3303      	adds	r3, #3
 801004a:	69fa      	ldr	r2, [r7, #28]
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	4413      	add	r3, r2
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	69fa      	ldr	r2, [r7, #28]
 801005a:	4413      	add	r3, r2
 801005c:	3304      	adds	r3, #4
 801005e:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 8010060:	f7fc fb3a 	bl	800c6d8 <get_Modbus_Buf_Holding_Registers_40001>
 8010064:	4603      	mov	r3, r0
 8010066:	60bb      	str	r3, [r7, #8]

	*dout = modbus_holding_reg[*reg];
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	005b      	lsls	r3, r3, #1
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	4413      	add	r3, r2
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	461a      	mov	r2, r3
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	601a      	str	r2, [r3, #0]
}
 801007a:	bf00      	nop
 801007c:	3720      	adds	r7, #32
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <create_fb_rmhr>:

type_fb_rmhr create_fb_rmhr(uint8_t reg, uint8_t mode){
 8010084:	b5b0      	push	{r4, r5, r7, lr}
 8010086:	b088      	sub	sp, #32
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	460b      	mov	r3, r1
 801008e:	70fb      	strb	r3, [r7, #3]
 8010090:	4613      	mov	r3, r2
 8010092:	70bb      	strb	r3, [r7, #2]
	type_fb_rmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8010094:	f7fc f82e 	bl	800c0f4 <get_paramAddrTable>
 8010098:	61f8      	str	r0, [r7, #28]
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 80100a0:	78fb      	ldrb	r3, [r7, #3]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fc f854 	bl	800c150 <createParameter>
 80100a8:	4603      	mov	r3, r0
 80100aa:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode);
 80100ac:	78bb      	ldrb	r3, [r7, #2]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fc f84e 	bl	800c150 <createParameter>
 80100b4:	4603      	mov	r3, r0
 80100b6:	613b      	str	r3, [r7, #16]
	fb.fp.dout = createParameter(0);
 80100b8:	2000      	movs	r0, #0
 80100ba:	f7fc f849 	bl	800c150 <createParameter>
 80100be:	4603      	mov	r3, r0
 80100c0:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 80100c2:	2000      	movs	r0, #0
 80100c4:	f7fc f844 	bl	800c150 <createParameter>
 80100c8:	4603      	mov	r3, r0
 80100ca:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_rmhr, fb.startParamIndex);
 80100cc:	7a7b      	ldrb	r3, [r7, #9]
 80100ce:	4619      	mov	r1, r3
 80100d0:	4808      	ldr	r0, [pc, #32]	; (80100f4 <create_fb_rmhr+0x70>)
 80100d2:	f7fc f819 	bl	800c108 <writeToFBTable>
 80100d6:	4603      	mov	r3, r0
 80100d8:	723b      	strb	r3, [r7, #8]

	return fb;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	461d      	mov	r5, r3
 80100de:	f107 0408 	add.w	r4, r7, #8
 80100e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	602b      	str	r3, [r5, #0]
}
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	3720      	adds	r7, #32
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bdb0      	pop	{r4, r5, r7, pc}
 80100f2:	bf00      	nop
 80100f4:	0800ffeb 	.word	0x0800ffeb

080100f8 <fb_step_parser>:
#define FB_STEP_ST_WAIT 0
#define FB_STEP_ST_ACTIVE 1
#define FB_STEP_ST_CHECK 2

//cyclic event fb
uint8_t fb_step_parser(uint8_t* p){
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b08c      	sub	sp, #48	; 0x30
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_step(p[0], p[1]);
 8010100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010102:	7819      	ldrb	r1, [r3, #0]
 8010104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010106:	3301      	adds	r3, #1
 8010108:	781a      	ldrb	r2, [r3, #0]
 801010a:	463b      	mov	r3, r7
 801010c:	4618      	mov	r0, r3
 801010e:	f000 f8ad 	bl	801026c <create_fb_step>
	return 0;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3730      	adds	r7, #48	; 0x30
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <fb_step>:

void fb_step(uint8_t p){
 801011c:	b580      	push	{r7, lr}
 801011e:	b08c      	sub	sp, #48	; 0x30
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8010126:	f7fb ffe5 	bl	800c0f4 <get_paramAddrTable>
 801012a:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t* tk_in1 = &pAddrTable->value[pAddrTable->addr[p]];
 801012c:	79fb      	ldrb	r3, [r7, #7]
 801012e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	4413      	add	r3, r2
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801013e:	4413      	add	r3, r2
 8010140:	3304      	adds	r3, #4
 8010142:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8010144:	79fb      	ldrb	r3, [r7, #7]
 8010146:	3301      	adds	r3, #1
 8010148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	4413      	add	r3, r2
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010158:	4413      	add	r3, r2
 801015a:	3304      	adds	r3, #4
 801015c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* tr_in = &pAddrTable->value[pAddrTable->addr[p+2]];
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	3302      	adds	r3, #2
 8010162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010172:	4413      	add	r3, r2
 8010174:	3304      	adds	r3, #4
 8010176:	623b      	str	r3, [r7, #32]
	uint32_t* param = &pAddrTable->value[pAddrTable->addr[p+3]];
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	3303      	adds	r3, #3
 801017c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	4413      	add	r3, r2
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801018c:	4413      	add	r3, r2
 801018e:	3304      	adds	r3, #4
 8010190:	61fb      	str	r3, [r7, #28]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 8010192:	79fb      	ldrb	r3, [r7, #7]
 8010194:	3304      	adds	r3, #4
 8010196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	4413      	add	r3, r2
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101a6:	4413      	add	r3, r2
 80101a8:	3304      	adds	r3, #4
 80101aa:	61bb      	str	r3, [r7, #24]
	uint32_t* tk_out = &pAddrTable->value[pAddrTable->addr[p+5]];
 80101ac:	79fb      	ldrb	r3, [r7, #7]
 80101ae:	3305      	adds	r3, #5
 80101b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101c0:	4413      	add	r3, r2
 80101c2:	3304      	adds	r3, #4
 80101c4:	617b      	str	r3, [r7, #20]
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	3306      	adds	r3, #6
 80101ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4413      	add	r3, r2
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101da:	4413      	add	r3, r2
 80101dc:	3304      	adds	r3, #4
 80101de:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+7]];
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	3307      	adds	r3, #7
 80101e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4413      	add	r3, r2
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101f4:	4413      	add	r3, r2
 80101f6:	3304      	adds	r3, #4
 80101f8:	60fb      	str	r3, [r7, #12]

	//function block algorithm
	//function block algorithm
	switch(*state){
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b02      	cmp	r3, #2
 8010200:	d021      	beq.n	8010246 <fb_step+0x12a>
 8010202:	2b02      	cmp	r3, #2
 8010204:	d82d      	bhi.n	8010262 <fb_step+0x146>
 8010206:	2b00      	cmp	r3, #0
 8010208:	d002      	beq.n	8010210 <fb_step+0xf4>
 801020a:	2b01      	cmp	r3, #1
 801020c:	d014      	beq.n	8010238 <fb_step+0x11c>
			* state = FB_STEP_ST_WAIT; //switch to active state
		}
		break;

	}
}
 801020e:	e028      	b.n	8010262 <fb_step+0x146>
		* tk_out = 0;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
		* obv_out = 0;
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
		if(* tk_in1 > 0 | * tk_in2 > 0){
 801021c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4313      	orrs	r3, r2
 8010226:	2b00      	cmp	r3, #0
 8010228:	d018      	beq.n	801025c <fb_step+0x140>
			* obv_out = 1;
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	2201      	movs	r2, #1
 801022e:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_ACTIVE; //switch to active state
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2201      	movs	r2, #1
 8010234:	601a      	str	r2, [r3, #0]
		break;
 8010236:	e011      	b.n	801025c <fb_step+0x140>
		* obv_out = 1;
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	2201      	movs	r2, #1
 801023c:	601a      	str	r2, [r3, #0]
		* state = FB_STEP_ST_CHECK; //switch to active state
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2202      	movs	r2, #2
 8010242:	601a      	str	r2, [r3, #0]
		break;
 8010244:	e00d      	b.n	8010262 <fb_step+0x146>
		if(* tr_in > 0){
 8010246:	6a3b      	ldr	r3, [r7, #32]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d008      	beq.n	8010260 <fb_step+0x144>
			* tk_out = 1;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2201      	movs	r2, #1
 8010252:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_WAIT; //switch to active state
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	601a      	str	r2, [r3, #0]
		break;
 801025a:	e001      	b.n	8010260 <fb_step+0x144>
		break;
 801025c:	bf00      	nop
 801025e:	e000      	b.n	8010262 <fb_step+0x146>
		break;
 8010260:	bf00      	nop
}
 8010262:	bf00      	nop
 8010264:	3730      	adds	r7, #48	; 0x30
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <create_fb_step>:

type_fb_step create_fb_step(uint8_t param, uint8_t mode){
 801026c:	b5b0      	push	{r4, r5, r7, lr}
 801026e:	b08c      	sub	sp, #48	; 0x30
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	70fb      	strb	r3, [r7, #3]
 8010278:	4613      	mov	r3, r2
 801027a:	70bb      	strb	r3, [r7, #2]
	type_fb_step fb;

	s_Param* pAddrTable = get_paramAddrTable();
 801027c:	f7fb ff3a 	bl	800c0f4 <get_paramAddrTable>
 8010280:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	727b      	strb	r3, [r7, #9]

	fb.fp.tk_in1 = createParameter(0);
 8010288:	2000      	movs	r0, #0
 801028a:	f7fb ff61 	bl	800c150 <createParameter>
 801028e:	4603      	mov	r3, r0
 8010290:	60fb      	str	r3, [r7, #12]
	fb.fp.tk_in2 = createParameter(0);
 8010292:	2000      	movs	r0, #0
 8010294:	f7fb ff5c 	bl	800c150 <createParameter>
 8010298:	4603      	mov	r3, r0
 801029a:	613b      	str	r3, [r7, #16]
	fb.fp.tr_in = createParameter(0);
 801029c:	2000      	movs	r0, #0
 801029e:	f7fb ff57 	bl	800c150 <createParameter>
 80102a2:	4603      	mov	r3, r0
 80102a4:	617b      	str	r3, [r7, #20]
	fb.fp.param = createParameter(param);
 80102a6:	78fb      	ldrb	r3, [r7, #3]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fb ff51 	bl	800c150 <createParameter>
 80102ae:	4603      	mov	r3, r0
 80102b0:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(mode);
 80102b2:	78bb      	ldrb	r3, [r7, #2]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fb ff4b 	bl	800c150 <createParameter>
 80102ba:	4603      	mov	r3, r0
 80102bc:	61fb      	str	r3, [r7, #28]
	fb.fp.tk_out = createParameter(0);
 80102be:	2000      	movs	r0, #0
 80102c0:	f7fb ff46 	bl	800c150 <createParameter>
 80102c4:	4603      	mov	r3, r0
 80102c6:	623b      	str	r3, [r7, #32]
	fb.fp.obv_out = createParameter(0);
 80102c8:	2000      	movs	r0, #0
 80102ca:	f7fb ff41 	bl	800c150 <createParameter>
 80102ce:	4603      	mov	r3, r0
 80102d0:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.state = createParameter(param); //first state will have token initially
 80102d2:	78fb      	ldrb	r3, [r7, #3]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fb ff3b 	bl	800c150 <createParameter>
 80102da:	4603      	mov	r3, r0
 80102dc:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_step, fb.startParamIndex);
 80102de:	7a7b      	ldrb	r3, [r7, #9]
 80102e0:	4619      	mov	r1, r3
 80102e2:	4809      	ldr	r0, [pc, #36]	; (8010308 <create_fb_step+0x9c>)
 80102e4:	f7fb ff10 	bl	800c108 <writeToFBTable>
 80102e8:	4603      	mov	r3, r0
 80102ea:	723b      	strb	r3, [r7, #8]

	return fb;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	461d      	mov	r5, r3
 80102f0:	f107 0408 	add.w	r4, r7, #8
 80102f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102fc:	6823      	ldr	r3, [r4, #0]
 80102fe:	602b      	str	r3, [r5, #0]
}
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	3730      	adds	r7, #48	; 0x30
 8010304:	46bd      	mov	sp, r7
 8010306:	bdb0      	pop	{r4, r5, r7, pc}
 8010308:	0801011d 	.word	0x0801011d

0801030c <fb_timer_tp_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_timer_tp.h"

//cyclic event fb
uint8_t fb_timer_tp_parser(uint8_t* p){
 801030c:	b580      	push	{r7, lr}
 801030e:	b08c      	sub	sp, #48	; 0x30
 8010310:	af00      	add	r7, sp, #0
 8010312:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t period = (uint32_t) p[0] << 24 | p[1] << 16 | p[2] <<8 | p[3];
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	061b      	lsls	r3, r3, #24
 801031a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801031c:	3201      	adds	r2, #1
 801031e:	7812      	ldrb	r2, [r2, #0]
 8010320:	0412      	lsls	r2, r2, #16
 8010322:	4313      	orrs	r3, r2
 8010324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010326:	3202      	adds	r2, #2
 8010328:	7812      	ldrb	r2, [r2, #0]
 801032a:	0212      	lsls	r2, r2, #8
 801032c:	4313      	orrs	r3, r2
 801032e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010330:	3203      	adds	r2, #3
 8010332:	7812      	ldrb	r2, [r2, #0]
 8010334:	4313      	orrs	r3, r2
 8010336:	62fb      	str	r3, [r7, #44]	; 0x2c
	create_fb_timer_tp(period);
 8010338:	463b      	mov	r3, r7
 801033a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801033c:	4618      	mov	r0, r3
 801033e:	f000 f8c9 	bl	80104d4 <create_fb_timer_tp>
	return 0;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3730      	adds	r7, #48	; 0x30
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <fb_timer_tp>:

void fb_timer_tp(uint8_t p){
 801034c:	b580      	push	{r7, lr}
 801034e:	b08c      	sub	sp, #48	; 0x30
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8010356:	f7fb fecd 	bl	800c0f4 <get_paramAddrTable>
 801035a:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t delta = 0, tick = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010360:	2300      	movs	r3, #0
 8010362:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t* et = &pAddrTable->value[pAddrTable->addr[p]];
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4413      	add	r3, r2
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010376:	4413      	add	r3, r2
 8010378:	3304      	adds	r3, #4
 801037a:	623b      	str	r3, [r7, #32]
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 801037c:	79fb      	ldrb	r3, [r7, #7]
 801037e:	3301      	adds	r3, #1
 8010380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	4413      	add	r3, r2
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010390:	4413      	add	r3, r2
 8010392:	3304      	adds	r3, #4
 8010394:	61fb      	str	r3, [r7, #28]
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
 8010396:	79fb      	ldrb	r3, [r7, #7]
 8010398:	3302      	adds	r3, #2
 801039a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	4413      	add	r3, r2
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103aa:	4413      	add	r3, r2
 80103ac:	3304      	adds	r3, #4
 80103ae:	61bb      	str	r3, [r7, #24]
	uint32_t* q = &pAddrTable->value[pAddrTable->addr[p+3]];
 80103b0:	79fb      	ldrb	r3, [r7, #7]
 80103b2:	3303      	adds	r3, #3
 80103b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4413      	add	r3, r2
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103c4:	4413      	add	r3, r2
 80103c6:	3304      	adds	r3, #4
 80103c8:	617b      	str	r3, [r7, #20]
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
 80103ca:	79fb      	ldrb	r3, [r7, #7]
 80103cc:	3304      	adds	r3, #4
 80103ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103de:	4413      	add	r3, r2
 80103e0:	3304      	adds	r3, #4
 80103e2:	613b      	str	r3, [r7, #16]
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
 80103e4:	79fb      	ldrb	r3, [r7, #7]
 80103e6:	3305      	adds	r3, #5
 80103e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	4413      	add	r3, r2
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103f8:	4413      	add	r3, r2
 80103fa:	3304      	adds	r3, #4
 80103fc:	60fb      	str	r3, [r7, #12]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+6]];
 80103fe:	79fb      	ldrb	r3, [r7, #7]
 8010400:	3306      	adds	r3, #6
 8010402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	4413      	add	r3, r2
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010412:	4413      	add	r3, r2
 8010414:	3304      	adds	r3, #4
 8010416:	60bb      	str	r3, [r7, #8]

	tick = hal_get_tick();
 8010418:	f7f0 f994 	bl	8000744 <hal_get_tick>
 801041c:	4603      	mov	r3, r0
 801041e:	627b      	str	r3, [r7, #36]	; 0x24

	switch(*state){
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d002      	beq.n	801042e <fb_timer_tp+0xe2>
 8010428:	2b01      	cmp	r3, #1
 801042a:	d02e      	beq.n	801048a <fb_timer_tp+0x13e>
		if(delta > *pt){
			*state = 0;
		}
		break;
	}
}
 801042c:	e04d      	b.n	80104ca <fb_timer_tp+0x17e>
		*q = 0;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]
		if(*in == 0) {
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d106      	bne.n	801044a <fb_timer_tp+0xfe>
			*et = 0;
 801043c:	6a3b      	ldr	r3, [r7, #32]
 801043e:	2200      	movs	r2, #0
 8010440:	601a      	str	r2, [r3, #0]
			*inold = 0;
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]
		break;
 8010448:	e03c      	b.n	80104c4 <fb_timer_tp+0x178>
		else if(*inold == 0 & *in==1) //0->1 transition
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	bf0c      	ite	eq
 8010452:	2301      	moveq	r3, #1
 8010454:	2300      	movne	r3, #0
 8010456:	b2da      	uxtb	r2, r3
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b01      	cmp	r3, #1
 801045e:	bf0c      	ite	eq
 8010460:	2301      	moveq	r3, #1
 8010462:	2300      	movne	r3, #0
 8010464:	b2db      	uxtb	r3, r3
 8010466:	4013      	ands	r3, r2
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d02a      	beq.n	80104c4 <fb_timer_tp+0x178>
			*inold = *in;
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	601a      	str	r2, [r3, #0]
			*counter = tick;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801047a:	601a      	str	r2, [r3, #0]
			*q = 1;
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	2201      	movs	r2, #1
 8010480:	601a      	str	r2, [r3, #0]
			*state = 1; //active state
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	2201      	movs	r2, #1
 8010486:	601a      	str	r2, [r3, #0]
		break;
 8010488:	e01c      	b.n	80104c4 <fb_timer_tp+0x178>
		if(tick >= *counter){
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010490:	429a      	cmp	r2, r3
 8010492:	d305      	bcc.n	80104a0 <fb_timer_tp+0x154>
			delta = tick - *counter;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801049a:	1ad3      	subs	r3, r2, r3
 801049c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801049e:	e005      	b.n	80104ac <fb_timer_tp+0x160>
			delta = tick + ((0xFFFFFFFF) - *counter);
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	3b01      	subs	r3, #1
 80104aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		*et = delta;
 80104ac:	6a3b      	ldr	r3, [r7, #32]
 80104ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104b0:	601a      	str	r2, [r3, #0]
		if(delta > *pt){
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d905      	bls.n	80104c8 <fb_timer_tp+0x17c>
			*state = 0;
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	2200      	movs	r2, #0
 80104c0:	601a      	str	r2, [r3, #0]
		break;
 80104c2:	e001      	b.n	80104c8 <fb_timer_tp+0x17c>
		break;
 80104c4:	bf00      	nop
 80104c6:	e000      	b.n	80104ca <fb_timer_tp+0x17e>
		break;
 80104c8:	bf00      	nop
}
 80104ca:	bf00      	nop
 80104cc:	3730      	adds	r7, #48	; 0x30
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
	...

080104d4 <create_fb_timer_tp>:

type_fb_timer_tp create_fb_timer_tp(uint32_t pt){
 80104d4:	b5b0      	push	{r4, r5, r7, lr}
 80104d6:	b08c      	sub	sp, #48	; 0x30
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
	type_fb_timer_tp fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80104de:	f7fb fe09 	bl	800c0f4 <get_paramAddrTable>
 80104e2:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	737b      	strb	r3, [r7, #13]

	fb.fp.et = createParameter(0);
 80104ea:	2000      	movs	r0, #0
 80104ec:	f7fb fe30 	bl	800c150 <createParameter>
 80104f0:	4603      	mov	r3, r0
 80104f2:	61fb      	str	r3, [r7, #28]
	fb.fp.in = createParameter(0);
 80104f4:	2000      	movs	r0, #0
 80104f6:	f7fb fe2b 	bl	800c150 <createParameter>
 80104fa:	4603      	mov	r3, r0
 80104fc:	613b      	str	r3, [r7, #16]
	fb.fp.pt = createParameter(pt);
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	4618      	mov	r0, r3
 8010502:	f7fb fe25 	bl	800c150 <createParameter>
 8010506:	4603      	mov	r3, r0
 8010508:	617b      	str	r3, [r7, #20]
	fb.fp.q = createParameter(0);
 801050a:	2000      	movs	r0, #0
 801050c:	f7fb fe20 	bl	800c150 <createParameter>
 8010510:	4603      	mov	r3, r0
 8010512:	61bb      	str	r3, [r7, #24]
	fb.fp.inold = createParameter(0);
 8010514:	2000      	movs	r0, #0
 8010516:	f7fb fe1b 	bl	800c150 <createParameter>
 801051a:	4603      	mov	r3, r0
 801051c:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.counter = createParameter(0);
 801051e:	2000      	movs	r0, #0
 8010520:	f7fb fe16 	bl	800c150 <createParameter>
 8010524:	4603      	mov	r3, r0
 8010526:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.state = createParameter(0);
 8010528:	2000      	movs	r0, #0
 801052a:	f7fb fe11 	bl	800c150 <createParameter>
 801052e:	4603      	mov	r3, r0
 8010530:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_timer_tp, fb.startParamIndex);
 8010532:	7b7b      	ldrb	r3, [r7, #13]
 8010534:	4619      	mov	r1, r3
 8010536:	4809      	ldr	r0, [pc, #36]	; (801055c <create_fb_timer_tp+0x88>)
 8010538:	f7fb fde6 	bl	800c108 <writeToFBTable>
 801053c:	4603      	mov	r3, r0
 801053e:	733b      	strb	r3, [r7, #12]

	return fb;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	461d      	mov	r5, r3
 8010544:	f107 040c 	add.w	r4, r7, #12
 8010548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801054a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801054c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010550:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	3730      	adds	r7, #48	; 0x30
 8010558:	46bd      	mov	sp, r7
 801055a:	bdb0      	pop	{r4, r5, r7, pc}
 801055c:	0801034d 	.word	0x0801034d

08010560 <fb_wmhr_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include <fb_wmhr.h>

//cyclic event fb
uint8_t fb_wmhr_parser(uint8_t* p){
 8010560:	b580      	push	{r7, lr}
 8010562:	b08c      	sub	sp, #48	; 0x30
 8010564:	af00      	add	r7, sp, #0
 8010566:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t reg = p[0];
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t mode = p[1];
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010572:	785b      	ldrb	r3, [r3, #1]
 8010574:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	create_fb_wmhr(reg, mode);
 8010578:	463b      	mov	r3, r7
 801057a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801057e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8010582:	4618      	mov	r0, r3
 8010584:	f000 f892 	bl	80106ac <create_fb_wmhr>
	return 0;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3730      	adds	r7, #48	; 0x30
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <fb_wmhr>:

void fb_wmhr(uint8_t p){
 8010592:	b580      	push	{r7, lr}
 8010594:	b08a      	sub	sp, #40	; 0x28
 8010596:	af00      	add	r7, sp, #0
 8010598:	4603      	mov	r3, r0
 801059a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 801059c:	f7fb fdaa 	bl	800c0f4 <get_paramAddrTable>
 80105a0:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 80105a2:	79fb      	ldrb	r3, [r7, #7]
 80105a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	4413      	add	r3, r2
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105b4:	4413      	add	r3, r2
 80105b6:	3304      	adds	r3, #4
 80105b8:	623b      	str	r3, [r7, #32]
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 80105ba:	79fb      	ldrb	r3, [r7, #7]
 80105bc:	3301      	adds	r3, #1
 80105be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4413      	add	r3, r2
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ce:	4413      	add	r3, r2
 80105d0:	3304      	adds	r3, #4
 80105d2:	61fb      	str	r3, [r7, #28]
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 80105d4:	79fb      	ldrb	r3, [r7, #7]
 80105d6:	3302      	adds	r3, #2
 80105d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	4413      	add	r3, r2
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e8:	4413      	add	r3, r2
 80105ea:	3304      	adds	r3, #4
 80105ec:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 80105ee:	79fb      	ldrb	r3, [r7, #7]
 80105f0:	3303      	adds	r3, #3
 80105f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4413      	add	r3, r2
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010602:	4413      	add	r3, r2
 8010604:	3304      	adds	r3, #4
 8010606:	617b      	str	r3, [r7, #20]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 8010608:	79fb      	ldrb	r3, [r7, #7]
 801060a:	3304      	adds	r3, #4
 801060c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	4413      	add	r3, r2
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010618:	009b      	lsls	r3, r3, #2
 801061a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801061c:	4413      	add	r3, r2
 801061e:	3304      	adds	r3, #4
 8010620:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	3305      	adds	r3, #5
 8010626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4413      	add	r3, r2
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010636:	4413      	add	r3, r2
 8010638:	3304      	adds	r3, #4
 801063a:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 801063c:	f7fc f84c 	bl	800c6d8 <get_Modbus_Buf_Holding_Registers_40001>
 8010640:	4603      	mov	r3, r0
 8010642:	60bb      	str	r3, [r7, #8]

	//detech rising edge of wren and then write to register
	switch(*state){
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b02      	cmp	r3, #2
 801064a:	d016      	beq.n	801067a <fb_wmhr+0xe8>
 801064c:	2b02      	cmp	r3, #2
 801064e:	d821      	bhi.n	8010694 <fb_wmhr+0x102>
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <fb_wmhr+0xc8>
 8010654:	2b01      	cmp	r3, #1
 8010656:	d008      	beq.n	801066a <fb_wmhr+0xd8>
 8010658:	e01c      	b.n	8010694 <fb_wmhr+0x102>
		case 0:
			if(*wren == 0) *state = 1;
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d11c      	bne.n	801069c <fb_wmhr+0x10a>
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2201      	movs	r2, #1
 8010666:	601a      	str	r2, [r3, #0]
			break;
 8010668:	e018      	b.n	801069c <fb_wmhr+0x10a>
		case 1:
			if(*wren == 1) *state = 2;
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2b01      	cmp	r3, #1
 8010670:	d116      	bne.n	80106a0 <fb_wmhr+0x10e>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2202      	movs	r2, #2
 8010676:	601a      	str	r2, [r3, #0]
			break;
 8010678:	e012      	b.n	80106a0 <fb_wmhr+0x10e>

		case 2:
			//write to register
			modbus_holding_reg[*reg] = *din;
 801067a:	69fb      	ldr	r3, [r7, #28]
 801067c:	6819      	ldr	r1, [r3, #0]
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	005b      	lsls	r3, r3, #1
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	4413      	add	r3, r2
 8010688:	b28a      	uxth	r2, r1
 801068a:	801a      	strh	r2, [r3, #0]
			*state = 0;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2200      	movs	r2, #0
 8010690:	601a      	str	r2, [r3, #0]
			break;
 8010692:	e006      	b.n	80106a2 <fb_wmhr+0x110>
		default:
			*state = 0;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2200      	movs	r2, #0
 8010698:	601a      	str	r2, [r3, #0]
	}
}
 801069a:	e002      	b.n	80106a2 <fb_wmhr+0x110>
			break;
 801069c:	bf00      	nop
 801069e:	e000      	b.n	80106a2 <fb_wmhr+0x110>
			break;
 80106a0:	bf00      	nop
}
 80106a2:	bf00      	nop
 80106a4:	3728      	adds	r7, #40	; 0x28
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
	...

080106ac <create_fb_wmhr>:

type_fb_wmhr create_fb_wmhr(uint8_t reg, uint8_t mode){
 80106ac:	b5b0      	push	{r4, r5, r7, lr}
 80106ae:	b08a      	sub	sp, #40	; 0x28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	460b      	mov	r3, r1
 80106b6:	70fb      	strb	r3, [r7, #3]
 80106b8:	4613      	mov	r3, r2
 80106ba:	70bb      	strb	r3, [r7, #2]
	type_fb_wmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80106bc:	f7fb fd1a 	bl	800c0f4 <get_paramAddrTable>
 80106c0:	6278      	str	r0, [r7, #36]	; 0x24
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 80106c8:	78fb      	ldrb	r3, [r7, #3]
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fb fd40 	bl	800c150 <createParameter>
 80106d0:	4603      	mov	r3, r0
 80106d2:	60fb      	str	r3, [r7, #12]
	fb.fp.din = createParameter(0);
 80106d4:	2000      	movs	r0, #0
 80106d6:	f7fb fd3b 	bl	800c150 <createParameter>
 80106da:	4603      	mov	r3, r0
 80106dc:	613b      	str	r3, [r7, #16]
	fb.fp.wren = createParameter(0);
 80106de:	2000      	movs	r0, #0
 80106e0:	f7fb fd36 	bl	800c150 <createParameter>
 80106e4:	4603      	mov	r3, r0
 80106e6:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 80106e8:	78bb      	ldrb	r3, [r7, #2]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fb fd30 	bl	800c150 <createParameter>
 80106f0:	4603      	mov	r3, r0
 80106f2:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 80106f4:	2000      	movs	r0, #0
 80106f6:	f7fb fd2b 	bl	800c150 <createParameter>
 80106fa:	4603      	mov	r3, r0
 80106fc:	61fb      	str	r3, [r7, #28]

	//internal
	fb.fp.state = createParameter(0);
 80106fe:	2000      	movs	r0, #0
 8010700:	f7fb fd26 	bl	800c150 <createParameter>
 8010704:	4603      	mov	r3, r0
 8010706:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_wmhr, fb.startParamIndex);
 8010708:	7a7b      	ldrb	r3, [r7, #9]
 801070a:	4619      	mov	r1, r3
 801070c:	4809      	ldr	r0, [pc, #36]	; (8010734 <create_fb_wmhr+0x88>)
 801070e:	f7fb fcfb 	bl	800c108 <writeToFBTable>
 8010712:	4603      	mov	r3, r0
 8010714:	723b      	strb	r3, [r7, #8]

	return fb;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	461d      	mov	r5, r3
 801071a:	f107 0408 	add.w	r4, r7, #8
 801071e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010722:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010726:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	3728      	adds	r7, #40	; 0x28
 801072e:	46bd      	mov	sp, r7
 8010730:	bdb0      	pop	{r4, r5, r7, pc}
 8010732:	bf00      	nop
 8010734:	08010593 	.word	0x08010593

08010738 <__assert_func>:
 8010738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801073a:	4614      	mov	r4, r2
 801073c:	461a      	mov	r2, r3
 801073e:	4b09      	ldr	r3, [pc, #36]	; (8010764 <__assert_func+0x2c>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4605      	mov	r5, r0
 8010744:	68d8      	ldr	r0, [r3, #12]
 8010746:	b14c      	cbz	r4, 801075c <__assert_func+0x24>
 8010748:	4b07      	ldr	r3, [pc, #28]	; (8010768 <__assert_func+0x30>)
 801074a:	9100      	str	r1, [sp, #0]
 801074c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010750:	4906      	ldr	r1, [pc, #24]	; (801076c <__assert_func+0x34>)
 8010752:	462b      	mov	r3, r5
 8010754:	f000 f814 	bl	8010780 <fiprintf>
 8010758:	f000 fd24 	bl	80111a4 <abort>
 801075c:	4b04      	ldr	r3, [pc, #16]	; (8010770 <__assert_func+0x38>)
 801075e:	461c      	mov	r4, r3
 8010760:	e7f3      	b.n	801074a <__assert_func+0x12>
 8010762:	bf00      	nop
 8010764:	200000fc 	.word	0x200000fc
 8010768:	0801c1c7 	.word	0x0801c1c7
 801076c:	0801c1d4 	.word	0x0801c1d4
 8010770:	0801c202 	.word	0x0801c202

08010774 <__errno>:
 8010774:	4b01      	ldr	r3, [pc, #4]	; (801077c <__errno+0x8>)
 8010776:	6818      	ldr	r0, [r3, #0]
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	200000fc 	.word	0x200000fc

08010780 <fiprintf>:
 8010780:	b40e      	push	{r1, r2, r3}
 8010782:	b503      	push	{r0, r1, lr}
 8010784:	4601      	mov	r1, r0
 8010786:	ab03      	add	r3, sp, #12
 8010788:	4805      	ldr	r0, [pc, #20]	; (80107a0 <fiprintf+0x20>)
 801078a:	f853 2b04 	ldr.w	r2, [r3], #4
 801078e:	6800      	ldr	r0, [r0, #0]
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	f000 f931 	bl	80109f8 <_vfiprintf_r>
 8010796:	b002      	add	sp, #8
 8010798:	f85d eb04 	ldr.w	lr, [sp], #4
 801079c:	b003      	add	sp, #12
 801079e:	4770      	bx	lr
 80107a0:	200000fc 	.word	0x200000fc

080107a4 <__libc_init_array>:
 80107a4:	b570      	push	{r4, r5, r6, lr}
 80107a6:	4d0d      	ldr	r5, [pc, #52]	; (80107dc <__libc_init_array+0x38>)
 80107a8:	4c0d      	ldr	r4, [pc, #52]	; (80107e0 <__libc_init_array+0x3c>)
 80107aa:	1b64      	subs	r4, r4, r5
 80107ac:	10a4      	asrs	r4, r4, #2
 80107ae:	2600      	movs	r6, #0
 80107b0:	42a6      	cmp	r6, r4
 80107b2:	d109      	bne.n	80107c8 <__libc_init_array+0x24>
 80107b4:	4d0b      	ldr	r5, [pc, #44]	; (80107e4 <__libc_init_array+0x40>)
 80107b6:	4c0c      	ldr	r4, [pc, #48]	; (80107e8 <__libc_init_array+0x44>)
 80107b8:	f001 f816 	bl	80117e8 <_init>
 80107bc:	1b64      	subs	r4, r4, r5
 80107be:	10a4      	asrs	r4, r4, #2
 80107c0:	2600      	movs	r6, #0
 80107c2:	42a6      	cmp	r6, r4
 80107c4:	d105      	bne.n	80107d2 <__libc_init_array+0x2e>
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80107cc:	4798      	blx	r3
 80107ce:	3601      	adds	r6, #1
 80107d0:	e7ee      	b.n	80107b0 <__libc_init_array+0xc>
 80107d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107d6:	4798      	blx	r3
 80107d8:	3601      	adds	r6, #1
 80107da:	e7f2      	b.n	80107c2 <__libc_init_array+0x1e>
 80107dc:	0801c2c8 	.word	0x0801c2c8
 80107e0:	0801c2c8 	.word	0x0801c2c8
 80107e4:	0801c2c8 	.word	0x0801c2c8
 80107e8:	0801c2cc 	.word	0x0801c2cc

080107ec <__itoa>:
 80107ec:	1e93      	subs	r3, r2, #2
 80107ee:	2b22      	cmp	r3, #34	; 0x22
 80107f0:	b510      	push	{r4, lr}
 80107f2:	460c      	mov	r4, r1
 80107f4:	d904      	bls.n	8010800 <__itoa+0x14>
 80107f6:	2300      	movs	r3, #0
 80107f8:	700b      	strb	r3, [r1, #0]
 80107fa:	461c      	mov	r4, r3
 80107fc:	4620      	mov	r0, r4
 80107fe:	bd10      	pop	{r4, pc}
 8010800:	2a0a      	cmp	r2, #10
 8010802:	d109      	bne.n	8010818 <__itoa+0x2c>
 8010804:	2800      	cmp	r0, #0
 8010806:	da07      	bge.n	8010818 <__itoa+0x2c>
 8010808:	232d      	movs	r3, #45	; 0x2d
 801080a:	700b      	strb	r3, [r1, #0]
 801080c:	4240      	negs	r0, r0
 801080e:	2101      	movs	r1, #1
 8010810:	4421      	add	r1, r4
 8010812:	f000 fbc5 	bl	8010fa0 <__utoa>
 8010816:	e7f1      	b.n	80107fc <__itoa+0x10>
 8010818:	2100      	movs	r1, #0
 801081a:	e7f9      	b.n	8010810 <__itoa+0x24>

0801081c <itoa>:
 801081c:	f7ff bfe6 	b.w	80107ec <__itoa>

08010820 <malloc>:
 8010820:	4b02      	ldr	r3, [pc, #8]	; (801082c <malloc+0xc>)
 8010822:	4601      	mov	r1, r0
 8010824:	6818      	ldr	r0, [r3, #0]
 8010826:	f000 b863 	b.w	80108f0 <_malloc_r>
 801082a:	bf00      	nop
 801082c:	200000fc 	.word	0x200000fc

08010830 <free>:
 8010830:	4b02      	ldr	r3, [pc, #8]	; (801083c <free+0xc>)
 8010832:	4601      	mov	r1, r0
 8010834:	6818      	ldr	r0, [r3, #0]
 8010836:	f000 b80b 	b.w	8010850 <_free_r>
 801083a:	bf00      	nop
 801083c:	200000fc 	.word	0x200000fc

08010840 <memset>:
 8010840:	4402      	add	r2, r0
 8010842:	4603      	mov	r3, r0
 8010844:	4293      	cmp	r3, r2
 8010846:	d100      	bne.n	801084a <memset+0xa>
 8010848:	4770      	bx	lr
 801084a:	f803 1b01 	strb.w	r1, [r3], #1
 801084e:	e7f9      	b.n	8010844 <memset+0x4>

08010850 <_free_r>:
 8010850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010852:	2900      	cmp	r1, #0
 8010854:	d048      	beq.n	80108e8 <_free_r+0x98>
 8010856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801085a:	9001      	str	r0, [sp, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	f1a1 0404 	sub.w	r4, r1, #4
 8010862:	bfb8      	it	lt
 8010864:	18e4      	addlt	r4, r4, r3
 8010866:	f000 fec3 	bl	80115f0 <__malloc_lock>
 801086a:	4a20      	ldr	r2, [pc, #128]	; (80108ec <_free_r+0x9c>)
 801086c:	9801      	ldr	r0, [sp, #4]
 801086e:	6813      	ldr	r3, [r2, #0]
 8010870:	4615      	mov	r5, r2
 8010872:	b933      	cbnz	r3, 8010882 <_free_r+0x32>
 8010874:	6063      	str	r3, [r4, #4]
 8010876:	6014      	str	r4, [r2, #0]
 8010878:	b003      	add	sp, #12
 801087a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801087e:	f000 bebd 	b.w	80115fc <__malloc_unlock>
 8010882:	42a3      	cmp	r3, r4
 8010884:	d90b      	bls.n	801089e <_free_r+0x4e>
 8010886:	6821      	ldr	r1, [r4, #0]
 8010888:	1862      	adds	r2, r4, r1
 801088a:	4293      	cmp	r3, r2
 801088c:	bf04      	itt	eq
 801088e:	681a      	ldreq	r2, [r3, #0]
 8010890:	685b      	ldreq	r3, [r3, #4]
 8010892:	6063      	str	r3, [r4, #4]
 8010894:	bf04      	itt	eq
 8010896:	1852      	addeq	r2, r2, r1
 8010898:	6022      	streq	r2, [r4, #0]
 801089a:	602c      	str	r4, [r5, #0]
 801089c:	e7ec      	b.n	8010878 <_free_r+0x28>
 801089e:	461a      	mov	r2, r3
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	b10b      	cbz	r3, 80108a8 <_free_r+0x58>
 80108a4:	42a3      	cmp	r3, r4
 80108a6:	d9fa      	bls.n	801089e <_free_r+0x4e>
 80108a8:	6811      	ldr	r1, [r2, #0]
 80108aa:	1855      	adds	r5, r2, r1
 80108ac:	42a5      	cmp	r5, r4
 80108ae:	d10b      	bne.n	80108c8 <_free_r+0x78>
 80108b0:	6824      	ldr	r4, [r4, #0]
 80108b2:	4421      	add	r1, r4
 80108b4:	1854      	adds	r4, r2, r1
 80108b6:	42a3      	cmp	r3, r4
 80108b8:	6011      	str	r1, [r2, #0]
 80108ba:	d1dd      	bne.n	8010878 <_free_r+0x28>
 80108bc:	681c      	ldr	r4, [r3, #0]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	6053      	str	r3, [r2, #4]
 80108c2:	4421      	add	r1, r4
 80108c4:	6011      	str	r1, [r2, #0]
 80108c6:	e7d7      	b.n	8010878 <_free_r+0x28>
 80108c8:	d902      	bls.n	80108d0 <_free_r+0x80>
 80108ca:	230c      	movs	r3, #12
 80108cc:	6003      	str	r3, [r0, #0]
 80108ce:	e7d3      	b.n	8010878 <_free_r+0x28>
 80108d0:	6825      	ldr	r5, [r4, #0]
 80108d2:	1961      	adds	r1, r4, r5
 80108d4:	428b      	cmp	r3, r1
 80108d6:	bf04      	itt	eq
 80108d8:	6819      	ldreq	r1, [r3, #0]
 80108da:	685b      	ldreq	r3, [r3, #4]
 80108dc:	6063      	str	r3, [r4, #4]
 80108de:	bf04      	itt	eq
 80108e0:	1949      	addeq	r1, r1, r5
 80108e2:	6021      	streq	r1, [r4, #0]
 80108e4:	6054      	str	r4, [r2, #4]
 80108e6:	e7c7      	b.n	8010878 <_free_r+0x28>
 80108e8:	b003      	add	sp, #12
 80108ea:	bd30      	pop	{r4, r5, pc}
 80108ec:	20000648 	.word	0x20000648

080108f0 <_malloc_r>:
 80108f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f2:	1ccd      	adds	r5, r1, #3
 80108f4:	f025 0503 	bic.w	r5, r5, #3
 80108f8:	3508      	adds	r5, #8
 80108fa:	2d0c      	cmp	r5, #12
 80108fc:	bf38      	it	cc
 80108fe:	250c      	movcc	r5, #12
 8010900:	2d00      	cmp	r5, #0
 8010902:	4606      	mov	r6, r0
 8010904:	db01      	blt.n	801090a <_malloc_r+0x1a>
 8010906:	42a9      	cmp	r1, r5
 8010908:	d903      	bls.n	8010912 <_malloc_r+0x22>
 801090a:	230c      	movs	r3, #12
 801090c:	6033      	str	r3, [r6, #0]
 801090e:	2000      	movs	r0, #0
 8010910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010912:	f000 fe6d 	bl	80115f0 <__malloc_lock>
 8010916:	4921      	ldr	r1, [pc, #132]	; (801099c <_malloc_r+0xac>)
 8010918:	680a      	ldr	r2, [r1, #0]
 801091a:	4614      	mov	r4, r2
 801091c:	b99c      	cbnz	r4, 8010946 <_malloc_r+0x56>
 801091e:	4f20      	ldr	r7, [pc, #128]	; (80109a0 <_malloc_r+0xb0>)
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	b923      	cbnz	r3, 801092e <_malloc_r+0x3e>
 8010924:	4621      	mov	r1, r4
 8010926:	4630      	mov	r0, r6
 8010928:	f000 fb2a 	bl	8010f80 <_sbrk_r>
 801092c:	6038      	str	r0, [r7, #0]
 801092e:	4629      	mov	r1, r5
 8010930:	4630      	mov	r0, r6
 8010932:	f000 fb25 	bl	8010f80 <_sbrk_r>
 8010936:	1c43      	adds	r3, r0, #1
 8010938:	d123      	bne.n	8010982 <_malloc_r+0x92>
 801093a:	230c      	movs	r3, #12
 801093c:	6033      	str	r3, [r6, #0]
 801093e:	4630      	mov	r0, r6
 8010940:	f000 fe5c 	bl	80115fc <__malloc_unlock>
 8010944:	e7e3      	b.n	801090e <_malloc_r+0x1e>
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	1b5b      	subs	r3, r3, r5
 801094a:	d417      	bmi.n	801097c <_malloc_r+0x8c>
 801094c:	2b0b      	cmp	r3, #11
 801094e:	d903      	bls.n	8010958 <_malloc_r+0x68>
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	441c      	add	r4, r3
 8010954:	6025      	str	r5, [r4, #0]
 8010956:	e004      	b.n	8010962 <_malloc_r+0x72>
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	42a2      	cmp	r2, r4
 801095c:	bf0c      	ite	eq
 801095e:	600b      	streq	r3, [r1, #0]
 8010960:	6053      	strne	r3, [r2, #4]
 8010962:	4630      	mov	r0, r6
 8010964:	f000 fe4a 	bl	80115fc <__malloc_unlock>
 8010968:	f104 000b 	add.w	r0, r4, #11
 801096c:	1d23      	adds	r3, r4, #4
 801096e:	f020 0007 	bic.w	r0, r0, #7
 8010972:	1ac2      	subs	r2, r0, r3
 8010974:	d0cc      	beq.n	8010910 <_malloc_r+0x20>
 8010976:	1a1b      	subs	r3, r3, r0
 8010978:	50a3      	str	r3, [r4, r2]
 801097a:	e7c9      	b.n	8010910 <_malloc_r+0x20>
 801097c:	4622      	mov	r2, r4
 801097e:	6864      	ldr	r4, [r4, #4]
 8010980:	e7cc      	b.n	801091c <_malloc_r+0x2c>
 8010982:	1cc4      	adds	r4, r0, #3
 8010984:	f024 0403 	bic.w	r4, r4, #3
 8010988:	42a0      	cmp	r0, r4
 801098a:	d0e3      	beq.n	8010954 <_malloc_r+0x64>
 801098c:	1a21      	subs	r1, r4, r0
 801098e:	4630      	mov	r0, r6
 8010990:	f000 faf6 	bl	8010f80 <_sbrk_r>
 8010994:	3001      	adds	r0, #1
 8010996:	d1dd      	bne.n	8010954 <_malloc_r+0x64>
 8010998:	e7cf      	b.n	801093a <_malloc_r+0x4a>
 801099a:	bf00      	nop
 801099c:	20000648 	.word	0x20000648
 80109a0:	2000064c 	.word	0x2000064c

080109a4 <__sfputc_r>:
 80109a4:	6893      	ldr	r3, [r2, #8]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	b410      	push	{r4}
 80109ac:	6093      	str	r3, [r2, #8]
 80109ae:	da08      	bge.n	80109c2 <__sfputc_r+0x1e>
 80109b0:	6994      	ldr	r4, [r2, #24]
 80109b2:	42a3      	cmp	r3, r4
 80109b4:	db01      	blt.n	80109ba <__sfputc_r+0x16>
 80109b6:	290a      	cmp	r1, #10
 80109b8:	d103      	bne.n	80109c2 <__sfputc_r+0x1e>
 80109ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109be:	f000 bb31 	b.w	8011024 <__swbuf_r>
 80109c2:	6813      	ldr	r3, [r2, #0]
 80109c4:	1c58      	adds	r0, r3, #1
 80109c6:	6010      	str	r0, [r2, #0]
 80109c8:	7019      	strb	r1, [r3, #0]
 80109ca:	4608      	mov	r0, r1
 80109cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d0:	4770      	bx	lr

080109d2 <__sfputs_r>:
 80109d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d4:	4606      	mov	r6, r0
 80109d6:	460f      	mov	r7, r1
 80109d8:	4614      	mov	r4, r2
 80109da:	18d5      	adds	r5, r2, r3
 80109dc:	42ac      	cmp	r4, r5
 80109de:	d101      	bne.n	80109e4 <__sfputs_r+0x12>
 80109e0:	2000      	movs	r0, #0
 80109e2:	e007      	b.n	80109f4 <__sfputs_r+0x22>
 80109e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109e8:	463a      	mov	r2, r7
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7ff ffda 	bl	80109a4 <__sfputc_r>
 80109f0:	1c43      	adds	r3, r0, #1
 80109f2:	d1f3      	bne.n	80109dc <__sfputs_r+0xa>
 80109f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109f8 <_vfiprintf_r>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	460d      	mov	r5, r1
 80109fe:	b09d      	sub	sp, #116	; 0x74
 8010a00:	4614      	mov	r4, r2
 8010a02:	4698      	mov	r8, r3
 8010a04:	4606      	mov	r6, r0
 8010a06:	b118      	cbz	r0, 8010a10 <_vfiprintf_r+0x18>
 8010a08:	6983      	ldr	r3, [r0, #24]
 8010a0a:	b90b      	cbnz	r3, 8010a10 <_vfiprintf_r+0x18>
 8010a0c:	f000 fcec 	bl	80113e8 <__sinit>
 8010a10:	4b89      	ldr	r3, [pc, #548]	; (8010c38 <_vfiprintf_r+0x240>)
 8010a12:	429d      	cmp	r5, r3
 8010a14:	d11b      	bne.n	8010a4e <_vfiprintf_r+0x56>
 8010a16:	6875      	ldr	r5, [r6, #4]
 8010a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a1a:	07d9      	lsls	r1, r3, #31
 8010a1c:	d405      	bmi.n	8010a2a <_vfiprintf_r+0x32>
 8010a1e:	89ab      	ldrh	r3, [r5, #12]
 8010a20:	059a      	lsls	r2, r3, #22
 8010a22:	d402      	bmi.n	8010a2a <_vfiprintf_r+0x32>
 8010a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a26:	f000 fd7d 	bl	8011524 <__retarget_lock_acquire_recursive>
 8010a2a:	89ab      	ldrh	r3, [r5, #12]
 8010a2c:	071b      	lsls	r3, r3, #28
 8010a2e:	d501      	bpl.n	8010a34 <_vfiprintf_r+0x3c>
 8010a30:	692b      	ldr	r3, [r5, #16]
 8010a32:	b9eb      	cbnz	r3, 8010a70 <_vfiprintf_r+0x78>
 8010a34:	4629      	mov	r1, r5
 8010a36:	4630      	mov	r0, r6
 8010a38:	f000 fb46 	bl	80110c8 <__swsetup_r>
 8010a3c:	b1c0      	cbz	r0, 8010a70 <_vfiprintf_r+0x78>
 8010a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a40:	07dc      	lsls	r4, r3, #31
 8010a42:	d50e      	bpl.n	8010a62 <_vfiprintf_r+0x6a>
 8010a44:	f04f 30ff 	mov.w	r0, #4294967295
 8010a48:	b01d      	add	sp, #116	; 0x74
 8010a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4e:	4b7b      	ldr	r3, [pc, #492]	; (8010c3c <_vfiprintf_r+0x244>)
 8010a50:	429d      	cmp	r5, r3
 8010a52:	d101      	bne.n	8010a58 <_vfiprintf_r+0x60>
 8010a54:	68b5      	ldr	r5, [r6, #8]
 8010a56:	e7df      	b.n	8010a18 <_vfiprintf_r+0x20>
 8010a58:	4b79      	ldr	r3, [pc, #484]	; (8010c40 <_vfiprintf_r+0x248>)
 8010a5a:	429d      	cmp	r5, r3
 8010a5c:	bf08      	it	eq
 8010a5e:	68f5      	ldreq	r5, [r6, #12]
 8010a60:	e7da      	b.n	8010a18 <_vfiprintf_r+0x20>
 8010a62:	89ab      	ldrh	r3, [r5, #12]
 8010a64:	0598      	lsls	r0, r3, #22
 8010a66:	d4ed      	bmi.n	8010a44 <_vfiprintf_r+0x4c>
 8010a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a6a:	f000 fd5c 	bl	8011526 <__retarget_lock_release_recursive>
 8010a6e:	e7e9      	b.n	8010a44 <_vfiprintf_r+0x4c>
 8010a70:	2300      	movs	r3, #0
 8010a72:	9309      	str	r3, [sp, #36]	; 0x24
 8010a74:	2320      	movs	r3, #32
 8010a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a7e:	2330      	movs	r3, #48	; 0x30
 8010a80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010c44 <_vfiprintf_r+0x24c>
 8010a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a88:	f04f 0901 	mov.w	r9, #1
 8010a8c:	4623      	mov	r3, r4
 8010a8e:	469a      	mov	sl, r3
 8010a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a94:	b10a      	cbz	r2, 8010a9a <_vfiprintf_r+0xa2>
 8010a96:	2a25      	cmp	r2, #37	; 0x25
 8010a98:	d1f9      	bne.n	8010a8e <_vfiprintf_r+0x96>
 8010a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a9e:	d00b      	beq.n	8010ab8 <_vfiprintf_r+0xc0>
 8010aa0:	465b      	mov	r3, fp
 8010aa2:	4622      	mov	r2, r4
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	f7ff ff93 	bl	80109d2 <__sfputs_r>
 8010aac:	3001      	adds	r0, #1
 8010aae:	f000 80aa 	beq.w	8010c06 <_vfiprintf_r+0x20e>
 8010ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ab4:	445a      	add	r2, fp
 8010ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8010ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f000 80a2 	beq.w	8010c06 <_vfiprintf_r+0x20e>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010acc:	f10a 0a01 	add.w	sl, sl, #1
 8010ad0:	9304      	str	r3, [sp, #16]
 8010ad2:	9307      	str	r3, [sp, #28]
 8010ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8010ada:	4654      	mov	r4, sl
 8010adc:	2205      	movs	r2, #5
 8010ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ae2:	4858      	ldr	r0, [pc, #352]	; (8010c44 <_vfiprintf_r+0x24c>)
 8010ae4:	f7ef fb84 	bl	80001f0 <memchr>
 8010ae8:	9a04      	ldr	r2, [sp, #16]
 8010aea:	b9d8      	cbnz	r0, 8010b24 <_vfiprintf_r+0x12c>
 8010aec:	06d1      	lsls	r1, r2, #27
 8010aee:	bf44      	itt	mi
 8010af0:	2320      	movmi	r3, #32
 8010af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010af6:	0713      	lsls	r3, r2, #28
 8010af8:	bf44      	itt	mi
 8010afa:	232b      	movmi	r3, #43	; 0x2b
 8010afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b00:	f89a 3000 	ldrb.w	r3, [sl]
 8010b04:	2b2a      	cmp	r3, #42	; 0x2a
 8010b06:	d015      	beq.n	8010b34 <_vfiprintf_r+0x13c>
 8010b08:	9a07      	ldr	r2, [sp, #28]
 8010b0a:	4654      	mov	r4, sl
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f04f 0c0a 	mov.w	ip, #10
 8010b12:	4621      	mov	r1, r4
 8010b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b18:	3b30      	subs	r3, #48	; 0x30
 8010b1a:	2b09      	cmp	r3, #9
 8010b1c:	d94e      	bls.n	8010bbc <_vfiprintf_r+0x1c4>
 8010b1e:	b1b0      	cbz	r0, 8010b4e <_vfiprintf_r+0x156>
 8010b20:	9207      	str	r2, [sp, #28]
 8010b22:	e014      	b.n	8010b4e <_vfiprintf_r+0x156>
 8010b24:	eba0 0308 	sub.w	r3, r0, r8
 8010b28:	fa09 f303 	lsl.w	r3, r9, r3
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	9304      	str	r3, [sp, #16]
 8010b30:	46a2      	mov	sl, r4
 8010b32:	e7d2      	b.n	8010ada <_vfiprintf_r+0xe2>
 8010b34:	9b03      	ldr	r3, [sp, #12]
 8010b36:	1d19      	adds	r1, r3, #4
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	9103      	str	r1, [sp, #12]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bfbb      	ittet	lt
 8010b40:	425b      	neglt	r3, r3
 8010b42:	f042 0202 	orrlt.w	r2, r2, #2
 8010b46:	9307      	strge	r3, [sp, #28]
 8010b48:	9307      	strlt	r3, [sp, #28]
 8010b4a:	bfb8      	it	lt
 8010b4c:	9204      	strlt	r2, [sp, #16]
 8010b4e:	7823      	ldrb	r3, [r4, #0]
 8010b50:	2b2e      	cmp	r3, #46	; 0x2e
 8010b52:	d10c      	bne.n	8010b6e <_vfiprintf_r+0x176>
 8010b54:	7863      	ldrb	r3, [r4, #1]
 8010b56:	2b2a      	cmp	r3, #42	; 0x2a
 8010b58:	d135      	bne.n	8010bc6 <_vfiprintf_r+0x1ce>
 8010b5a:	9b03      	ldr	r3, [sp, #12]
 8010b5c:	1d1a      	adds	r2, r3, #4
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	9203      	str	r2, [sp, #12]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	bfb8      	it	lt
 8010b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b6a:	3402      	adds	r4, #2
 8010b6c:	9305      	str	r3, [sp, #20]
 8010b6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010c54 <_vfiprintf_r+0x25c>
 8010b72:	7821      	ldrb	r1, [r4, #0]
 8010b74:	2203      	movs	r2, #3
 8010b76:	4650      	mov	r0, sl
 8010b78:	f7ef fb3a 	bl	80001f0 <memchr>
 8010b7c:	b140      	cbz	r0, 8010b90 <_vfiprintf_r+0x198>
 8010b7e:	2340      	movs	r3, #64	; 0x40
 8010b80:	eba0 000a 	sub.w	r0, r0, sl
 8010b84:	fa03 f000 	lsl.w	r0, r3, r0
 8010b88:	9b04      	ldr	r3, [sp, #16]
 8010b8a:	4303      	orrs	r3, r0
 8010b8c:	3401      	adds	r4, #1
 8010b8e:	9304      	str	r3, [sp, #16]
 8010b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b94:	482c      	ldr	r0, [pc, #176]	; (8010c48 <_vfiprintf_r+0x250>)
 8010b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b9a:	2206      	movs	r2, #6
 8010b9c:	f7ef fb28 	bl	80001f0 <memchr>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d03f      	beq.n	8010c24 <_vfiprintf_r+0x22c>
 8010ba4:	4b29      	ldr	r3, [pc, #164]	; (8010c4c <_vfiprintf_r+0x254>)
 8010ba6:	bb1b      	cbnz	r3, 8010bf0 <_vfiprintf_r+0x1f8>
 8010ba8:	9b03      	ldr	r3, [sp, #12]
 8010baa:	3307      	adds	r3, #7
 8010bac:	f023 0307 	bic.w	r3, r3, #7
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	9303      	str	r3, [sp, #12]
 8010bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb6:	443b      	add	r3, r7
 8010bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8010bba:	e767      	b.n	8010a8c <_vfiprintf_r+0x94>
 8010bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bc0:	460c      	mov	r4, r1
 8010bc2:	2001      	movs	r0, #1
 8010bc4:	e7a5      	b.n	8010b12 <_vfiprintf_r+0x11a>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	3401      	adds	r4, #1
 8010bca:	9305      	str	r3, [sp, #20]
 8010bcc:	4619      	mov	r1, r3
 8010bce:	f04f 0c0a 	mov.w	ip, #10
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bd8:	3a30      	subs	r2, #48	; 0x30
 8010bda:	2a09      	cmp	r2, #9
 8010bdc:	d903      	bls.n	8010be6 <_vfiprintf_r+0x1ee>
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d0c5      	beq.n	8010b6e <_vfiprintf_r+0x176>
 8010be2:	9105      	str	r1, [sp, #20]
 8010be4:	e7c3      	b.n	8010b6e <_vfiprintf_r+0x176>
 8010be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bea:	4604      	mov	r4, r0
 8010bec:	2301      	movs	r3, #1
 8010bee:	e7f0      	b.n	8010bd2 <_vfiprintf_r+0x1da>
 8010bf0:	ab03      	add	r3, sp, #12
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	462a      	mov	r2, r5
 8010bf6:	4b16      	ldr	r3, [pc, #88]	; (8010c50 <_vfiprintf_r+0x258>)
 8010bf8:	a904      	add	r1, sp, #16
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	f3af 8000 	nop.w
 8010c00:	4607      	mov	r7, r0
 8010c02:	1c78      	adds	r0, r7, #1
 8010c04:	d1d6      	bne.n	8010bb4 <_vfiprintf_r+0x1bc>
 8010c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c08:	07d9      	lsls	r1, r3, #31
 8010c0a:	d405      	bmi.n	8010c18 <_vfiprintf_r+0x220>
 8010c0c:	89ab      	ldrh	r3, [r5, #12]
 8010c0e:	059a      	lsls	r2, r3, #22
 8010c10:	d402      	bmi.n	8010c18 <_vfiprintf_r+0x220>
 8010c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c14:	f000 fc87 	bl	8011526 <__retarget_lock_release_recursive>
 8010c18:	89ab      	ldrh	r3, [r5, #12]
 8010c1a:	065b      	lsls	r3, r3, #25
 8010c1c:	f53f af12 	bmi.w	8010a44 <_vfiprintf_r+0x4c>
 8010c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c22:	e711      	b.n	8010a48 <_vfiprintf_r+0x50>
 8010c24:	ab03      	add	r3, sp, #12
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	462a      	mov	r2, r5
 8010c2a:	4b09      	ldr	r3, [pc, #36]	; (8010c50 <_vfiprintf_r+0x258>)
 8010c2c:	a904      	add	r1, sp, #16
 8010c2e:	4630      	mov	r0, r6
 8010c30:	f000 f880 	bl	8010d34 <_printf_i>
 8010c34:	e7e4      	b.n	8010c00 <_vfiprintf_r+0x208>
 8010c36:	bf00      	nop
 8010c38:	0801c280 	.word	0x0801c280
 8010c3c:	0801c2a0 	.word	0x0801c2a0
 8010c40:	0801c260 	.word	0x0801c260
 8010c44:	0801c208 	.word	0x0801c208
 8010c48:	0801c212 	.word	0x0801c212
 8010c4c:	00000000 	.word	0x00000000
 8010c50:	080109d3 	.word	0x080109d3
 8010c54:	0801c20e 	.word	0x0801c20e

08010c58 <_printf_common>:
 8010c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c5c:	4616      	mov	r6, r2
 8010c5e:	4699      	mov	r9, r3
 8010c60:	688a      	ldr	r2, [r1, #8]
 8010c62:	690b      	ldr	r3, [r1, #16]
 8010c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	bfb8      	it	lt
 8010c6c:	4613      	movlt	r3, r2
 8010c6e:	6033      	str	r3, [r6, #0]
 8010c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c74:	4607      	mov	r7, r0
 8010c76:	460c      	mov	r4, r1
 8010c78:	b10a      	cbz	r2, 8010c7e <_printf_common+0x26>
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	6033      	str	r3, [r6, #0]
 8010c7e:	6823      	ldr	r3, [r4, #0]
 8010c80:	0699      	lsls	r1, r3, #26
 8010c82:	bf42      	ittt	mi
 8010c84:	6833      	ldrmi	r3, [r6, #0]
 8010c86:	3302      	addmi	r3, #2
 8010c88:	6033      	strmi	r3, [r6, #0]
 8010c8a:	6825      	ldr	r5, [r4, #0]
 8010c8c:	f015 0506 	ands.w	r5, r5, #6
 8010c90:	d106      	bne.n	8010ca0 <_printf_common+0x48>
 8010c92:	f104 0a19 	add.w	sl, r4, #25
 8010c96:	68e3      	ldr	r3, [r4, #12]
 8010c98:	6832      	ldr	r2, [r6, #0]
 8010c9a:	1a9b      	subs	r3, r3, r2
 8010c9c:	42ab      	cmp	r3, r5
 8010c9e:	dc26      	bgt.n	8010cee <_printf_common+0x96>
 8010ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ca4:	1e13      	subs	r3, r2, #0
 8010ca6:	6822      	ldr	r2, [r4, #0]
 8010ca8:	bf18      	it	ne
 8010caa:	2301      	movne	r3, #1
 8010cac:	0692      	lsls	r2, r2, #26
 8010cae:	d42b      	bmi.n	8010d08 <_printf_common+0xb0>
 8010cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	47c0      	blx	r8
 8010cba:	3001      	adds	r0, #1
 8010cbc:	d01e      	beq.n	8010cfc <_printf_common+0xa4>
 8010cbe:	6823      	ldr	r3, [r4, #0]
 8010cc0:	68e5      	ldr	r5, [r4, #12]
 8010cc2:	6832      	ldr	r2, [r6, #0]
 8010cc4:	f003 0306 	and.w	r3, r3, #6
 8010cc8:	2b04      	cmp	r3, #4
 8010cca:	bf08      	it	eq
 8010ccc:	1aad      	subeq	r5, r5, r2
 8010cce:	68a3      	ldr	r3, [r4, #8]
 8010cd0:	6922      	ldr	r2, [r4, #16]
 8010cd2:	bf0c      	ite	eq
 8010cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cd8:	2500      	movne	r5, #0
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	bfc4      	itt	gt
 8010cde:	1a9b      	subgt	r3, r3, r2
 8010ce0:	18ed      	addgt	r5, r5, r3
 8010ce2:	2600      	movs	r6, #0
 8010ce4:	341a      	adds	r4, #26
 8010ce6:	42b5      	cmp	r5, r6
 8010ce8:	d11a      	bne.n	8010d20 <_printf_common+0xc8>
 8010cea:	2000      	movs	r0, #0
 8010cec:	e008      	b.n	8010d00 <_printf_common+0xa8>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	4652      	mov	r2, sl
 8010cf2:	4649      	mov	r1, r9
 8010cf4:	4638      	mov	r0, r7
 8010cf6:	47c0      	blx	r8
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	d103      	bne.n	8010d04 <_printf_common+0xac>
 8010cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d04:	3501      	adds	r5, #1
 8010d06:	e7c6      	b.n	8010c96 <_printf_common+0x3e>
 8010d08:	18e1      	adds	r1, r4, r3
 8010d0a:	1c5a      	adds	r2, r3, #1
 8010d0c:	2030      	movs	r0, #48	; 0x30
 8010d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d12:	4422      	add	r2, r4
 8010d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d1c:	3302      	adds	r3, #2
 8010d1e:	e7c7      	b.n	8010cb0 <_printf_common+0x58>
 8010d20:	2301      	movs	r3, #1
 8010d22:	4622      	mov	r2, r4
 8010d24:	4649      	mov	r1, r9
 8010d26:	4638      	mov	r0, r7
 8010d28:	47c0      	blx	r8
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	d0e6      	beq.n	8010cfc <_printf_common+0xa4>
 8010d2e:	3601      	adds	r6, #1
 8010d30:	e7d9      	b.n	8010ce6 <_printf_common+0x8e>
	...

08010d34 <_printf_i>:
 8010d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d38:	460c      	mov	r4, r1
 8010d3a:	4691      	mov	r9, r2
 8010d3c:	7e27      	ldrb	r7, [r4, #24]
 8010d3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d40:	2f78      	cmp	r7, #120	; 0x78
 8010d42:	4680      	mov	r8, r0
 8010d44:	469a      	mov	sl, r3
 8010d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d4a:	d807      	bhi.n	8010d5c <_printf_i+0x28>
 8010d4c:	2f62      	cmp	r7, #98	; 0x62
 8010d4e:	d80a      	bhi.n	8010d66 <_printf_i+0x32>
 8010d50:	2f00      	cmp	r7, #0
 8010d52:	f000 80d8 	beq.w	8010f06 <_printf_i+0x1d2>
 8010d56:	2f58      	cmp	r7, #88	; 0x58
 8010d58:	f000 80a3 	beq.w	8010ea2 <_printf_i+0x16e>
 8010d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d64:	e03a      	b.n	8010ddc <_printf_i+0xa8>
 8010d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d6a:	2b15      	cmp	r3, #21
 8010d6c:	d8f6      	bhi.n	8010d5c <_printf_i+0x28>
 8010d6e:	a001      	add	r0, pc, #4	; (adr r0, 8010d74 <_printf_i+0x40>)
 8010d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d74:	08010dcd 	.word	0x08010dcd
 8010d78:	08010de1 	.word	0x08010de1
 8010d7c:	08010d5d 	.word	0x08010d5d
 8010d80:	08010d5d 	.word	0x08010d5d
 8010d84:	08010d5d 	.word	0x08010d5d
 8010d88:	08010d5d 	.word	0x08010d5d
 8010d8c:	08010de1 	.word	0x08010de1
 8010d90:	08010d5d 	.word	0x08010d5d
 8010d94:	08010d5d 	.word	0x08010d5d
 8010d98:	08010d5d 	.word	0x08010d5d
 8010d9c:	08010d5d 	.word	0x08010d5d
 8010da0:	08010eed 	.word	0x08010eed
 8010da4:	08010e11 	.word	0x08010e11
 8010da8:	08010ecf 	.word	0x08010ecf
 8010dac:	08010d5d 	.word	0x08010d5d
 8010db0:	08010d5d 	.word	0x08010d5d
 8010db4:	08010f0f 	.word	0x08010f0f
 8010db8:	08010d5d 	.word	0x08010d5d
 8010dbc:	08010e11 	.word	0x08010e11
 8010dc0:	08010d5d 	.word	0x08010d5d
 8010dc4:	08010d5d 	.word	0x08010d5d
 8010dc8:	08010ed7 	.word	0x08010ed7
 8010dcc:	680b      	ldr	r3, [r1, #0]
 8010dce:	1d1a      	adds	r2, r3, #4
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	600a      	str	r2, [r1, #0]
 8010dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e0a3      	b.n	8010f28 <_printf_i+0x1f4>
 8010de0:	6825      	ldr	r5, [r4, #0]
 8010de2:	6808      	ldr	r0, [r1, #0]
 8010de4:	062e      	lsls	r6, r5, #24
 8010de6:	f100 0304 	add.w	r3, r0, #4
 8010dea:	d50a      	bpl.n	8010e02 <_printf_i+0xce>
 8010dec:	6805      	ldr	r5, [r0, #0]
 8010dee:	600b      	str	r3, [r1, #0]
 8010df0:	2d00      	cmp	r5, #0
 8010df2:	da03      	bge.n	8010dfc <_printf_i+0xc8>
 8010df4:	232d      	movs	r3, #45	; 0x2d
 8010df6:	426d      	negs	r5, r5
 8010df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dfc:	485e      	ldr	r0, [pc, #376]	; (8010f78 <_printf_i+0x244>)
 8010dfe:	230a      	movs	r3, #10
 8010e00:	e019      	b.n	8010e36 <_printf_i+0x102>
 8010e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e06:	6805      	ldr	r5, [r0, #0]
 8010e08:	600b      	str	r3, [r1, #0]
 8010e0a:	bf18      	it	ne
 8010e0c:	b22d      	sxthne	r5, r5
 8010e0e:	e7ef      	b.n	8010df0 <_printf_i+0xbc>
 8010e10:	680b      	ldr	r3, [r1, #0]
 8010e12:	6825      	ldr	r5, [r4, #0]
 8010e14:	1d18      	adds	r0, r3, #4
 8010e16:	6008      	str	r0, [r1, #0]
 8010e18:	0628      	lsls	r0, r5, #24
 8010e1a:	d501      	bpl.n	8010e20 <_printf_i+0xec>
 8010e1c:	681d      	ldr	r5, [r3, #0]
 8010e1e:	e002      	b.n	8010e26 <_printf_i+0xf2>
 8010e20:	0669      	lsls	r1, r5, #25
 8010e22:	d5fb      	bpl.n	8010e1c <_printf_i+0xe8>
 8010e24:	881d      	ldrh	r5, [r3, #0]
 8010e26:	4854      	ldr	r0, [pc, #336]	; (8010f78 <_printf_i+0x244>)
 8010e28:	2f6f      	cmp	r7, #111	; 0x6f
 8010e2a:	bf0c      	ite	eq
 8010e2c:	2308      	moveq	r3, #8
 8010e2e:	230a      	movne	r3, #10
 8010e30:	2100      	movs	r1, #0
 8010e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e36:	6866      	ldr	r6, [r4, #4]
 8010e38:	60a6      	str	r6, [r4, #8]
 8010e3a:	2e00      	cmp	r6, #0
 8010e3c:	bfa2      	ittt	ge
 8010e3e:	6821      	ldrge	r1, [r4, #0]
 8010e40:	f021 0104 	bicge.w	r1, r1, #4
 8010e44:	6021      	strge	r1, [r4, #0]
 8010e46:	b90d      	cbnz	r5, 8010e4c <_printf_i+0x118>
 8010e48:	2e00      	cmp	r6, #0
 8010e4a:	d04d      	beq.n	8010ee8 <_printf_i+0x1b4>
 8010e4c:	4616      	mov	r6, r2
 8010e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e52:	fb03 5711 	mls	r7, r3, r1, r5
 8010e56:	5dc7      	ldrb	r7, [r0, r7]
 8010e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e5c:	462f      	mov	r7, r5
 8010e5e:	42bb      	cmp	r3, r7
 8010e60:	460d      	mov	r5, r1
 8010e62:	d9f4      	bls.n	8010e4e <_printf_i+0x11a>
 8010e64:	2b08      	cmp	r3, #8
 8010e66:	d10b      	bne.n	8010e80 <_printf_i+0x14c>
 8010e68:	6823      	ldr	r3, [r4, #0]
 8010e6a:	07df      	lsls	r7, r3, #31
 8010e6c:	d508      	bpl.n	8010e80 <_printf_i+0x14c>
 8010e6e:	6923      	ldr	r3, [r4, #16]
 8010e70:	6861      	ldr	r1, [r4, #4]
 8010e72:	4299      	cmp	r1, r3
 8010e74:	bfde      	ittt	le
 8010e76:	2330      	movle	r3, #48	; 0x30
 8010e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e80:	1b92      	subs	r2, r2, r6
 8010e82:	6122      	str	r2, [r4, #16]
 8010e84:	f8cd a000 	str.w	sl, [sp]
 8010e88:	464b      	mov	r3, r9
 8010e8a:	aa03      	add	r2, sp, #12
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	4640      	mov	r0, r8
 8010e90:	f7ff fee2 	bl	8010c58 <_printf_common>
 8010e94:	3001      	adds	r0, #1
 8010e96:	d14c      	bne.n	8010f32 <_printf_i+0x1fe>
 8010e98:	f04f 30ff 	mov.w	r0, #4294967295
 8010e9c:	b004      	add	sp, #16
 8010e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea2:	4835      	ldr	r0, [pc, #212]	; (8010f78 <_printf_i+0x244>)
 8010ea4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	680e      	ldr	r6, [r1, #0]
 8010eac:	061f      	lsls	r7, r3, #24
 8010eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8010eb2:	600e      	str	r6, [r1, #0]
 8010eb4:	d514      	bpl.n	8010ee0 <_printf_i+0x1ac>
 8010eb6:	07d9      	lsls	r1, r3, #31
 8010eb8:	bf44      	itt	mi
 8010eba:	f043 0320 	orrmi.w	r3, r3, #32
 8010ebe:	6023      	strmi	r3, [r4, #0]
 8010ec0:	b91d      	cbnz	r5, 8010eca <_printf_i+0x196>
 8010ec2:	6823      	ldr	r3, [r4, #0]
 8010ec4:	f023 0320 	bic.w	r3, r3, #32
 8010ec8:	6023      	str	r3, [r4, #0]
 8010eca:	2310      	movs	r3, #16
 8010ecc:	e7b0      	b.n	8010e30 <_printf_i+0xfc>
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	f043 0320 	orr.w	r3, r3, #32
 8010ed4:	6023      	str	r3, [r4, #0]
 8010ed6:	2378      	movs	r3, #120	; 0x78
 8010ed8:	4828      	ldr	r0, [pc, #160]	; (8010f7c <_printf_i+0x248>)
 8010eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ede:	e7e3      	b.n	8010ea8 <_printf_i+0x174>
 8010ee0:	065e      	lsls	r6, r3, #25
 8010ee2:	bf48      	it	mi
 8010ee4:	b2ad      	uxthmi	r5, r5
 8010ee6:	e7e6      	b.n	8010eb6 <_printf_i+0x182>
 8010ee8:	4616      	mov	r6, r2
 8010eea:	e7bb      	b.n	8010e64 <_printf_i+0x130>
 8010eec:	680b      	ldr	r3, [r1, #0]
 8010eee:	6826      	ldr	r6, [r4, #0]
 8010ef0:	6960      	ldr	r0, [r4, #20]
 8010ef2:	1d1d      	adds	r5, r3, #4
 8010ef4:	600d      	str	r5, [r1, #0]
 8010ef6:	0635      	lsls	r5, r6, #24
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	d501      	bpl.n	8010f00 <_printf_i+0x1cc>
 8010efc:	6018      	str	r0, [r3, #0]
 8010efe:	e002      	b.n	8010f06 <_printf_i+0x1d2>
 8010f00:	0671      	lsls	r1, r6, #25
 8010f02:	d5fb      	bpl.n	8010efc <_printf_i+0x1c8>
 8010f04:	8018      	strh	r0, [r3, #0]
 8010f06:	2300      	movs	r3, #0
 8010f08:	6123      	str	r3, [r4, #16]
 8010f0a:	4616      	mov	r6, r2
 8010f0c:	e7ba      	b.n	8010e84 <_printf_i+0x150>
 8010f0e:	680b      	ldr	r3, [r1, #0]
 8010f10:	1d1a      	adds	r2, r3, #4
 8010f12:	600a      	str	r2, [r1, #0]
 8010f14:	681e      	ldr	r6, [r3, #0]
 8010f16:	6862      	ldr	r2, [r4, #4]
 8010f18:	2100      	movs	r1, #0
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7ef f968 	bl	80001f0 <memchr>
 8010f20:	b108      	cbz	r0, 8010f26 <_printf_i+0x1f2>
 8010f22:	1b80      	subs	r0, r0, r6
 8010f24:	6060      	str	r0, [r4, #4]
 8010f26:	6863      	ldr	r3, [r4, #4]
 8010f28:	6123      	str	r3, [r4, #16]
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f30:	e7a8      	b.n	8010e84 <_printf_i+0x150>
 8010f32:	6923      	ldr	r3, [r4, #16]
 8010f34:	4632      	mov	r2, r6
 8010f36:	4649      	mov	r1, r9
 8010f38:	4640      	mov	r0, r8
 8010f3a:	47d0      	blx	sl
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	d0ab      	beq.n	8010e98 <_printf_i+0x164>
 8010f40:	6823      	ldr	r3, [r4, #0]
 8010f42:	079b      	lsls	r3, r3, #30
 8010f44:	d413      	bmi.n	8010f6e <_printf_i+0x23a>
 8010f46:	68e0      	ldr	r0, [r4, #12]
 8010f48:	9b03      	ldr	r3, [sp, #12]
 8010f4a:	4298      	cmp	r0, r3
 8010f4c:	bfb8      	it	lt
 8010f4e:	4618      	movlt	r0, r3
 8010f50:	e7a4      	b.n	8010e9c <_printf_i+0x168>
 8010f52:	2301      	movs	r3, #1
 8010f54:	4632      	mov	r2, r6
 8010f56:	4649      	mov	r1, r9
 8010f58:	4640      	mov	r0, r8
 8010f5a:	47d0      	blx	sl
 8010f5c:	3001      	adds	r0, #1
 8010f5e:	d09b      	beq.n	8010e98 <_printf_i+0x164>
 8010f60:	3501      	adds	r5, #1
 8010f62:	68e3      	ldr	r3, [r4, #12]
 8010f64:	9903      	ldr	r1, [sp, #12]
 8010f66:	1a5b      	subs	r3, r3, r1
 8010f68:	42ab      	cmp	r3, r5
 8010f6a:	dcf2      	bgt.n	8010f52 <_printf_i+0x21e>
 8010f6c:	e7eb      	b.n	8010f46 <_printf_i+0x212>
 8010f6e:	2500      	movs	r5, #0
 8010f70:	f104 0619 	add.w	r6, r4, #25
 8010f74:	e7f5      	b.n	8010f62 <_printf_i+0x22e>
 8010f76:	bf00      	nop
 8010f78:	0801c219 	.word	0x0801c219
 8010f7c:	0801c22a 	.word	0x0801c22a

08010f80 <_sbrk_r>:
 8010f80:	b538      	push	{r3, r4, r5, lr}
 8010f82:	4d06      	ldr	r5, [pc, #24]	; (8010f9c <_sbrk_r+0x1c>)
 8010f84:	2300      	movs	r3, #0
 8010f86:	4604      	mov	r4, r0
 8010f88:	4608      	mov	r0, r1
 8010f8a:	602b      	str	r3, [r5, #0]
 8010f8c:	f7f1 f9f0 	bl	8002370 <_sbrk>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d102      	bne.n	8010f9a <_sbrk_r+0x1a>
 8010f94:	682b      	ldr	r3, [r5, #0]
 8010f96:	b103      	cbz	r3, 8010f9a <_sbrk_r+0x1a>
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
 8010f9c:	20002780 	.word	0x20002780

08010fa0 <__utoa>:
 8010fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa2:	4c1f      	ldr	r4, [pc, #124]	; (8011020 <__utoa+0x80>)
 8010fa4:	b08b      	sub	sp, #44	; 0x2c
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	466e      	mov	r6, sp
 8010fac:	f104 0c20 	add.w	ip, r4, #32
 8010fb0:	6820      	ldr	r0, [r4, #0]
 8010fb2:	6861      	ldr	r1, [r4, #4]
 8010fb4:	4637      	mov	r7, r6
 8010fb6:	c703      	stmia	r7!, {r0, r1}
 8010fb8:	3408      	adds	r4, #8
 8010fba:	4564      	cmp	r4, ip
 8010fbc:	463e      	mov	r6, r7
 8010fbe:	d1f7      	bne.n	8010fb0 <__utoa+0x10>
 8010fc0:	7921      	ldrb	r1, [r4, #4]
 8010fc2:	7139      	strb	r1, [r7, #4]
 8010fc4:	1e91      	subs	r1, r2, #2
 8010fc6:	6820      	ldr	r0, [r4, #0]
 8010fc8:	6038      	str	r0, [r7, #0]
 8010fca:	2922      	cmp	r1, #34	; 0x22
 8010fcc:	f04f 0100 	mov.w	r1, #0
 8010fd0:	d904      	bls.n	8010fdc <__utoa+0x3c>
 8010fd2:	7019      	strb	r1, [r3, #0]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	b00b      	add	sp, #44	; 0x2c
 8010fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fdc:	1e58      	subs	r0, r3, #1
 8010fde:	4684      	mov	ip, r0
 8010fe0:	fbb5 f7f2 	udiv	r7, r5, r2
 8010fe4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8010fe8:	fb02 5617 	mls	r6, r2, r7, r5
 8010fec:	4476      	add	r6, lr
 8010fee:	460c      	mov	r4, r1
 8010ff0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010ff4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010ff8:	462e      	mov	r6, r5
 8010ffa:	42b2      	cmp	r2, r6
 8010ffc:	f101 0101 	add.w	r1, r1, #1
 8011000:	463d      	mov	r5, r7
 8011002:	d9ed      	bls.n	8010fe0 <__utoa+0x40>
 8011004:	2200      	movs	r2, #0
 8011006:	545a      	strb	r2, [r3, r1]
 8011008:	1919      	adds	r1, r3, r4
 801100a:	1aa5      	subs	r5, r4, r2
 801100c:	42aa      	cmp	r2, r5
 801100e:	dae2      	bge.n	8010fd6 <__utoa+0x36>
 8011010:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011014:	780e      	ldrb	r6, [r1, #0]
 8011016:	7006      	strb	r6, [r0, #0]
 8011018:	3201      	adds	r2, #1
 801101a:	f801 5901 	strb.w	r5, [r1], #-1
 801101e:	e7f4      	b.n	801100a <__utoa+0x6a>
 8011020:	0801c23b 	.word	0x0801c23b

08011024 <__swbuf_r>:
 8011024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011026:	460e      	mov	r6, r1
 8011028:	4614      	mov	r4, r2
 801102a:	4605      	mov	r5, r0
 801102c:	b118      	cbz	r0, 8011036 <__swbuf_r+0x12>
 801102e:	6983      	ldr	r3, [r0, #24]
 8011030:	b90b      	cbnz	r3, 8011036 <__swbuf_r+0x12>
 8011032:	f000 f9d9 	bl	80113e8 <__sinit>
 8011036:	4b21      	ldr	r3, [pc, #132]	; (80110bc <__swbuf_r+0x98>)
 8011038:	429c      	cmp	r4, r3
 801103a:	d12b      	bne.n	8011094 <__swbuf_r+0x70>
 801103c:	686c      	ldr	r4, [r5, #4]
 801103e:	69a3      	ldr	r3, [r4, #24]
 8011040:	60a3      	str	r3, [r4, #8]
 8011042:	89a3      	ldrh	r3, [r4, #12]
 8011044:	071a      	lsls	r2, r3, #28
 8011046:	d52f      	bpl.n	80110a8 <__swbuf_r+0x84>
 8011048:	6923      	ldr	r3, [r4, #16]
 801104a:	b36b      	cbz	r3, 80110a8 <__swbuf_r+0x84>
 801104c:	6923      	ldr	r3, [r4, #16]
 801104e:	6820      	ldr	r0, [r4, #0]
 8011050:	1ac0      	subs	r0, r0, r3
 8011052:	6963      	ldr	r3, [r4, #20]
 8011054:	b2f6      	uxtb	r6, r6
 8011056:	4283      	cmp	r3, r0
 8011058:	4637      	mov	r7, r6
 801105a:	dc04      	bgt.n	8011066 <__swbuf_r+0x42>
 801105c:	4621      	mov	r1, r4
 801105e:	4628      	mov	r0, r5
 8011060:	f000 f92e 	bl	80112c0 <_fflush_r>
 8011064:	bb30      	cbnz	r0, 80110b4 <__swbuf_r+0x90>
 8011066:	68a3      	ldr	r3, [r4, #8]
 8011068:	3b01      	subs	r3, #1
 801106a:	60a3      	str	r3, [r4, #8]
 801106c:	6823      	ldr	r3, [r4, #0]
 801106e:	1c5a      	adds	r2, r3, #1
 8011070:	6022      	str	r2, [r4, #0]
 8011072:	701e      	strb	r6, [r3, #0]
 8011074:	6963      	ldr	r3, [r4, #20]
 8011076:	3001      	adds	r0, #1
 8011078:	4283      	cmp	r3, r0
 801107a:	d004      	beq.n	8011086 <__swbuf_r+0x62>
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	07db      	lsls	r3, r3, #31
 8011080:	d506      	bpl.n	8011090 <__swbuf_r+0x6c>
 8011082:	2e0a      	cmp	r6, #10
 8011084:	d104      	bne.n	8011090 <__swbuf_r+0x6c>
 8011086:	4621      	mov	r1, r4
 8011088:	4628      	mov	r0, r5
 801108a:	f000 f919 	bl	80112c0 <_fflush_r>
 801108e:	b988      	cbnz	r0, 80110b4 <__swbuf_r+0x90>
 8011090:	4638      	mov	r0, r7
 8011092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011094:	4b0a      	ldr	r3, [pc, #40]	; (80110c0 <__swbuf_r+0x9c>)
 8011096:	429c      	cmp	r4, r3
 8011098:	d101      	bne.n	801109e <__swbuf_r+0x7a>
 801109a:	68ac      	ldr	r4, [r5, #8]
 801109c:	e7cf      	b.n	801103e <__swbuf_r+0x1a>
 801109e:	4b09      	ldr	r3, [pc, #36]	; (80110c4 <__swbuf_r+0xa0>)
 80110a0:	429c      	cmp	r4, r3
 80110a2:	bf08      	it	eq
 80110a4:	68ec      	ldreq	r4, [r5, #12]
 80110a6:	e7ca      	b.n	801103e <__swbuf_r+0x1a>
 80110a8:	4621      	mov	r1, r4
 80110aa:	4628      	mov	r0, r5
 80110ac:	f000 f80c 	bl	80110c8 <__swsetup_r>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d0cb      	beq.n	801104c <__swbuf_r+0x28>
 80110b4:	f04f 37ff 	mov.w	r7, #4294967295
 80110b8:	e7ea      	b.n	8011090 <__swbuf_r+0x6c>
 80110ba:	bf00      	nop
 80110bc:	0801c280 	.word	0x0801c280
 80110c0:	0801c2a0 	.word	0x0801c2a0
 80110c4:	0801c260 	.word	0x0801c260

080110c8 <__swsetup_r>:
 80110c8:	4b32      	ldr	r3, [pc, #200]	; (8011194 <__swsetup_r+0xcc>)
 80110ca:	b570      	push	{r4, r5, r6, lr}
 80110cc:	681d      	ldr	r5, [r3, #0]
 80110ce:	4606      	mov	r6, r0
 80110d0:	460c      	mov	r4, r1
 80110d2:	b125      	cbz	r5, 80110de <__swsetup_r+0x16>
 80110d4:	69ab      	ldr	r3, [r5, #24]
 80110d6:	b913      	cbnz	r3, 80110de <__swsetup_r+0x16>
 80110d8:	4628      	mov	r0, r5
 80110da:	f000 f985 	bl	80113e8 <__sinit>
 80110de:	4b2e      	ldr	r3, [pc, #184]	; (8011198 <__swsetup_r+0xd0>)
 80110e0:	429c      	cmp	r4, r3
 80110e2:	d10f      	bne.n	8011104 <__swsetup_r+0x3c>
 80110e4:	686c      	ldr	r4, [r5, #4]
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110ec:	0719      	lsls	r1, r3, #28
 80110ee:	d42c      	bmi.n	801114a <__swsetup_r+0x82>
 80110f0:	06dd      	lsls	r5, r3, #27
 80110f2:	d411      	bmi.n	8011118 <__swsetup_r+0x50>
 80110f4:	2309      	movs	r3, #9
 80110f6:	6033      	str	r3, [r6, #0]
 80110f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110fc:	81a3      	strh	r3, [r4, #12]
 80110fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011102:	e03e      	b.n	8011182 <__swsetup_r+0xba>
 8011104:	4b25      	ldr	r3, [pc, #148]	; (801119c <__swsetup_r+0xd4>)
 8011106:	429c      	cmp	r4, r3
 8011108:	d101      	bne.n	801110e <__swsetup_r+0x46>
 801110a:	68ac      	ldr	r4, [r5, #8]
 801110c:	e7eb      	b.n	80110e6 <__swsetup_r+0x1e>
 801110e:	4b24      	ldr	r3, [pc, #144]	; (80111a0 <__swsetup_r+0xd8>)
 8011110:	429c      	cmp	r4, r3
 8011112:	bf08      	it	eq
 8011114:	68ec      	ldreq	r4, [r5, #12]
 8011116:	e7e6      	b.n	80110e6 <__swsetup_r+0x1e>
 8011118:	0758      	lsls	r0, r3, #29
 801111a:	d512      	bpl.n	8011142 <__swsetup_r+0x7a>
 801111c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801111e:	b141      	cbz	r1, 8011132 <__swsetup_r+0x6a>
 8011120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011124:	4299      	cmp	r1, r3
 8011126:	d002      	beq.n	801112e <__swsetup_r+0x66>
 8011128:	4630      	mov	r0, r6
 801112a:	f7ff fb91 	bl	8010850 <_free_r>
 801112e:	2300      	movs	r3, #0
 8011130:	6363      	str	r3, [r4, #52]	; 0x34
 8011132:	89a3      	ldrh	r3, [r4, #12]
 8011134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011138:	81a3      	strh	r3, [r4, #12]
 801113a:	2300      	movs	r3, #0
 801113c:	6063      	str	r3, [r4, #4]
 801113e:	6923      	ldr	r3, [r4, #16]
 8011140:	6023      	str	r3, [r4, #0]
 8011142:	89a3      	ldrh	r3, [r4, #12]
 8011144:	f043 0308 	orr.w	r3, r3, #8
 8011148:	81a3      	strh	r3, [r4, #12]
 801114a:	6923      	ldr	r3, [r4, #16]
 801114c:	b94b      	cbnz	r3, 8011162 <__swsetup_r+0x9a>
 801114e:	89a3      	ldrh	r3, [r4, #12]
 8011150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011158:	d003      	beq.n	8011162 <__swsetup_r+0x9a>
 801115a:	4621      	mov	r1, r4
 801115c:	4630      	mov	r0, r6
 801115e:	f000 fa07 	bl	8011570 <__smakebuf_r>
 8011162:	89a0      	ldrh	r0, [r4, #12]
 8011164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011168:	f010 0301 	ands.w	r3, r0, #1
 801116c:	d00a      	beq.n	8011184 <__swsetup_r+0xbc>
 801116e:	2300      	movs	r3, #0
 8011170:	60a3      	str	r3, [r4, #8]
 8011172:	6963      	ldr	r3, [r4, #20]
 8011174:	425b      	negs	r3, r3
 8011176:	61a3      	str	r3, [r4, #24]
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	b943      	cbnz	r3, 801118e <__swsetup_r+0xc6>
 801117c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011180:	d1ba      	bne.n	80110f8 <__swsetup_r+0x30>
 8011182:	bd70      	pop	{r4, r5, r6, pc}
 8011184:	0781      	lsls	r1, r0, #30
 8011186:	bf58      	it	pl
 8011188:	6963      	ldrpl	r3, [r4, #20]
 801118a:	60a3      	str	r3, [r4, #8]
 801118c:	e7f4      	b.n	8011178 <__swsetup_r+0xb0>
 801118e:	2000      	movs	r0, #0
 8011190:	e7f7      	b.n	8011182 <__swsetup_r+0xba>
 8011192:	bf00      	nop
 8011194:	200000fc 	.word	0x200000fc
 8011198:	0801c280 	.word	0x0801c280
 801119c:	0801c2a0 	.word	0x0801c2a0
 80111a0:	0801c260 	.word	0x0801c260

080111a4 <abort>:
 80111a4:	b508      	push	{r3, lr}
 80111a6:	2006      	movs	r0, #6
 80111a8:	f000 fa56 	bl	8011658 <raise>
 80111ac:	2001      	movs	r0, #1
 80111ae:	f7f1 f867 	bl	8002280 <_exit>
	...

080111b4 <__sflush_r>:
 80111b4:	898a      	ldrh	r2, [r1, #12]
 80111b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ba:	4605      	mov	r5, r0
 80111bc:	0710      	lsls	r0, r2, #28
 80111be:	460c      	mov	r4, r1
 80111c0:	d458      	bmi.n	8011274 <__sflush_r+0xc0>
 80111c2:	684b      	ldr	r3, [r1, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	dc05      	bgt.n	80111d4 <__sflush_r+0x20>
 80111c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	dc02      	bgt.n	80111d4 <__sflush_r+0x20>
 80111ce:	2000      	movs	r0, #0
 80111d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111d6:	2e00      	cmp	r6, #0
 80111d8:	d0f9      	beq.n	80111ce <__sflush_r+0x1a>
 80111da:	2300      	movs	r3, #0
 80111dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111e0:	682f      	ldr	r7, [r5, #0]
 80111e2:	602b      	str	r3, [r5, #0]
 80111e4:	d032      	beq.n	801124c <__sflush_r+0x98>
 80111e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111e8:	89a3      	ldrh	r3, [r4, #12]
 80111ea:	075a      	lsls	r2, r3, #29
 80111ec:	d505      	bpl.n	80111fa <__sflush_r+0x46>
 80111ee:	6863      	ldr	r3, [r4, #4]
 80111f0:	1ac0      	subs	r0, r0, r3
 80111f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111f4:	b10b      	cbz	r3, 80111fa <__sflush_r+0x46>
 80111f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111f8:	1ac0      	subs	r0, r0, r3
 80111fa:	2300      	movs	r3, #0
 80111fc:	4602      	mov	r2, r0
 80111fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011200:	6a21      	ldr	r1, [r4, #32]
 8011202:	4628      	mov	r0, r5
 8011204:	47b0      	blx	r6
 8011206:	1c43      	adds	r3, r0, #1
 8011208:	89a3      	ldrh	r3, [r4, #12]
 801120a:	d106      	bne.n	801121a <__sflush_r+0x66>
 801120c:	6829      	ldr	r1, [r5, #0]
 801120e:	291d      	cmp	r1, #29
 8011210:	d82c      	bhi.n	801126c <__sflush_r+0xb8>
 8011212:	4a2a      	ldr	r2, [pc, #168]	; (80112bc <__sflush_r+0x108>)
 8011214:	40ca      	lsrs	r2, r1
 8011216:	07d6      	lsls	r6, r2, #31
 8011218:	d528      	bpl.n	801126c <__sflush_r+0xb8>
 801121a:	2200      	movs	r2, #0
 801121c:	6062      	str	r2, [r4, #4]
 801121e:	04d9      	lsls	r1, r3, #19
 8011220:	6922      	ldr	r2, [r4, #16]
 8011222:	6022      	str	r2, [r4, #0]
 8011224:	d504      	bpl.n	8011230 <__sflush_r+0x7c>
 8011226:	1c42      	adds	r2, r0, #1
 8011228:	d101      	bne.n	801122e <__sflush_r+0x7a>
 801122a:	682b      	ldr	r3, [r5, #0]
 801122c:	b903      	cbnz	r3, 8011230 <__sflush_r+0x7c>
 801122e:	6560      	str	r0, [r4, #84]	; 0x54
 8011230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011232:	602f      	str	r7, [r5, #0]
 8011234:	2900      	cmp	r1, #0
 8011236:	d0ca      	beq.n	80111ce <__sflush_r+0x1a>
 8011238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801123c:	4299      	cmp	r1, r3
 801123e:	d002      	beq.n	8011246 <__sflush_r+0x92>
 8011240:	4628      	mov	r0, r5
 8011242:	f7ff fb05 	bl	8010850 <_free_r>
 8011246:	2000      	movs	r0, #0
 8011248:	6360      	str	r0, [r4, #52]	; 0x34
 801124a:	e7c1      	b.n	80111d0 <__sflush_r+0x1c>
 801124c:	6a21      	ldr	r1, [r4, #32]
 801124e:	2301      	movs	r3, #1
 8011250:	4628      	mov	r0, r5
 8011252:	47b0      	blx	r6
 8011254:	1c41      	adds	r1, r0, #1
 8011256:	d1c7      	bne.n	80111e8 <__sflush_r+0x34>
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d0c4      	beq.n	80111e8 <__sflush_r+0x34>
 801125e:	2b1d      	cmp	r3, #29
 8011260:	d001      	beq.n	8011266 <__sflush_r+0xb2>
 8011262:	2b16      	cmp	r3, #22
 8011264:	d101      	bne.n	801126a <__sflush_r+0xb6>
 8011266:	602f      	str	r7, [r5, #0]
 8011268:	e7b1      	b.n	80111ce <__sflush_r+0x1a>
 801126a:	89a3      	ldrh	r3, [r4, #12]
 801126c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011270:	81a3      	strh	r3, [r4, #12]
 8011272:	e7ad      	b.n	80111d0 <__sflush_r+0x1c>
 8011274:	690f      	ldr	r7, [r1, #16]
 8011276:	2f00      	cmp	r7, #0
 8011278:	d0a9      	beq.n	80111ce <__sflush_r+0x1a>
 801127a:	0793      	lsls	r3, r2, #30
 801127c:	680e      	ldr	r6, [r1, #0]
 801127e:	bf08      	it	eq
 8011280:	694b      	ldreq	r3, [r1, #20]
 8011282:	600f      	str	r7, [r1, #0]
 8011284:	bf18      	it	ne
 8011286:	2300      	movne	r3, #0
 8011288:	eba6 0807 	sub.w	r8, r6, r7
 801128c:	608b      	str	r3, [r1, #8]
 801128e:	f1b8 0f00 	cmp.w	r8, #0
 8011292:	dd9c      	ble.n	80111ce <__sflush_r+0x1a>
 8011294:	6a21      	ldr	r1, [r4, #32]
 8011296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011298:	4643      	mov	r3, r8
 801129a:	463a      	mov	r2, r7
 801129c:	4628      	mov	r0, r5
 801129e:	47b0      	blx	r6
 80112a0:	2800      	cmp	r0, #0
 80112a2:	dc06      	bgt.n	80112b2 <__sflush_r+0xfe>
 80112a4:	89a3      	ldrh	r3, [r4, #12]
 80112a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112aa:	81a3      	strh	r3, [r4, #12]
 80112ac:	f04f 30ff 	mov.w	r0, #4294967295
 80112b0:	e78e      	b.n	80111d0 <__sflush_r+0x1c>
 80112b2:	4407      	add	r7, r0
 80112b4:	eba8 0800 	sub.w	r8, r8, r0
 80112b8:	e7e9      	b.n	801128e <__sflush_r+0xda>
 80112ba:	bf00      	nop
 80112bc:	20400001 	.word	0x20400001

080112c0 <_fflush_r>:
 80112c0:	b538      	push	{r3, r4, r5, lr}
 80112c2:	690b      	ldr	r3, [r1, #16]
 80112c4:	4605      	mov	r5, r0
 80112c6:	460c      	mov	r4, r1
 80112c8:	b913      	cbnz	r3, 80112d0 <_fflush_r+0x10>
 80112ca:	2500      	movs	r5, #0
 80112cc:	4628      	mov	r0, r5
 80112ce:	bd38      	pop	{r3, r4, r5, pc}
 80112d0:	b118      	cbz	r0, 80112da <_fflush_r+0x1a>
 80112d2:	6983      	ldr	r3, [r0, #24]
 80112d4:	b90b      	cbnz	r3, 80112da <_fflush_r+0x1a>
 80112d6:	f000 f887 	bl	80113e8 <__sinit>
 80112da:	4b14      	ldr	r3, [pc, #80]	; (801132c <_fflush_r+0x6c>)
 80112dc:	429c      	cmp	r4, r3
 80112de:	d11b      	bne.n	8011318 <_fflush_r+0x58>
 80112e0:	686c      	ldr	r4, [r5, #4]
 80112e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0ef      	beq.n	80112ca <_fflush_r+0xa>
 80112ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112ec:	07d0      	lsls	r0, r2, #31
 80112ee:	d404      	bmi.n	80112fa <_fflush_r+0x3a>
 80112f0:	0599      	lsls	r1, r3, #22
 80112f2:	d402      	bmi.n	80112fa <_fflush_r+0x3a>
 80112f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112f6:	f000 f915 	bl	8011524 <__retarget_lock_acquire_recursive>
 80112fa:	4628      	mov	r0, r5
 80112fc:	4621      	mov	r1, r4
 80112fe:	f7ff ff59 	bl	80111b4 <__sflush_r>
 8011302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011304:	07da      	lsls	r2, r3, #31
 8011306:	4605      	mov	r5, r0
 8011308:	d4e0      	bmi.n	80112cc <_fflush_r+0xc>
 801130a:	89a3      	ldrh	r3, [r4, #12]
 801130c:	059b      	lsls	r3, r3, #22
 801130e:	d4dd      	bmi.n	80112cc <_fflush_r+0xc>
 8011310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011312:	f000 f908 	bl	8011526 <__retarget_lock_release_recursive>
 8011316:	e7d9      	b.n	80112cc <_fflush_r+0xc>
 8011318:	4b05      	ldr	r3, [pc, #20]	; (8011330 <_fflush_r+0x70>)
 801131a:	429c      	cmp	r4, r3
 801131c:	d101      	bne.n	8011322 <_fflush_r+0x62>
 801131e:	68ac      	ldr	r4, [r5, #8]
 8011320:	e7df      	b.n	80112e2 <_fflush_r+0x22>
 8011322:	4b04      	ldr	r3, [pc, #16]	; (8011334 <_fflush_r+0x74>)
 8011324:	429c      	cmp	r4, r3
 8011326:	bf08      	it	eq
 8011328:	68ec      	ldreq	r4, [r5, #12]
 801132a:	e7da      	b.n	80112e2 <_fflush_r+0x22>
 801132c:	0801c280 	.word	0x0801c280
 8011330:	0801c2a0 	.word	0x0801c2a0
 8011334:	0801c260 	.word	0x0801c260

08011338 <std>:
 8011338:	2300      	movs	r3, #0
 801133a:	b510      	push	{r4, lr}
 801133c:	4604      	mov	r4, r0
 801133e:	e9c0 3300 	strd	r3, r3, [r0]
 8011342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011346:	6083      	str	r3, [r0, #8]
 8011348:	8181      	strh	r1, [r0, #12]
 801134a:	6643      	str	r3, [r0, #100]	; 0x64
 801134c:	81c2      	strh	r2, [r0, #14]
 801134e:	6183      	str	r3, [r0, #24]
 8011350:	4619      	mov	r1, r3
 8011352:	2208      	movs	r2, #8
 8011354:	305c      	adds	r0, #92	; 0x5c
 8011356:	f7ff fa73 	bl	8010840 <memset>
 801135a:	4b05      	ldr	r3, [pc, #20]	; (8011370 <std+0x38>)
 801135c:	6263      	str	r3, [r4, #36]	; 0x24
 801135e:	4b05      	ldr	r3, [pc, #20]	; (8011374 <std+0x3c>)
 8011360:	62a3      	str	r3, [r4, #40]	; 0x28
 8011362:	4b05      	ldr	r3, [pc, #20]	; (8011378 <std+0x40>)
 8011364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011366:	4b05      	ldr	r3, [pc, #20]	; (801137c <std+0x44>)
 8011368:	6224      	str	r4, [r4, #32]
 801136a:	6323      	str	r3, [r4, #48]	; 0x30
 801136c:	bd10      	pop	{r4, pc}
 801136e:	bf00      	nop
 8011370:	08011691 	.word	0x08011691
 8011374:	080116b3 	.word	0x080116b3
 8011378:	080116eb 	.word	0x080116eb
 801137c:	0801170f 	.word	0x0801170f

08011380 <_cleanup_r>:
 8011380:	4901      	ldr	r1, [pc, #4]	; (8011388 <_cleanup_r+0x8>)
 8011382:	f000 b8af 	b.w	80114e4 <_fwalk_reent>
 8011386:	bf00      	nop
 8011388:	080112c1 	.word	0x080112c1

0801138c <__sfmoreglue>:
 801138c:	b570      	push	{r4, r5, r6, lr}
 801138e:	1e4a      	subs	r2, r1, #1
 8011390:	2568      	movs	r5, #104	; 0x68
 8011392:	4355      	muls	r5, r2
 8011394:	460e      	mov	r6, r1
 8011396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801139a:	f7ff faa9 	bl	80108f0 <_malloc_r>
 801139e:	4604      	mov	r4, r0
 80113a0:	b140      	cbz	r0, 80113b4 <__sfmoreglue+0x28>
 80113a2:	2100      	movs	r1, #0
 80113a4:	e9c0 1600 	strd	r1, r6, [r0]
 80113a8:	300c      	adds	r0, #12
 80113aa:	60a0      	str	r0, [r4, #8]
 80113ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113b0:	f7ff fa46 	bl	8010840 <memset>
 80113b4:	4620      	mov	r0, r4
 80113b6:	bd70      	pop	{r4, r5, r6, pc}

080113b8 <__sfp_lock_acquire>:
 80113b8:	4801      	ldr	r0, [pc, #4]	; (80113c0 <__sfp_lock_acquire+0x8>)
 80113ba:	f000 b8b3 	b.w	8011524 <__retarget_lock_acquire_recursive>
 80113be:	bf00      	nop
 80113c0:	2000277e 	.word	0x2000277e

080113c4 <__sfp_lock_release>:
 80113c4:	4801      	ldr	r0, [pc, #4]	; (80113cc <__sfp_lock_release+0x8>)
 80113c6:	f000 b8ae 	b.w	8011526 <__retarget_lock_release_recursive>
 80113ca:	bf00      	nop
 80113cc:	2000277e 	.word	0x2000277e

080113d0 <__sinit_lock_acquire>:
 80113d0:	4801      	ldr	r0, [pc, #4]	; (80113d8 <__sinit_lock_acquire+0x8>)
 80113d2:	f000 b8a7 	b.w	8011524 <__retarget_lock_acquire_recursive>
 80113d6:	bf00      	nop
 80113d8:	20002779 	.word	0x20002779

080113dc <__sinit_lock_release>:
 80113dc:	4801      	ldr	r0, [pc, #4]	; (80113e4 <__sinit_lock_release+0x8>)
 80113de:	f000 b8a2 	b.w	8011526 <__retarget_lock_release_recursive>
 80113e2:	bf00      	nop
 80113e4:	20002779 	.word	0x20002779

080113e8 <__sinit>:
 80113e8:	b510      	push	{r4, lr}
 80113ea:	4604      	mov	r4, r0
 80113ec:	f7ff fff0 	bl	80113d0 <__sinit_lock_acquire>
 80113f0:	69a3      	ldr	r3, [r4, #24]
 80113f2:	b11b      	cbz	r3, 80113fc <__sinit+0x14>
 80113f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113f8:	f7ff bff0 	b.w	80113dc <__sinit_lock_release>
 80113fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011400:	6523      	str	r3, [r4, #80]	; 0x50
 8011402:	4b13      	ldr	r3, [pc, #76]	; (8011450 <__sinit+0x68>)
 8011404:	4a13      	ldr	r2, [pc, #76]	; (8011454 <__sinit+0x6c>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	62a2      	str	r2, [r4, #40]	; 0x28
 801140a:	42a3      	cmp	r3, r4
 801140c:	bf04      	itt	eq
 801140e:	2301      	moveq	r3, #1
 8011410:	61a3      	streq	r3, [r4, #24]
 8011412:	4620      	mov	r0, r4
 8011414:	f000 f820 	bl	8011458 <__sfp>
 8011418:	6060      	str	r0, [r4, #4]
 801141a:	4620      	mov	r0, r4
 801141c:	f000 f81c 	bl	8011458 <__sfp>
 8011420:	60a0      	str	r0, [r4, #8]
 8011422:	4620      	mov	r0, r4
 8011424:	f000 f818 	bl	8011458 <__sfp>
 8011428:	2200      	movs	r2, #0
 801142a:	60e0      	str	r0, [r4, #12]
 801142c:	2104      	movs	r1, #4
 801142e:	6860      	ldr	r0, [r4, #4]
 8011430:	f7ff ff82 	bl	8011338 <std>
 8011434:	68a0      	ldr	r0, [r4, #8]
 8011436:	2201      	movs	r2, #1
 8011438:	2109      	movs	r1, #9
 801143a:	f7ff ff7d 	bl	8011338 <std>
 801143e:	68e0      	ldr	r0, [r4, #12]
 8011440:	2202      	movs	r2, #2
 8011442:	2112      	movs	r1, #18
 8011444:	f7ff ff78 	bl	8011338 <std>
 8011448:	2301      	movs	r3, #1
 801144a:	61a3      	str	r3, [r4, #24]
 801144c:	e7d2      	b.n	80113f4 <__sinit+0xc>
 801144e:	bf00      	nop
 8011450:	0801c204 	.word	0x0801c204
 8011454:	08011381 	.word	0x08011381

08011458 <__sfp>:
 8011458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801145a:	4607      	mov	r7, r0
 801145c:	f7ff ffac 	bl	80113b8 <__sfp_lock_acquire>
 8011460:	4b1e      	ldr	r3, [pc, #120]	; (80114dc <__sfp+0x84>)
 8011462:	681e      	ldr	r6, [r3, #0]
 8011464:	69b3      	ldr	r3, [r6, #24]
 8011466:	b913      	cbnz	r3, 801146e <__sfp+0x16>
 8011468:	4630      	mov	r0, r6
 801146a:	f7ff ffbd 	bl	80113e8 <__sinit>
 801146e:	3648      	adds	r6, #72	; 0x48
 8011470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011474:	3b01      	subs	r3, #1
 8011476:	d503      	bpl.n	8011480 <__sfp+0x28>
 8011478:	6833      	ldr	r3, [r6, #0]
 801147a:	b30b      	cbz	r3, 80114c0 <__sfp+0x68>
 801147c:	6836      	ldr	r6, [r6, #0]
 801147e:	e7f7      	b.n	8011470 <__sfp+0x18>
 8011480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011484:	b9d5      	cbnz	r5, 80114bc <__sfp+0x64>
 8011486:	4b16      	ldr	r3, [pc, #88]	; (80114e0 <__sfp+0x88>)
 8011488:	60e3      	str	r3, [r4, #12]
 801148a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801148e:	6665      	str	r5, [r4, #100]	; 0x64
 8011490:	f000 f847 	bl	8011522 <__retarget_lock_init_recursive>
 8011494:	f7ff ff96 	bl	80113c4 <__sfp_lock_release>
 8011498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801149c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80114a0:	6025      	str	r5, [r4, #0]
 80114a2:	61a5      	str	r5, [r4, #24]
 80114a4:	2208      	movs	r2, #8
 80114a6:	4629      	mov	r1, r5
 80114a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114ac:	f7ff f9c8 	bl	8010840 <memset>
 80114b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80114b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80114b8:	4620      	mov	r0, r4
 80114ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114bc:	3468      	adds	r4, #104	; 0x68
 80114be:	e7d9      	b.n	8011474 <__sfp+0x1c>
 80114c0:	2104      	movs	r1, #4
 80114c2:	4638      	mov	r0, r7
 80114c4:	f7ff ff62 	bl	801138c <__sfmoreglue>
 80114c8:	4604      	mov	r4, r0
 80114ca:	6030      	str	r0, [r6, #0]
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d1d5      	bne.n	801147c <__sfp+0x24>
 80114d0:	f7ff ff78 	bl	80113c4 <__sfp_lock_release>
 80114d4:	230c      	movs	r3, #12
 80114d6:	603b      	str	r3, [r7, #0]
 80114d8:	e7ee      	b.n	80114b8 <__sfp+0x60>
 80114da:	bf00      	nop
 80114dc:	0801c204 	.word	0x0801c204
 80114e0:	ffff0001 	.word	0xffff0001

080114e4 <_fwalk_reent>:
 80114e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e8:	4606      	mov	r6, r0
 80114ea:	4688      	mov	r8, r1
 80114ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114f0:	2700      	movs	r7, #0
 80114f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114f6:	f1b9 0901 	subs.w	r9, r9, #1
 80114fa:	d505      	bpl.n	8011508 <_fwalk_reent+0x24>
 80114fc:	6824      	ldr	r4, [r4, #0]
 80114fe:	2c00      	cmp	r4, #0
 8011500:	d1f7      	bne.n	80114f2 <_fwalk_reent+0xe>
 8011502:	4638      	mov	r0, r7
 8011504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011508:	89ab      	ldrh	r3, [r5, #12]
 801150a:	2b01      	cmp	r3, #1
 801150c:	d907      	bls.n	801151e <_fwalk_reent+0x3a>
 801150e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011512:	3301      	adds	r3, #1
 8011514:	d003      	beq.n	801151e <_fwalk_reent+0x3a>
 8011516:	4629      	mov	r1, r5
 8011518:	4630      	mov	r0, r6
 801151a:	47c0      	blx	r8
 801151c:	4307      	orrs	r7, r0
 801151e:	3568      	adds	r5, #104	; 0x68
 8011520:	e7e9      	b.n	80114f6 <_fwalk_reent+0x12>

08011522 <__retarget_lock_init_recursive>:
 8011522:	4770      	bx	lr

08011524 <__retarget_lock_acquire_recursive>:
 8011524:	4770      	bx	lr

08011526 <__retarget_lock_release_recursive>:
 8011526:	4770      	bx	lr

08011528 <__swhatbuf_r>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	460e      	mov	r6, r1
 801152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011530:	2900      	cmp	r1, #0
 8011532:	b096      	sub	sp, #88	; 0x58
 8011534:	4614      	mov	r4, r2
 8011536:	461d      	mov	r5, r3
 8011538:	da07      	bge.n	801154a <__swhatbuf_r+0x22>
 801153a:	2300      	movs	r3, #0
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	89b3      	ldrh	r3, [r6, #12]
 8011540:	061a      	lsls	r2, r3, #24
 8011542:	d410      	bmi.n	8011566 <__swhatbuf_r+0x3e>
 8011544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011548:	e00e      	b.n	8011568 <__swhatbuf_r+0x40>
 801154a:	466a      	mov	r2, sp
 801154c:	f000 f906 	bl	801175c <_fstat_r>
 8011550:	2800      	cmp	r0, #0
 8011552:	dbf2      	blt.n	801153a <__swhatbuf_r+0x12>
 8011554:	9a01      	ldr	r2, [sp, #4]
 8011556:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801155a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801155e:	425a      	negs	r2, r3
 8011560:	415a      	adcs	r2, r3
 8011562:	602a      	str	r2, [r5, #0]
 8011564:	e7ee      	b.n	8011544 <__swhatbuf_r+0x1c>
 8011566:	2340      	movs	r3, #64	; 0x40
 8011568:	2000      	movs	r0, #0
 801156a:	6023      	str	r3, [r4, #0]
 801156c:	b016      	add	sp, #88	; 0x58
 801156e:	bd70      	pop	{r4, r5, r6, pc}

08011570 <__smakebuf_r>:
 8011570:	898b      	ldrh	r3, [r1, #12]
 8011572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011574:	079d      	lsls	r5, r3, #30
 8011576:	4606      	mov	r6, r0
 8011578:	460c      	mov	r4, r1
 801157a:	d507      	bpl.n	801158c <__smakebuf_r+0x1c>
 801157c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011580:	6023      	str	r3, [r4, #0]
 8011582:	6123      	str	r3, [r4, #16]
 8011584:	2301      	movs	r3, #1
 8011586:	6163      	str	r3, [r4, #20]
 8011588:	b002      	add	sp, #8
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	ab01      	add	r3, sp, #4
 801158e:	466a      	mov	r2, sp
 8011590:	f7ff ffca 	bl	8011528 <__swhatbuf_r>
 8011594:	9900      	ldr	r1, [sp, #0]
 8011596:	4605      	mov	r5, r0
 8011598:	4630      	mov	r0, r6
 801159a:	f7ff f9a9 	bl	80108f0 <_malloc_r>
 801159e:	b948      	cbnz	r0, 80115b4 <__smakebuf_r+0x44>
 80115a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115a4:	059a      	lsls	r2, r3, #22
 80115a6:	d4ef      	bmi.n	8011588 <__smakebuf_r+0x18>
 80115a8:	f023 0303 	bic.w	r3, r3, #3
 80115ac:	f043 0302 	orr.w	r3, r3, #2
 80115b0:	81a3      	strh	r3, [r4, #12]
 80115b2:	e7e3      	b.n	801157c <__smakebuf_r+0xc>
 80115b4:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <__smakebuf_r+0x7c>)
 80115b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	6020      	str	r0, [r4, #0]
 80115bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115c0:	81a3      	strh	r3, [r4, #12]
 80115c2:	9b00      	ldr	r3, [sp, #0]
 80115c4:	6163      	str	r3, [r4, #20]
 80115c6:	9b01      	ldr	r3, [sp, #4]
 80115c8:	6120      	str	r0, [r4, #16]
 80115ca:	b15b      	cbz	r3, 80115e4 <__smakebuf_r+0x74>
 80115cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115d0:	4630      	mov	r0, r6
 80115d2:	f000 f8d5 	bl	8011780 <_isatty_r>
 80115d6:	b128      	cbz	r0, 80115e4 <__smakebuf_r+0x74>
 80115d8:	89a3      	ldrh	r3, [r4, #12]
 80115da:	f023 0303 	bic.w	r3, r3, #3
 80115de:	f043 0301 	orr.w	r3, r3, #1
 80115e2:	81a3      	strh	r3, [r4, #12]
 80115e4:	89a0      	ldrh	r0, [r4, #12]
 80115e6:	4305      	orrs	r5, r0
 80115e8:	81a5      	strh	r5, [r4, #12]
 80115ea:	e7cd      	b.n	8011588 <__smakebuf_r+0x18>
 80115ec:	08011381 	.word	0x08011381

080115f0 <__malloc_lock>:
 80115f0:	4801      	ldr	r0, [pc, #4]	; (80115f8 <__malloc_lock+0x8>)
 80115f2:	f7ff bf97 	b.w	8011524 <__retarget_lock_acquire_recursive>
 80115f6:	bf00      	nop
 80115f8:	2000277a 	.word	0x2000277a

080115fc <__malloc_unlock>:
 80115fc:	4801      	ldr	r0, [pc, #4]	; (8011604 <__malloc_unlock+0x8>)
 80115fe:	f7ff bf92 	b.w	8011526 <__retarget_lock_release_recursive>
 8011602:	bf00      	nop
 8011604:	2000277a 	.word	0x2000277a

08011608 <_raise_r>:
 8011608:	291f      	cmp	r1, #31
 801160a:	b538      	push	{r3, r4, r5, lr}
 801160c:	4604      	mov	r4, r0
 801160e:	460d      	mov	r5, r1
 8011610:	d904      	bls.n	801161c <_raise_r+0x14>
 8011612:	2316      	movs	r3, #22
 8011614:	6003      	str	r3, [r0, #0]
 8011616:	f04f 30ff 	mov.w	r0, #4294967295
 801161a:	bd38      	pop	{r3, r4, r5, pc}
 801161c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801161e:	b112      	cbz	r2, 8011626 <_raise_r+0x1e>
 8011620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011624:	b94b      	cbnz	r3, 801163a <_raise_r+0x32>
 8011626:	4620      	mov	r0, r4
 8011628:	f000 f830 	bl	801168c <_getpid_r>
 801162c:	462a      	mov	r2, r5
 801162e:	4601      	mov	r1, r0
 8011630:	4620      	mov	r0, r4
 8011632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011636:	f000 b817 	b.w	8011668 <_kill_r>
 801163a:	2b01      	cmp	r3, #1
 801163c:	d00a      	beq.n	8011654 <_raise_r+0x4c>
 801163e:	1c59      	adds	r1, r3, #1
 8011640:	d103      	bne.n	801164a <_raise_r+0x42>
 8011642:	2316      	movs	r3, #22
 8011644:	6003      	str	r3, [r0, #0]
 8011646:	2001      	movs	r0, #1
 8011648:	e7e7      	b.n	801161a <_raise_r+0x12>
 801164a:	2400      	movs	r4, #0
 801164c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011650:	4628      	mov	r0, r5
 8011652:	4798      	blx	r3
 8011654:	2000      	movs	r0, #0
 8011656:	e7e0      	b.n	801161a <_raise_r+0x12>

08011658 <raise>:
 8011658:	4b02      	ldr	r3, [pc, #8]	; (8011664 <raise+0xc>)
 801165a:	4601      	mov	r1, r0
 801165c:	6818      	ldr	r0, [r3, #0]
 801165e:	f7ff bfd3 	b.w	8011608 <_raise_r>
 8011662:	bf00      	nop
 8011664:	200000fc 	.word	0x200000fc

08011668 <_kill_r>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	4d07      	ldr	r5, [pc, #28]	; (8011688 <_kill_r+0x20>)
 801166c:	2300      	movs	r3, #0
 801166e:	4604      	mov	r4, r0
 8011670:	4608      	mov	r0, r1
 8011672:	4611      	mov	r1, r2
 8011674:	602b      	str	r3, [r5, #0]
 8011676:	f7f0 fdf3 	bl	8002260 <_kill>
 801167a:	1c43      	adds	r3, r0, #1
 801167c:	d102      	bne.n	8011684 <_kill_r+0x1c>
 801167e:	682b      	ldr	r3, [r5, #0]
 8011680:	b103      	cbz	r3, 8011684 <_kill_r+0x1c>
 8011682:	6023      	str	r3, [r4, #0]
 8011684:	bd38      	pop	{r3, r4, r5, pc}
 8011686:	bf00      	nop
 8011688:	20002780 	.word	0x20002780

0801168c <_getpid_r>:
 801168c:	f7f0 bde0 	b.w	8002250 <_getpid>

08011690 <__sread>:
 8011690:	b510      	push	{r4, lr}
 8011692:	460c      	mov	r4, r1
 8011694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011698:	f000 f894 	bl	80117c4 <_read_r>
 801169c:	2800      	cmp	r0, #0
 801169e:	bfab      	itete	ge
 80116a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116a2:	89a3      	ldrhlt	r3, [r4, #12]
 80116a4:	181b      	addge	r3, r3, r0
 80116a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116aa:	bfac      	ite	ge
 80116ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80116ae:	81a3      	strhlt	r3, [r4, #12]
 80116b0:	bd10      	pop	{r4, pc}

080116b2 <__swrite>:
 80116b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116b6:	461f      	mov	r7, r3
 80116b8:	898b      	ldrh	r3, [r1, #12]
 80116ba:	05db      	lsls	r3, r3, #23
 80116bc:	4605      	mov	r5, r0
 80116be:	460c      	mov	r4, r1
 80116c0:	4616      	mov	r6, r2
 80116c2:	d505      	bpl.n	80116d0 <__swrite+0x1e>
 80116c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c8:	2302      	movs	r3, #2
 80116ca:	2200      	movs	r2, #0
 80116cc:	f000 f868 	bl	80117a0 <_lseek_r>
 80116d0:	89a3      	ldrh	r3, [r4, #12]
 80116d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116da:	81a3      	strh	r3, [r4, #12]
 80116dc:	4632      	mov	r2, r6
 80116de:	463b      	mov	r3, r7
 80116e0:	4628      	mov	r0, r5
 80116e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116e6:	f000 b817 	b.w	8011718 <_write_r>

080116ea <__sseek>:
 80116ea:	b510      	push	{r4, lr}
 80116ec:	460c      	mov	r4, r1
 80116ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f2:	f000 f855 	bl	80117a0 <_lseek_r>
 80116f6:	1c43      	adds	r3, r0, #1
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	bf15      	itete	ne
 80116fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80116fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011706:	81a3      	strheq	r3, [r4, #12]
 8011708:	bf18      	it	ne
 801170a:	81a3      	strhne	r3, [r4, #12]
 801170c:	bd10      	pop	{r4, pc}

0801170e <__sclose>:
 801170e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011712:	f000 b813 	b.w	801173c <_close_r>
	...

08011718 <_write_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	4d07      	ldr	r5, [pc, #28]	; (8011738 <_write_r+0x20>)
 801171c:	4604      	mov	r4, r0
 801171e:	4608      	mov	r0, r1
 8011720:	4611      	mov	r1, r2
 8011722:	2200      	movs	r2, #0
 8011724:	602a      	str	r2, [r5, #0]
 8011726:	461a      	mov	r2, r3
 8011728:	f7f0 fdd1 	bl	80022ce <_write>
 801172c:	1c43      	adds	r3, r0, #1
 801172e:	d102      	bne.n	8011736 <_write_r+0x1e>
 8011730:	682b      	ldr	r3, [r5, #0]
 8011732:	b103      	cbz	r3, 8011736 <_write_r+0x1e>
 8011734:	6023      	str	r3, [r4, #0]
 8011736:	bd38      	pop	{r3, r4, r5, pc}
 8011738:	20002780 	.word	0x20002780

0801173c <_close_r>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	4d06      	ldr	r5, [pc, #24]	; (8011758 <_close_r+0x1c>)
 8011740:	2300      	movs	r3, #0
 8011742:	4604      	mov	r4, r0
 8011744:	4608      	mov	r0, r1
 8011746:	602b      	str	r3, [r5, #0]
 8011748:	f7f0 fddd 	bl	8002306 <_close>
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	d102      	bne.n	8011756 <_close_r+0x1a>
 8011750:	682b      	ldr	r3, [r5, #0]
 8011752:	b103      	cbz	r3, 8011756 <_close_r+0x1a>
 8011754:	6023      	str	r3, [r4, #0]
 8011756:	bd38      	pop	{r3, r4, r5, pc}
 8011758:	20002780 	.word	0x20002780

0801175c <_fstat_r>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4d07      	ldr	r5, [pc, #28]	; (801177c <_fstat_r+0x20>)
 8011760:	2300      	movs	r3, #0
 8011762:	4604      	mov	r4, r0
 8011764:	4608      	mov	r0, r1
 8011766:	4611      	mov	r1, r2
 8011768:	602b      	str	r3, [r5, #0]
 801176a:	f7f0 fdd8 	bl	800231e <_fstat>
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	d102      	bne.n	8011778 <_fstat_r+0x1c>
 8011772:	682b      	ldr	r3, [r5, #0]
 8011774:	b103      	cbz	r3, 8011778 <_fstat_r+0x1c>
 8011776:	6023      	str	r3, [r4, #0]
 8011778:	bd38      	pop	{r3, r4, r5, pc}
 801177a:	bf00      	nop
 801177c:	20002780 	.word	0x20002780

08011780 <_isatty_r>:
 8011780:	b538      	push	{r3, r4, r5, lr}
 8011782:	4d06      	ldr	r5, [pc, #24]	; (801179c <_isatty_r+0x1c>)
 8011784:	2300      	movs	r3, #0
 8011786:	4604      	mov	r4, r0
 8011788:	4608      	mov	r0, r1
 801178a:	602b      	str	r3, [r5, #0]
 801178c:	f7f0 fdd7 	bl	800233e <_isatty>
 8011790:	1c43      	adds	r3, r0, #1
 8011792:	d102      	bne.n	801179a <_isatty_r+0x1a>
 8011794:	682b      	ldr	r3, [r5, #0]
 8011796:	b103      	cbz	r3, 801179a <_isatty_r+0x1a>
 8011798:	6023      	str	r3, [r4, #0]
 801179a:	bd38      	pop	{r3, r4, r5, pc}
 801179c:	20002780 	.word	0x20002780

080117a0 <_lseek_r>:
 80117a0:	b538      	push	{r3, r4, r5, lr}
 80117a2:	4d07      	ldr	r5, [pc, #28]	; (80117c0 <_lseek_r+0x20>)
 80117a4:	4604      	mov	r4, r0
 80117a6:	4608      	mov	r0, r1
 80117a8:	4611      	mov	r1, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	602a      	str	r2, [r5, #0]
 80117ae:	461a      	mov	r2, r3
 80117b0:	f7f0 fdd0 	bl	8002354 <_lseek>
 80117b4:	1c43      	adds	r3, r0, #1
 80117b6:	d102      	bne.n	80117be <_lseek_r+0x1e>
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	b103      	cbz	r3, 80117be <_lseek_r+0x1e>
 80117bc:	6023      	str	r3, [r4, #0]
 80117be:	bd38      	pop	{r3, r4, r5, pc}
 80117c0:	20002780 	.word	0x20002780

080117c4 <_read_r>:
 80117c4:	b538      	push	{r3, r4, r5, lr}
 80117c6:	4d07      	ldr	r5, [pc, #28]	; (80117e4 <_read_r+0x20>)
 80117c8:	4604      	mov	r4, r0
 80117ca:	4608      	mov	r0, r1
 80117cc:	4611      	mov	r1, r2
 80117ce:	2200      	movs	r2, #0
 80117d0:	602a      	str	r2, [r5, #0]
 80117d2:	461a      	mov	r2, r3
 80117d4:	f7f0 fd5e 	bl	8002294 <_read>
 80117d8:	1c43      	adds	r3, r0, #1
 80117da:	d102      	bne.n	80117e2 <_read_r+0x1e>
 80117dc:	682b      	ldr	r3, [r5, #0]
 80117de:	b103      	cbz	r3, 80117e2 <_read_r+0x1e>
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	bd38      	pop	{r3, r4, r5, pc}
 80117e4:	20002780 	.word	0x20002780

080117e8 <_init>:
 80117e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ea:	bf00      	nop
 80117ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117ee:	bc08      	pop	{r3}
 80117f0:	469e      	mov	lr, r3
 80117f2:	4770      	bx	lr

080117f4 <_fini>:
 80117f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f6:	bf00      	nop
 80117f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117fa:	bc08      	pop	{r3}
 80117fc:	469e      	mov	lr, r3
 80117fe:	4770      	bx	lr
